
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00003372  00003406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080007c  0080007c  00003422  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002280  00000000  00000000  000067b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a92d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0c 19 	call	0x3218	; 0x3218 <main>
      8a:	0c 94 b7 19 	jmp	0x336e	; 0x336e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "inc/ADC.h"
#include "inc/ADC_priv.h"


void ADC_Init(ADC_ConfigType *ADC_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg =0;
     b54:	e4 e2       	ldi	r30, 0x24	; 36
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	13 82       	std	Z+3, r1	; 0x03
	CLEAR_BIT(ADC_BASE->ADCSRA.Reg,ADIE); /*clear the interrupt enable bit 3 in ADCSRA REG to disable the ADC interrupt*/
     b5a:	a4 e2       	ldi	r26, 0x24	; 36
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e4 e2       	ldi	r30, 0x24	; 36
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	87 7f       	andi	r24, 0xF7	; 247
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xF8) | (ADC_config->Prescalar);
     b6a:	a4 e2       	ldi	r26, 0x24	; 36
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e4 e2       	ldi	r30, 0x24	; 36
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	98 2f       	mov	r25, r24
     b76:	98 7f       	andi	r25, 0xF8	; 248
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	89 2b       	or	r24, r25
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0x3F) | (ADC_config->V_ref<<REFS0);
     b84:	a4 e2       	ldi	r26, 0x24	; 36
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e4 e2       	ldi	r30, 0x24	; 36
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	28 2f       	mov	r18, r24
     b90:	2f 73       	andi	r18, 0x3F	; 63
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	00 24       	eor	r0, r0
     b9e:	96 95       	lsr	r25
     ba0:	87 95       	ror	r24
     ba2:	07 94       	ror	r0
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	07 94       	ror	r0
     baa:	98 2f       	mov	r25, r24
     bac:	80 2d       	mov	r24, r0
     bae:	82 2b       	or	r24, r18
     bb0:	13 96       	adiw	r26, 0x03	; 3
     bb2:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xDF) | (ADC_config->Adj<<ADLAR);
     bb4:	a4 e2       	ldi	r26, 0x24	; 36
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e4 e2       	ldi	r30, 0x24	; 36
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	2f 7d       	andi	r18, 0xDF	; 223
     bc2:	e9 81       	ldd	r30, Y+1	; 0x01
     bc4:	fa 81       	ldd	r31, Y+2	; 0x02
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 95       	swap	r24
     bd2:	92 95       	swap	r25
     bd4:	90 7f       	andi	r25, 0xF0	; 240
     bd6:	98 27       	eor	r25, r24
     bd8:	80 7f       	andi	r24, 0xF0	; 240
     bda:	98 27       	eor	r25, r24
     bdc:	82 2b       	or	r24, r18
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xDF) | (ADC_config->trig_switch);
     be2:	a4 e2       	ldi	r26, 0x24	; 36
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e4 e2       	ldi	r30, 0x24	; 36
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	84 81       	ldd	r24, Z+4	; 0x04
     bf6:	89 2b       	or	r24, r25
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADEN); /*set the enable bit 7 in ADCSRA REG*/
     bfc:	a4 e2       	ldi	r26, 0x24	; 36
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e2       	ldi	r30, 0x24	; 36
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	8c 93       	st	X, r24
     c0c:	12 97       	sbiw	r26, 0x02	; 2
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(ADC_ConfigType *ADC_config)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <ADC_getDigitalValueSynchNonBlocking+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c26:	a4 e2       	ldi	r26, 0x24	; 36
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e4 e2       	ldi	r30, 0x24	; 36
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	83 81       	ldd	r24, Z+3	; 0x03
     c30:	98 2f       	mov	r25, r24
     c32:	90 7e       	andi	r25, 0xE0	; 224
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	80 81       	ld	r24, Z
     c3a:	87 70       	andi	r24, 0x07	; 7
     c3c:	89 2b       	or	r24, r25
     c3e:	13 96       	adiw	r26, 0x03	; 3
     c40:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADSC);
     c42:	a4 e2       	ldi	r26, 0x24	; 36
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e4 e2       	ldi	r30, 0x24	; 36
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 93       	st	X, r24
     c52:	12 97       	sbiw	r26, 0x02	; 2
	while(BIT_IS_CLEAR(ADC_BASE->ADCSRA.Reg,ADIF))
     c54:	e4 e2       	ldi	r30, 0x24	; 36
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 71       	andi	r24, 0x10	; 16
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <ADC_getDigitalValueSynchNonBlocking+0x3c>
	{

	}
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     c66:	a4 e2       	ldi	r26, 0x24	; 36
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e4 e2       	ldi	r30, 0x24	; 36
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	8c 93       	st	X, r24
     c76:	12 97       	sbiw	r26, 0x02	; 2
	return ADC_BASE->ADCL.Reg;
     c78:	e4 e2       	ldi	r30, 0x24	; 36
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <ADC_getDigitalValueAsynchCallBack>:

void ADC_getDigitalValueAsynchCallBack(ADC_ConfigType *ADC_config)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <ADC_getDigitalValueAsynchCallBack+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c9a:	a4 e2       	ldi	r26, 0x24	; 36
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e2       	ldi	r30, 0x24	; 36
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	98 2f       	mov	r25, r24
     ca6:	90 7e       	andi	r25, 0xE0	; 224
     ca8:	e9 81       	ldd	r30, Y+1	; 0x01
     caa:	fa 81       	ldd	r31, Y+2	; 0x02
     cac:	80 81       	ld	r24, Z
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	89 2b       	or	r24, r25
     cb2:	13 96       	adiw	r26, 0x03	; 3
     cb4:	8c 93       	st	X, r24
	SFIOR = (SFIOR & 0x1F) | (ADC_config->Trigger <<ADTS0);
     cb6:	a0 e5       	ldi	r26, 0x50	; 80
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e0 e5       	ldi	r30, 0x50	; 80
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	28 2f       	mov	r18, r24
     cc2:	2f 71       	andi	r18, 0x1F	; 31
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	85 81       	ldd	r24, Z+5	; 0x05
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	82 95       	swap	r24
     cd4:	92 95       	swap	r25
     cd6:	90 7f       	andi	r25, 0xF0	; 240
     cd8:	98 27       	eor	r25, r24
     cda:	80 7f       	andi	r24, 0xF0	; 240
     cdc:	98 27       	eor	r25, r24
     cde:	82 2b       	or	r24, r18
     ce0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIE);
     ce2:	a4 e2       	ldi	r26, 0x24	; 36
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e2       	ldi	r30, 0x24	; 36
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     cf2:	a4 e2       	ldi	r26, 0x24	; 36
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e2       	ldi	r30, 0x24	; 36
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	8c 93       	st	X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_voidSetPinDirection+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_voidSetPinDirection+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_voidSetPinDirection+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	6b 83       	std	Y+3, r22	; 0x03
     d22:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	2d 83       	std	Y+5, r18	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_voidSetPinDirection+0x2c>
     d38:	51 c0       	rjmp	.+162    	; 0xddc <DIO_voidSetPinDirection+0xce>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	24 30       	cpi	r18, 0x04	; 4
     d40:	31 05       	cpc	r19, r1
     d42:	7c f4       	brge	.+30     	; 0xd62 <DIO_voidSetPinDirection+0x54>
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	71 f1       	breq	.+92     	; 0xdaa <DIO_voidSetPinDirection+0x9c>
     d4e:	2d 81       	ldd	r18, Y+5	; 0x05
     d50:	3e 81       	ldd	r19, Y+6	; 0x06
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	ac f5       	brge	.+106    	; 0xdc2 <DIO_voidSetPinDirection+0xb4>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	d1 f0       	breq	.+52     	; 0xd94 <DIO_voidSetPinDirection+0x86>
     d60:	81 c0       	rjmp	.+258    	; 0xe64 <DIO_voidSetPinDirection+0x156>
     d62:	2d 81       	ldd	r18, Y+5	; 0x05
     d64:	3e 81       	ldd	r19, Y+6	; 0x06
     d66:	25 30       	cpi	r18, 0x05	; 5
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <DIO_voidSetPinDirection+0x60>
     d6c:	52 c0       	rjmp	.+164    	; 0xe12 <DIO_voidSetPinDirection+0x104>
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	0c f4       	brge	.+2      	; 0xd7a <DIO_voidSetPinDirection+0x6c>
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <DIO_voidSetPinDirection+0xea>
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	3e 81       	ldd	r19, Y+6	; 0x06
     d7e:	26 30       	cpi	r18, 0x06	; 6
     d80:	31 05       	cpc	r19, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <DIO_voidSetPinDirection+0x78>
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <DIO_voidSetPinDirection+0x120>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <DIO_voidSetPinDirection+0x84>
     d90:	5d c0       	rjmp	.+186    	; 0xe4c <DIO_voidSetPinDirection+0x13e>
     d92:	68 c0       	rjmp	.+208    	; 0xe64 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	98 2f       	mov	r25, r24
     d9e:	91 70       	andi	r25, 0x01	; 1
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	89 2b       	or	r24, r25
     da6:	81 83       	std	Z+1, r24	; 0x01
     da8:	5d c0       	rjmp	.+186    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	81 70       	andi	r24, 0x01	; 1
     db4:	98 2f       	mov	r25, r24
     db6:	99 0f       	add	r25, r25
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	89 2b       	or	r24, r25
     dbe:	81 83       	std	Z+1, r24	; 0x01
     dc0:	51 c0       	rjmp	.+162    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	98 2f       	mov	r25, r24
     dce:	99 0f       	add	r25, r25
     dd0:	99 0f       	add	r25, r25
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	89 2b       	or	r24, r25
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	44 c0       	rjmp	.+136    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	98 2f       	mov	r25, r24
     de8:	99 0f       	add	r25, r25
     dea:	99 0f       	add	r25, r25
     dec:	99 0f       	add	r25, r25
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	89 2b       	or	r24, r25
     df4:	81 83       	std	Z+1, r24	; 0x01
     df6:	36 c0       	rjmp	.+108    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	81 70       	andi	r24, 0x01	; 1
     e02:	98 2f       	mov	r25, r24
     e04:	92 95       	swap	r25
     e06:	90 7f       	andi	r25, 0xF0	; 240
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	8f 7e       	andi	r24, 0xEF	; 239
     e0c:	89 2b       	or	r24, r25
     e0e:	81 83       	std	Z+1, r24	; 0x01
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	98 2f       	mov	r25, r24
     e1e:	92 95       	swap	r25
     e20:	99 0f       	add	r25, r25
     e22:	90 7e       	andi	r25, 0xE0	; 224
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	89 2b       	or	r24, r25
     e2a:	81 83       	std	Z+1, r24	; 0x01
     e2c:	1b c0       	rjmp	.+54     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	81 70       	andi	r24, 0x01	; 1
     e32:	e9 81       	ldd	r30, Y+1	; 0x01
     e34:	fa 81       	ldd	r31, Y+2	; 0x02
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	98 2f       	mov	r25, r24
     e3a:	92 95       	swap	r25
     e3c:	99 0f       	add	r25, r25
     e3e:	99 0f       	add	r25, r25
     e40:	90 7c       	andi	r25, 0xC0	; 192
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	8f 7b       	andi	r24, 0xBF	; 191
     e46:	89 2b       	or	r24, r25
     e48:	81 83       	std	Z+1, r24	; 0x01
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	81 70       	andi	r24, 0x01	; 1
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	98 2f       	mov	r25, r24
     e56:	97 95       	ror	r25
     e58:	99 27       	eor	r25, r25
     e5a:	97 95       	ror	r25
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	89 2b       	or	r24, r25
     e62:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_voidSetPinValue+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_voidSetPinValue+0x8>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_voidSetPinValue+0xa>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3e 83       	std	Y+6, r19	; 0x06
     e94:	2d 83       	std	Y+5, r18	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_voidSetPinValue+0x2c>
     ea0:	51 c0       	rjmp	.+162    	; 0xf44 <DIO_voidSetPinValue+0xce>
     ea2:	2d 81       	ldd	r18, Y+5	; 0x05
     ea4:	3e 81       	ldd	r19, Y+6	; 0x06
     ea6:	24 30       	cpi	r18, 0x04	; 4
     ea8:	31 05       	cpc	r19, r1
     eaa:	7c f4       	brge	.+30     	; 0xeca <DIO_voidSetPinValue+0x54>
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <DIO_voidSetPinValue+0x9c>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	ac f5       	brge	.+106    	; 0xf2a <DIO_voidSetPinValue+0xb4>
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	d1 f0       	breq	.+52     	; 0xefc <DIO_voidSetPinValue+0x86>
     ec8:	81 c0       	rjmp	.+258    	; 0xfcc <DIO_voidSetPinValue+0x156>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	25 30       	cpi	r18, 0x05	; 5
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_voidSetPinValue+0x60>
     ed4:	52 c0       	rjmp	.+164    	; 0xf7a <DIO_voidSetPinValue+0x104>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	91 05       	cpc	r25, r1
     ede:	0c f4       	brge	.+2      	; 0xee2 <DIO_voidSetPinValue+0x6c>
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <DIO_voidSetPinValue+0xea>
     ee2:	2d 81       	ldd	r18, Y+5	; 0x05
     ee4:	3e 81       	ldd	r19, Y+6	; 0x06
     ee6:	26 30       	cpi	r18, 0x06	; 6
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_voidSetPinValue+0x78>
     eec:	54 c0       	rjmp	.+168    	; 0xf96 <DIO_voidSetPinValue+0x120>
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	87 30       	cpi	r24, 0x07	; 7
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_voidSetPinValue+0x84>
     ef8:	5d c0       	rjmp	.+186    	; 0xfb4 <DIO_voidSetPinValue+0x13e>
     efa:	68 c0       	rjmp	.+208    	; 0xfcc <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	89 2b       	or	r24, r25
     f0e:	82 83       	std	Z+2, r24	; 0x02
     f10:	5d c0       	rjmp	.+186    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	98 2f       	mov	r25, r24
     f1e:	99 0f       	add	r25, r25
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	89 2b       	or	r24, r25
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	51 c0       	rjmp	.+162    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	81 70       	andi	r24, 0x01	; 1
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	81 70       	andi	r24, 0x01	; 1
     f34:	98 2f       	mov	r25, r24
     f36:	99 0f       	add	r25, r25
     f38:	99 0f       	add	r25, r25
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	89 2b       	or	r24, r25
     f40:	82 83       	std	Z+2, r24	; 0x02
     f42:	44 c0       	rjmp	.+136    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 70       	andi	r24, 0x01	; 1
     f4e:	98 2f       	mov	r25, r24
     f50:	99 0f       	add	r25, r25
     f52:	99 0f       	add	r25, r25
     f54:	99 0f       	add	r25, r25
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	89 2b       	or	r24, r25
     f5c:	82 83       	std	Z+2, r24	; 0x02
     f5e:	36 c0       	rjmp	.+108    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	98 2f       	mov	r25, r24
     f6c:	92 95       	swap	r25
     f6e:	90 7f       	andi	r25, 0xF0	; 240
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	89 2b       	or	r24, r25
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	29 c0       	rjmp	.+82     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	98 2f       	mov	r25, r24
     f86:	92 95       	swap	r25
     f88:	99 0f       	add	r25, r25
     f8a:	90 7e       	andi	r25, 0xE0	; 224
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	89 2b       	or	r24, r25
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	81 70       	andi	r24, 0x01	; 1
     fa0:	98 2f       	mov	r25, r24
     fa2:	92 95       	swap	r25
     fa4:	99 0f       	add	r25, r25
     fa6:	99 0f       	add	r25, r25
     fa8:	90 7c       	andi	r25, 0xC0	; 192
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	89 2b       	or	r24, r25
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	98 2f       	mov	r25, r24
     fbe:	97 95       	ror	r25
     fc0:	99 27       	eor	r25, r25
     fc2:	97 95       	ror	r25
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	8f 77       	andi	r24, 0x7F	; 127
     fc8:	89 2b       	or	r24, r25
     fca:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
     fcc:	26 96       	adiw	r28, 0x06	; 6
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_voidGetPinValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_voidGetPinValue+0x8>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_voidGetPinValue+0xa>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9b 83       	std	Y+3, r25	; 0x03
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3e 83       	std	Y+6, r19	; 0x06
     ffc:	2d 83       	std	Y+5, r18	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_voidGetPinValue+0x2c>
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <DIO_voidGetPinValue+0xa8>
    100a:	2d 81       	ldd	r18, Y+5	; 0x05
    100c:	3e 81       	ldd	r19, Y+6	; 0x06
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	7c f4       	brge	.+30     	; 0x1032 <DIO_voidGetPinValue+0x54>
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	29 f1       	breq	.+74     	; 0x1068 <DIO_voidGetPinValue+0x8a>
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	3c f5       	brge	.+78     	; 0x1076 <DIO_voidGetPinValue+0x98>
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	b1 f0       	breq	.+44     	; 0x105c <DIO_voidGetPinValue+0x7e>
    1030:	55 c0       	rjmp	.+170    	; 0x10dc <DIO_voidGetPinValue+0xfe>
    1032:	2d 81       	ldd	r18, Y+5	; 0x05
    1034:	3e 81       	ldd	r19, Y+6	; 0x06
    1036:	25 30       	cpi	r18, 0x05	; 5
    1038:	31 05       	cpc	r19, r1
    103a:	b1 f1       	breq	.+108    	; 0x10a8 <DIO_voidGetPinValue+0xca>
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	91 05       	cpc	r25, r1
    1044:	4c f1       	brlt	.+82     	; 0x1098 <DIO_voidGetPinValue+0xba>
    1046:	2d 81       	ldd	r18, Y+5	; 0x05
    1048:	3e 81       	ldd	r19, Y+6	; 0x06
    104a:	26 30       	cpi	r18, 0x06	; 6
    104c:	31 05       	cpc	r19, r1
    104e:	a9 f1       	breq	.+106    	; 0x10ba <DIO_voidGetPinValue+0xdc>
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f1       	breq	.+116    	; 0x10ce <DIO_voidGetPinValue+0xf0>
    105a:	40 c0       	rjmp	.+128    	; 0x10dc <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	80 81       	ld	r24, Z
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	3a c0       	rjmp	.+116    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	80 81       	ld	r24, Z
    106e:	86 95       	lsr	r24
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	33 c0       	rjmp	.+102    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	86 95       	lsr	r24
    107e:	86 95       	lsr	r24
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	2b c0       	rjmp	.+86     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1086:	ea 81       	ldd	r30, Y+2	; 0x02
    1088:	fb 81       	ldd	r31, Y+3	; 0x03
    108a:	80 81       	ld	r24, Z
    108c:	86 95       	lsr	r24
    108e:	86 95       	lsr	r24
    1090:	86 95       	lsr	r24
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	22 c0       	rjmp	.+68     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 81       	ld	r24, Z
    109e:	82 95       	swap	r24
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	1a c0       	rjmp	.+52     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	80 81       	ld	r24, Z
    10ae:	82 95       	swap	r24
    10b0:	86 95       	lsr	r24
    10b2:	87 70       	andi	r24, 0x07	; 7
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 81       	ld	r24, Z
    10c0:	82 95       	swap	r24
    10c2:	86 95       	lsr	r24
    10c4:	86 95       	lsr	r24
    10c6:	83 70       	andi	r24, 0x03	; 3
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 81       	ld	r24, Z
    10d4:	88 1f       	adc	r24, r24
    10d6:	88 27       	eor	r24, r24
    10d8:	88 1f       	adc	r24, r24
    10da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10de:	26 96       	adiw	r28, 0x06	; 6
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_voidSetPortDirection+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 83       	std	Z+1, r24	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_voidSetPortValue+0x6>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	82 83       	std	Z+2, r24	; 0x02
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_voidGetPortValue+0x6>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 81       	ld	r24, Z
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIM0_SetCallBack>:

static void (*P_TIM0_CallBack)(void) = NULL_PTR;


void TIM0_SetCallBack(void(*Ptr2Func)(void))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIM0_SetCallBack+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	P_TIM0_CallBack = Ptr2Func;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	90 93 7d 00 	sts	0x007D, r25
    1170:	80 93 7c 00 	sts	0x007C, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM0_CallBack != NULL_PTR)
    11a8:	80 91 7c 00 	lds	r24, 0x007C
    11ac:	90 91 7d 00 	lds	r25, 0x007D
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__vector_11+0x4e>
	{
		SREG &= ~(1<<7);
    11b4:	af e5       	ldi	r26, 0x5F	; 95
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ef e5       	ldi	r30, 0x5F	; 95
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	8c 93       	st	X, r24
		P_TIM0_CallBack();
    11c2:	e0 91 7c 00 	lds	r30, 0x007C
    11c6:	f0 91 7d 00 	lds	r31, 0x007D
    11ca:	09 95       	icall
	}

}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <Timer0_Init>:


Error_Status Timer0_Init(TIM0_ConfigType *TIM0_config)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <Timer0_Init+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <Timer0_Init+0x8>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01

	switch(TIM0_config->mode)
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	2c 83       	std	Y+4, r18	; 0x04
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	b1 f1       	breq	.+108    	; 0x1288 <Timer0_Init+0x96>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <Timer0_Init+0x3e>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	71 f0       	breq	.+28     	; 0x124a <Timer0_Init+0x58>
    122e:	80 c0       	rjmp	.+256    	; 0x1330 <Timer0_Init+0x13e>
    1230:	2c 81       	ldd	r18, Y+4	; 0x04
    1232:	3d 81       	ldd	r19, Y+5	; 0x05
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <Timer0_Init+0x4a>
    123a:	40 c0       	rjmp	.+128    	; 0x12bc <Timer0_Init+0xca>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <Timer0_Init+0x56>
    1246:	5b c0       	rjmp	.+182    	; 0x12fe <Timer0_Init+0x10c>
    1248:	73 c0       	rjmp	.+230    	; 0x1330 <Timer0_Init+0x13e>
	{
	case NORMAL:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    124a:	a2 e5       	ldi	r26, 0x52	; 82
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e5       	ldi	r30, 0x52	; 82
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	81 81       	ldd	r24, Z+1	; 0x01
    1254:	80 68       	ori	r24, 0x80	; 128
    1256:	11 96       	adiw	r26, 0x01	; 1
    1258:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    125a:	a2 e5       	ldi	r26, 0x52	; 82
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e5       	ldi	r30, 0x52	; 82
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	81 81       	ldd	r24, Z+1	; 0x01
    1264:	87 7f       	andi	r24, 0xF7	; 247
    1266:	11 96       	adiw	r26, 0x01	; 1
    1268:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    126a:	a2 e5       	ldi	r26, 0x52	; 82
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e5       	ldi	r30, 0x52	; 82
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	81 81       	ldd	r24, Z+1	; 0x01
    1274:	8f 7b       	andi	r24, 0xBF	; 191
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	8c 93       	st	X, r24
		TIM0_BASE->TCNT0_t.Reg = TIM0_config->reload;
    127a:	a2 e5       	ldi	r26, 0x52	; 82
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	83 81       	ldd	r24, Z+3	; 0x03
    1284:	8c 93       	st	X, r24
    1286:	54 c0       	rjmp	.+168    	; 0x1330 <Timer0_Init+0x13e>
		break;
	case PHASE_CORRECT_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    1288:	a2 e5       	ldi	r26, 0x52	; 82
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e5       	ldi	r30, 0x52	; 82
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	81 81       	ldd	r24, Z+1	; 0x01
    1292:	8f 77       	andi	r24, 0x7F	; 127
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    1298:	a2 e5       	ldi	r26, 0x52	; 82
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e5       	ldi	r30, 0x52	; 82
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	81 81       	ldd	r24, Z+1	; 0x01
    12a2:	87 7f       	andi	r24, 0xF7	; 247
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    12a8:	a2 e5       	ldi	r26, 0x52	; 82
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e2 e5       	ldi	r30, 0x52	; 82
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	81 81       	ldd	r24, Z+1	; 0x01
    12b2:	80 64       	ori	r24, 0x40	; 64
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	8c 93       	st	X, r24
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	3a c0       	rjmp	.+116    	; 0x1330 <Timer0_Init+0x13e>
		break;
	case CTC:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    12bc:	a2 e5       	ldi	r26, 0x52	; 82
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e2 e5       	ldi	r30, 0x52	; 82
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	81 81       	ldd	r24, Z+1	; 0x01
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	11 96       	adiw	r26, 0x01	; 1
    12ca:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    12cc:	a2 e5       	ldi	r26, 0x52	; 82
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e5       	ldi	r30, 0x52	; 82
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	81 81       	ldd	r24, Z+1	; 0x01
    12d6:	88 60       	ori	r24, 0x08	; 8
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    12dc:	a2 e5       	ldi	r26, 0x52	; 82
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e2 e5       	ldi	r30, 0x52	; 82
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	81 81       	ldd	r24, Z+1	; 0x01
    12e6:	8f 7b       	andi	r24, 0xBF	; 191
    12e8:	11 96       	adiw	r26, 0x01	; 1
    12ea:	8c 93       	st	X, r24
		TIM0_BASE->OCR0_t.Reg = TIM0_config->compare;
    12ec:	a2 e5       	ldi	r26, 0x52	; 82
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e9 81       	ldd	r30, Y+1	; 0x01
    12f2:	fa 81       	ldd	r31, Y+2	; 0x02
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	1a 96       	adiw	r26, 0x0a	; 10
    12f8:	8c 93       	st	X, r24
    12fa:	1a 97       	sbiw	r26, 0x0a	; 10
    12fc:	19 c0       	rjmp	.+50     	; 0x1330 <Timer0_Init+0x13e>
		break;
	case FAST_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    12fe:	a2 e5       	ldi	r26, 0x52	; 82
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e2 e5       	ldi	r30, 0x52	; 82
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	81 81       	ldd	r24, Z+1	; 0x01
    1308:	8f 77       	andi	r24, 0x7F	; 127
    130a:	11 96       	adiw	r26, 0x01	; 1
    130c:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    130e:	a2 e5       	ldi	r26, 0x52	; 82
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e2 e5       	ldi	r30, 0x52	; 82
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	81 81       	ldd	r24, Z+1	; 0x01
    1318:	88 60       	ori	r24, 0x08	; 8
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    131e:	a2 e5       	ldi	r26, 0x52	; 82
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e2 e5       	ldi	r30, 0x52	; 82
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	81 81       	ldd	r24, Z+1	; 0x01
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	8c 93       	st	X, r24
    132e:	11 97       	sbiw	r26, 0x01	; 1
		break;
	}
	if(((TIM0_config->mode == PHASE_CORRECT_PWM) || (TIM0_config->mode == FAST_PWM)) && (TIM0_config->COM == NON_PWM_TOGGLE))
    1330:	e9 81       	ldd	r30, Y+1	; 0x01
    1332:	fa 81       	ldd	r31, Y+2	; 0x02
    1334:	80 81       	ld	r24, Z
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	29 f0       	breq	.+10     	; 0x1344 <Timer0_Init+0x152>
    133a:	e9 81       	ldd	r30, Y+1	; 0x01
    133c:	fa 81       	ldd	r31, Y+2	; 0x02
    133e:	80 81       	ld	r24, Z
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	39 f4       	brne	.+14     	; 0x1352 <Timer0_Init+0x160>
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	81 81       	ldd	r24, Z+1	; 0x01
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	11 f4       	brne	.+4      	; 0x1352 <Timer0_Init+0x160>
	{
		return OUT_OF_RANGE;
    134e:	1b 82       	std	Y+3, r1	; 0x03
    1350:	25 c0       	rjmp	.+74     	; 0x139c <Timer0_Init+0x1aa>
	}
	else
	{
		TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xCF) | TIM0_config->COM << COM00);
    1352:	a2 e5       	ldi	r26, 0x52	; 82
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e2 e5       	ldi	r30, 0x52	; 82
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	81 81       	ldd	r24, Z+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	2f 7c       	andi	r18, 0xCF	; 207
    1360:	e9 81       	ldd	r30, Y+1	; 0x01
    1362:	fa 81       	ldd	r31, Y+2	; 0x02
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	82 95       	swap	r24
    136c:	92 95       	swap	r25
    136e:	90 7f       	andi	r25, 0xF0	; 240
    1370:	98 27       	eor	r25, r24
    1372:	80 7f       	andi	r24, 0xF0	; 240
    1374:	98 27       	eor	r25, r24
    1376:	82 2b       	or	r24, r18
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	8c 93       	st	X, r24
	}
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    137c:	a2 e5       	ldi	r26, 0x52	; 82
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e2 e5       	ldi	r30, 0x52	; 82
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	81 81       	ldd	r24, Z+1	; 0x01
    1386:	98 2f       	mov	r25, r24
    1388:	98 7f       	andi	r25, 0xF8	; 248
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	84 81       	ldd	r24, Z+4	; 0x04
    1390:	89 2b       	or	r24, r25
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	8c 93       	st	X, r24
    1396:	11 97       	sbiw	r26, 0x01	; 1

	return NO_ERROR;
    1398:	92 e0       	ldi	r25, 0x02	; 2
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Timer0_start>:


void Timer0_start(TIM0_ConfigType *TIM0_config)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <Timer0_start+0x6>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    13bc:	a2 e5       	ldi	r26, 0x52	; 82
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e2 e5       	ldi	r30, 0x52	; 82
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	81 81       	ldd	r24, Z+1	; 0x01
    13c6:	98 2f       	mov	r25, r24
    13c8:	98 7f       	andi	r25, 0xF8	; 248
    13ca:	e9 81       	ldd	r30, Y+1	; 0x01
    13cc:	fa 81       	ldd	r31, Y+2	; 0x02
    13ce:	84 81       	ldd	r24, Z+4	; 0x04
    13d0:	89 2b       	or	r24, r25
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	8c 93       	st	X, r24
    13d6:	11 97       	sbiw	r26, 0x01	; 1
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <Timer0_stop>:

void Timer0_stop()
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	TIM0_BASE->TCCR0_t.Reg &= 0xF8;
    13ea:	a2 e5       	ldi	r26, 0x52	; 82
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e5       	ldi	r30, 0x52	; 82
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	88 7f       	andi	r24, 0xF8	; 248
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	8c 93       	st	X, r24
    13fa:	11 97       	sbiw	r26, 0x01	; 1
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <Timer0_GetCounts>:

void Timer0_GetCounts()
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <Timer0_SetDelayTimeMilliSecond>:

void Timer0_SetDelayTimeMilliSecond()
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <Timer0_EnableInt>:

void Timer0_EnableInt(TIM0_ConfigType *TIM0_config,void(*Ptr2Func)(void))
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <Timer0_EnableInt+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <Timer0_EnableInt+0x8>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <Timer0_EnableInt+0xa>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	7c 83       	std	Y+4, r23	; 0x04
    1432:	6b 83       	std	Y+3, r22	; 0x03
	SREG &=  ~(1<<7);
    1434:	af e5       	ldi	r26, 0x5F	; 95
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ef e5       	ldi	r30, 0x5F	; 95
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 77       	andi	r24, 0x7F	; 127
    1440:	8c 93       	st	X, r24
	switch(TIM0_config->mode)
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3e 83       	std	Y+6, r19	; 0x06
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f0       	breq	.+12     	; 0x1464 <Timer0_EnableInt+0x46>
    1458:	2d 81       	ldd	r18, Y+5	; 0x05
    145a:	3e 81       	ldd	r19, Y+6	; 0x06
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	49 f0       	breq	.+18     	; 0x1474 <Timer0_EnableInt+0x56>
    1462:	0f c0       	rjmp	.+30     	; 0x1482 <Timer0_EnableInt+0x64>
	{
	case NORMAL:
		SET_BIT(TIMSK,TOIE0);
    1464:	a9 e5       	ldi	r26, 0x59	; 89
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e9 e5       	ldi	r30, 0x59	; 89
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	8c 93       	st	X, r24
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <Timer0_EnableInt+0x64>
		break;
	case CTC:
		SET_BIT(TIMSK,OCIE0);
    1474:	a9 e5       	ldi	r26, 0x59	; 89
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e9 e5       	ldi	r30, 0x59	; 89
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	82 60       	ori	r24, 0x02	; 2
    1480:	8c 93       	st	X, r24
		break;
	}
	TIM0_SetCallBack(*Ptr2Func);
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	0e 94 ad 08 	call	0x115a	; 0x115a <TIM0_SetCallBack>
	SREG |= (1<<7);
    148a:	af e5       	ldi	r26, 0x5F	; 95
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	ef e5       	ldi	r30, 0x5F	; 95
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	8c 93       	st	X, r24
}
    1498:	26 96       	adiw	r28, 0x06	; 6
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Timer0_DisableInt>:

void Timer0_DisableInt()
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    14b2:	a9 e5       	ldi	r26, 0x59	; 89
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e9 e5       	ldi	r30, 0x59	; 89
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8e 7f       	andi	r24, 0xFE	; 254
    14be:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    14c0:	a9 e5       	ldi	r26, 0x59	; 89
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	8d 7f       	andi	r24, 0xFD	; 253
    14cc:	8c 93       	st	X, r24
}
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <Timer0_setFastPWM>:

Error_Status Timer0_setFastPWM(uint8 duty,TIM0_ConfigType *TIM0_config)
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	2f 97       	sbiw	r28, 0x0f	; 15
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	7b 83       	std	Y+3, r23	; 0x03
    14ec:	6a 83       	std	Y+2, r22	; 0x02
	if(duty>=0 || duty<=100)
	{
		TIM0_BASE->OCR0_t.Reg  = abs (((duty*256)/100)-1);
    14ee:	82 e5       	ldi	r24, 0x52	; 82
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9f 87       	std	Y+15, r25	; 0x0f
    14f4:	8e 87       	std	Y+14, r24	; 0x0e
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	98 2f       	mov	r25, r24
    14fe:	88 27       	eor	r24, r24
    1500:	24 e6       	ldi	r18, 0x64	; 100
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 28 19 	call	0x3250	; 0x3250 <__divmodhi4>
    150a:	cb 01       	movw	r24, r22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9d 87       	std	Y+13, r25	; 0x0d
    1510:	8c 87       	std	Y+12, r24	; 0x0c
    1512:	ec 85       	ldd	r30, Y+12	; 0x0c
    1514:	fd 85       	ldd	r31, Y+13	; 0x0d
    1516:	ff 23       	and	r31, r31
    1518:	3c f4       	brge	.+14     	; 0x1528 <Timer0_setFastPWM+0x54>
    151a:	8c 85       	ldd	r24, Y+12	; 0x0c
    151c:	9d 85       	ldd	r25, Y+13	; 0x0d
    151e:	90 95       	com	r25
    1520:	81 95       	neg	r24
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	9d 87       	std	Y+13, r25	; 0x0d
    1526:	8c 87       	std	Y+12, r24	; 0x0c
    1528:	8c 85       	ldd	r24, Y+12	; 0x0c
    152a:	ee 85       	ldd	r30, Y+14	; 0x0e
    152c:	ff 85       	ldd	r31, Y+15	; 0x0f
    152e:	82 87       	std	Z+10, r24	; 0x0a

		if(TIM0_config->COM == CLEAR_COM)
    1530:	ea 81       	ldd	r30, Y+2	; 0x02
    1532:	fb 81       	ldd	r31, Y+3	; 0x03
    1534:	81 81       	ldd	r24, Z+1	; 0x01
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	71 f5       	brne	.+92     	; 0x1596 <Timer0_setFastPWM+0xc2>
		{
			TIM0_BASE->OCR0_t.Reg  = abs (((duty*255)/100)-1);
    153a:	82 e5       	ldi	r24, 0x52	; 82
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	9b 87       	std	Y+11, r25	; 0x0b
    1540:	8a 87       	std	Y+10, r24	; 0x0a
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	48 2f       	mov	r20, r24
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	ca 01       	movw	r24, r20
    154a:	9c 01       	movw	r18, r24
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	c9 01       	movw	r24, r18
    1552:	96 95       	lsr	r25
    1554:	98 2f       	mov	r25, r24
    1556:	88 27       	eor	r24, r24
    1558:	97 95       	ror	r25
    155a:	87 95       	ror	r24
    155c:	82 1b       	sub	r24, r18
    155e:	93 0b       	sbc	r25, r19
    1560:	84 0f       	add	r24, r20
    1562:	95 1f       	adc	r25, r21
    1564:	24 e6       	ldi	r18, 0x64	; 100
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	b9 01       	movw	r22, r18
    156a:	0e 94 28 19 	call	0x3250	; 0x3250 <__divmodhi4>
    156e:	cb 01       	movw	r24, r22
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	99 87       	std	Y+9, r25	; 0x09
    1574:	88 87       	std	Y+8, r24	; 0x08
    1576:	e8 85       	ldd	r30, Y+8	; 0x08
    1578:	f9 85       	ldd	r31, Y+9	; 0x09
    157a:	ff 23       	and	r31, r31
    157c:	3c f4       	brge	.+14     	; 0x158c <Timer0_setFastPWM+0xb8>
    157e:	88 85       	ldd	r24, Y+8	; 0x08
    1580:	99 85       	ldd	r25, Y+9	; 0x09
    1582:	90 95       	com	r25
    1584:	81 95       	neg	r24
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	99 87       	std	Y+9, r25	; 0x09
    158a:	88 87       	std	Y+8, r24	; 0x08
    158c:	88 85       	ldd	r24, Y+8	; 0x08
    158e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1590:	fb 85       	ldd	r31, Y+11	; 0x0b
    1592:	82 87       	std	Z+10, r24	; 0x0a
    1594:	2a c0       	rjmp	.+84     	; 0x15ea <Timer0_setFastPWM+0x116>
		}
		else if(TIM0_config->COM == SET_COM)
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	29 f5       	brne	.+74     	; 0x15ea <Timer0_setFastPWM+0x116>
		{
			TIM0_BASE->OCR0_t.Reg  = abs(255-((duty*256)/100));
    15a0:	82 e5       	ldi	r24, 0x52	; 82
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9f 83       	std	Y+7, r25	; 0x07
    15a6:	8e 83       	std	Y+6, r24	; 0x06
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	98 2f       	mov	r25, r24
    15b0:	88 27       	eor	r24, r24
    15b2:	24 e6       	ldi	r18, 0x64	; 100
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	b9 01       	movw	r22, r18
    15b8:	0e 94 28 19 	call	0x3250	; 0x3250 <__divmodhi4>
    15bc:	cb 01       	movw	r24, r22
    15be:	9c 01       	movw	r18, r24
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	82 1b       	sub	r24, r18
    15c6:	93 0b       	sbc	r25, r19
    15c8:	9d 83       	std	Y+5, r25	; 0x05
    15ca:	8c 83       	std	Y+4, r24	; 0x04
    15cc:	ec 81       	ldd	r30, Y+4	; 0x04
    15ce:	fd 81       	ldd	r31, Y+5	; 0x05
    15d0:	ff 23       	and	r31, r31
    15d2:	3c f4       	brge	.+14     	; 0x15e2 <Timer0_setFastPWM+0x10e>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	90 95       	com	r25
    15da:	81 95       	neg	r24
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	9d 83       	std	Y+5, r25	; 0x05
    15e0:	8c 83       	std	Y+4, r24	; 0x04
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	ee 81       	ldd	r30, Y+6	; 0x06
    15e6:	ff 81       	ldd	r31, Y+7	; 0x07
    15e8:	82 87       	std	Z+10, r24	; 0x0a
	else
	{
		return OUT_OF_RANGE;
	}

	return NO_ERROR;
    15ea:	82 e0       	ldi	r24, 0x02	; 2
}
    15ec:	2f 96       	adiw	r28, 0x0f	; 15
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <setphaseCorrectPWM>:


void setphaseCorrectPWM(uint8 duty)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	89 83       	std	Y+1, r24	; 0x01


	TIM0_BASE->OCR0_t.Reg  = (duty*255)/100;
    160a:	e2 e5       	ldi	r30, 0x52	; 82
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	48 2f       	mov	r20, r24
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	ca 01       	movw	r24, r20
    1616:	9c 01       	movw	r18, r24
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	c9 01       	movw	r24, r18
    161e:	96 95       	lsr	r25
    1620:	98 2f       	mov	r25, r24
    1622:	88 27       	eor	r24, r24
    1624:	97 95       	ror	r25
    1626:	87 95       	ror	r24
    1628:	82 1b       	sub	r24, r18
    162a:	93 0b       	sbc	r25, r19
    162c:	84 0f       	add	r24, r20
    162e:	95 1f       	adc	r25, r21
    1630:	24 e6       	ldi	r18, 0x64	; 100
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	0e 94 28 19 	call	0x3250	; 0x3250 <__divmodhi4>
    163a:	cb 01       	movw	r24, r22
    163c:	82 87       	std	Z+10, r24	; 0x0a

}
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <TIM1_SetCallBack>:

static void (*P_TIM1_CallBack)(void) = NULL_PTR;


void TIM1_SetCallBack(void(*Ptr2Func)(void))
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <TIM1_SetCallBack+0x6>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
	P_TIM1_CallBack = Ptr2Func;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	90 93 7f 00 	sts	0x007F, r25
    165c:	80 93 7e 00 	sts	0x007E, r24
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM1_CallBack != NULL_PTR)
    1694:	80 91 7e 00 	lds	r24, 0x007E
    1698:	90 91 7f 00 	lds	r25, 0x007F
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 f0       	breq	.+24     	; 0x16b8 <__vector_9+0x4e>
	{
		SREG &= ~(1<<7);
    16a0:	af e5       	ldi	r26, 0x5F	; 95
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	ef e5       	ldi	r30, 0x5F	; 95
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 77       	andi	r24, 0x7F	; 127
    16ac:	8c 93       	st	X, r24
		P_TIM1_CallBack();
    16ae:	e0 91 7e 00 	lds	r30, 0x007E
    16b2:	f0 91 7f 00 	lds	r31, 0x007F
    16b6:	09 95       	icall
	}

}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	ff 91       	pop	r31
    16be:	ef 91       	pop	r30
    16c0:	bf 91       	pop	r27
    16c2:	af 91       	pop	r26
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	7f 91       	pop	r23
    16ca:	6f 91       	pop	r22
    16cc:	5f 91       	pop	r21
    16ce:	4f 91       	pop	r20
    16d0:	3f 91       	pop	r19
    16d2:	2f 91       	pop	r18
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	0f 90       	pop	r0
    16da:	1f 90       	pop	r1
    16dc:	18 95       	reti

000016de <Timer1_Init>:


Error_Status Timer1_Init(TIM1_ConfigType *TIM1_config)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <Timer1_Init+0x6>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <Timer1_Init+0x8>
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01

	switch(TIM1_config->mode)
    16ee:	e9 81       	ldd	r30, Y+1	; 0x01
    16f0:	fa 81       	ldd	r31, Y+2	; 0x02
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3c 83       	std	Y+4, r19	; 0x04
    16fa:	2b 83       	std	Y+3, r18	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	86 30       	cpi	r24, 0x06	; 6
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <Timer1_Init+0x2a>
    1706:	38 c1       	rjmp	.+624    	; 0x1978 <Timer1_Init+0x29a>
    1708:	2b 81       	ldd	r18, Y+3	; 0x03
    170a:	3c 81       	ldd	r19, Y+4	; 0x04
    170c:	27 30       	cpi	r18, 0x07	; 7
    170e:	31 05       	cpc	r19, r1
    1710:	24 f5       	brge	.+72     	; 0x175a <Timer1_Init+0x7c>
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <Timer1_Init+0x40>
    171c:	9c c0       	rjmp	.+312    	; 0x1856 <Timer1_Init+0x178>
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	23 30       	cpi	r18, 0x03	; 3
    1724:	31 05       	cpc	r19, r1
    1726:	64 f4       	brge	.+24     	; 0x1740 <Timer1_Init+0x62>
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <Timer1_Init+0x54>
    1730:	45 c0       	rjmp	.+138    	; 0x17bc <Timer1_Init+0xde>
    1732:	2b 81       	ldd	r18, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	21 30       	cpi	r18, 0x01	; 1
    1738:	31 05       	cpc	r19, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <Timer1_Init+0x60>
    173c:	6a c0       	rjmp	.+212    	; 0x1812 <Timer1_Init+0x134>
    173e:	34 c2       	rjmp	.+1128   	; 0x1ba8 <Timer1_Init+0x4ca>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <Timer1_Init+0x6e>
    174a:	c9 c0       	rjmp	.+402    	; 0x18de <Timer1_Init+0x200>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	25 30       	cpi	r18, 0x05	; 5
    1752:	31 05       	cpc	r19, r1
    1754:	0c f0       	brlt	.+2      	; 0x1758 <Timer1_Init+0x7a>
    1756:	ee c0       	rjmp	.+476    	; 0x1934 <Timer1_Init+0x256>
    1758:	a0 c0       	rjmp	.+320    	; 0x189a <Timer1_Init+0x1bc>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	9c 81       	ldd	r25, Y+4	; 0x04
    175e:	8b 30       	cpi	r24, 0x0B	; 11
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <Timer1_Init+0x88>
    1764:	91 c1       	rjmp	.+802    	; 0x1a88 <Timer1_Init+0x3aa>
    1766:	2b 81       	ldd	r18, Y+3	; 0x03
    1768:	3c 81       	ldd	r19, Y+4	; 0x04
    176a:	2c 30       	cpi	r18, 0x0C	; 12
    176c:	31 05       	cpc	r19, r1
    176e:	9c f4       	brge	.+38     	; 0x1796 <Timer1_Init+0xb8>
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	89 30       	cpi	r24, 0x09	; 9
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <Timer1_Init+0x9e>
    177a:	42 c1       	rjmp	.+644    	; 0x1a00 <Timer1_Init+0x322>
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	2a 30       	cpi	r18, 0x0A	; 10
    1782:	31 05       	cpc	r19, r1
    1784:	0c f0       	brlt	.+2      	; 0x1788 <Timer1_Init+0xaa>
    1786:	5e c1       	rjmp	.+700    	; 0x1a44 <Timer1_Init+0x366>
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	91 05       	cpc	r25, r1
    1790:	09 f4       	brne	.+2      	; 0x1794 <Timer1_Init+0xb6>
    1792:	14 c1       	rjmp	.+552    	; 0x19bc <Timer1_Init+0x2de>
    1794:	09 c2       	rjmp	.+1042   	; 0x1ba8 <Timer1_Init+0x4ca>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	2e 30       	cpi	r18, 0x0E	; 14
    179c:	31 05       	cpc	r19, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <Timer1_Init+0xc4>
    17a0:	c0 c1       	rjmp	.+896    	; 0x1b22 <Timer1_Init+0x444>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	8f 30       	cpi	r24, 0x0F	; 15
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <Timer1_Init+0xd0>
    17ac:	dc c1       	rjmp	.+952    	; 0x1b66 <Timer1_Init+0x488>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	2c 30       	cpi	r18, 0x0C	; 12
    17b4:	31 05       	cpc	r19, r1
    17b6:	09 f4       	brne	.+2      	; 0x17ba <Timer1_Init+0xdc>
    17b8:	89 c1       	rjmp	.+786    	; 0x1acc <Timer1_Init+0x3ee>
    17ba:	f6 c1       	rjmp	.+1004   	; 0x1ba8 <Timer1_Init+0x4ca>
	{
	case TIM1_NORMAL:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    17bc:	a6 e4       	ldi	r26, 0x46	; 70
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e6 e4       	ldi	r30, 0x46	; 70
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	81 85       	ldd	r24, Z+9	; 0x09
    17c6:	8e 7f       	andi	r24, 0xFE	; 254
    17c8:	19 96       	adiw	r26, 0x09	; 9
    17ca:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    17cc:	a6 e4       	ldi	r26, 0x46	; 70
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e6 e4       	ldi	r30, 0x46	; 70
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	81 85       	ldd	r24, Z+9	; 0x09
    17d6:	8d 7f       	andi	r24, 0xFD	; 253
    17d8:	19 96       	adiw	r26, 0x09	; 9
    17da:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    17dc:	a6 e4       	ldi	r26, 0x46	; 70
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e6 e4       	ldi	r30, 0x46	; 70
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	81 85       	ldd	r24, Z+9	; 0x09
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	19 96       	adiw	r26, 0x09	; 9
    17ea:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    17ec:	a6 e4       	ldi	r26, 0x46	; 70
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e6 e4       	ldi	r30, 0x46	; 70
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	81 85       	ldd	r24, Z+9	; 0x09
    17f6:	8f 7e       	andi	r24, 0xEF	; 239
    17f8:	19 96       	adiw	r26, 0x09	; 9
    17fa:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->reload;
    17fc:	a6 e4       	ldi	r26, 0x46	; 70
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	84 81       	ldd	r24, Z+4	; 0x04
    1806:	95 81       	ldd	r25, Z+5	; 0x05
    1808:	17 96       	adiw	r26, 0x07	; 7
    180a:	9c 93       	st	X, r25
    180c:	8e 93       	st	-X, r24
    180e:	16 97       	sbiw	r26, 0x06	; 6
    1810:	cb c1       	rjmp	.+918    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC8:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1812:	a6 e4       	ldi	r26, 0x46	; 70
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e6 e4       	ldi	r30, 0x46	; 70
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	81 85       	ldd	r24, Z+9	; 0x09
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	19 96       	adiw	r26, 0x09	; 9
    1820:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1822:	a6 e4       	ldi	r26, 0x46	; 70
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e6 e4       	ldi	r30, 0x46	; 70
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	81 85       	ldd	r24, Z+9	; 0x09
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	19 96       	adiw	r26, 0x09	; 9
    1830:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1832:	a6 e4       	ldi	r26, 0x46	; 70
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e6 e4       	ldi	r30, 0x46	; 70
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	81 85       	ldd	r24, Z+9	; 0x09
    183c:	87 7f       	andi	r24, 0xF7	; 247
    183e:	19 96       	adiw	r26, 0x09	; 9
    1840:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1842:	a6 e4       	ldi	r26, 0x46	; 70
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e6 e4       	ldi	r30, 0x46	; 70
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	81 85       	ldd	r24, Z+9	; 0x09
    184c:	8f 7e       	andi	r24, 0xEF	; 239
    184e:	19 96       	adiw	r26, 0x09	; 9
    1850:	8c 93       	st	X, r24
    1852:	19 97       	sbiw	r26, 0x09	; 9
    1854:	a9 c1       	rjmp	.+850    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC9:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1856:	a6 e4       	ldi	r26, 0x46	; 70
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e6 e4       	ldi	r30, 0x46	; 70
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	81 85       	ldd	r24, Z+9	; 0x09
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	19 96       	adiw	r26, 0x09	; 9
    1864:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1866:	a6 e4       	ldi	r26, 0x46	; 70
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e6 e4       	ldi	r30, 0x46	; 70
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	81 85       	ldd	r24, Z+9	; 0x09
    1870:	82 60       	ori	r24, 0x02	; 2
    1872:	19 96       	adiw	r26, 0x09	; 9
    1874:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1876:	a6 e4       	ldi	r26, 0x46	; 70
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e6 e4       	ldi	r30, 0x46	; 70
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	81 85       	ldd	r24, Z+9	; 0x09
    1880:	87 7f       	andi	r24, 0xF7	; 247
    1882:	19 96       	adiw	r26, 0x09	; 9
    1884:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1886:	a6 e4       	ldi	r26, 0x46	; 70
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e6 e4       	ldi	r30, 0x46	; 70
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	81 85       	ldd	r24, Z+9	; 0x09
    1890:	8f 7e       	andi	r24, 0xEF	; 239
    1892:	19 96       	adiw	r26, 0x09	; 9
    1894:	8c 93       	st	X, r24
    1896:	19 97       	sbiw	r26, 0x09	; 9
    1898:	87 c1       	rjmp	.+782    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC10:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    189a:	a6 e4       	ldi	r26, 0x46	; 70
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e6 e4       	ldi	r30, 0x46	; 70
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	81 85       	ldd	r24, Z+9	; 0x09
    18a4:	81 60       	ori	r24, 0x01	; 1
    18a6:	19 96       	adiw	r26, 0x09	; 9
    18a8:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    18aa:	a6 e4       	ldi	r26, 0x46	; 70
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e6 e4       	ldi	r30, 0x46	; 70
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	81 85       	ldd	r24, Z+9	; 0x09
    18b4:	82 60       	ori	r24, 0x02	; 2
    18b6:	19 96       	adiw	r26, 0x09	; 9
    18b8:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    18ba:	a6 e4       	ldi	r26, 0x46	; 70
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e6 e4       	ldi	r30, 0x46	; 70
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	81 85       	ldd	r24, Z+9	; 0x09
    18c4:	87 7f       	andi	r24, 0xF7	; 247
    18c6:	19 96       	adiw	r26, 0x09	; 9
    18c8:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    18ca:	a6 e4       	ldi	r26, 0x46	; 70
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e6 e4       	ldi	r30, 0x46	; 70
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	81 85       	ldd	r24, Z+9	; 0x09
    18d4:	8f 7e       	andi	r24, 0xEF	; 239
    18d6:	19 96       	adiw	r26, 0x09	; 9
    18d8:	8c 93       	st	X, r24
    18da:	19 97       	sbiw	r26, 0x09	; 9
    18dc:	65 c1       	rjmp	.+714    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_CTC_OCR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    18de:	a6 e4       	ldi	r26, 0x46	; 70
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e6 e4       	ldi	r30, 0x46	; 70
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	81 85       	ldd	r24, Z+9	; 0x09
    18e8:	8e 7f       	andi	r24, 0xFE	; 254
    18ea:	19 96       	adiw	r26, 0x09	; 9
    18ec:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    18ee:	a6 e4       	ldi	r26, 0x46	; 70
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e6 e4       	ldi	r30, 0x46	; 70
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	81 85       	ldd	r24, Z+9	; 0x09
    18f8:	8d 7f       	andi	r24, 0xFD	; 253
    18fa:	19 96       	adiw	r26, 0x09	; 9
    18fc:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    18fe:	a6 e4       	ldi	r26, 0x46	; 70
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e6 e4       	ldi	r30, 0x46	; 70
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	81 85       	ldd	r24, Z+9	; 0x09
    1908:	88 60       	ori	r24, 0x08	; 8
    190a:	19 96       	adiw	r26, 0x09	; 9
    190c:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    190e:	a6 e4       	ldi	r26, 0x46	; 70
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e6 e4       	ldi	r30, 0x46	; 70
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	81 85       	ldd	r24, Z+9	; 0x09
    1918:	8f 7e       	andi	r24, 0xEF	; 239
    191a:	19 96       	adiw	r26, 0x09	; 9
    191c:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->compare;
    191e:	a6 e4       	ldi	r26, 0x46	; 70
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e9 81       	ldd	r30, Y+1	; 0x01
    1924:	fa 81       	ldd	r31, Y+2	; 0x02
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	17 96       	adiw	r26, 0x07	; 7
    192c:	9c 93       	st	X, r25
    192e:	8e 93       	st	-X, r24
    1930:	16 97       	sbiw	r26, 0x06	; 6
    1932:	3a c1       	rjmp	.+628    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_8:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1934:	a6 e4       	ldi	r26, 0x46	; 70
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e6 e4       	ldi	r30, 0x46	; 70
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	81 85       	ldd	r24, Z+9	; 0x09
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	19 96       	adiw	r26, 0x09	; 9
    1942:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1944:	a6 e4       	ldi	r26, 0x46	; 70
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e4       	ldi	r30, 0x46	; 70
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	81 85       	ldd	r24, Z+9	; 0x09
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	19 96       	adiw	r26, 0x09	; 9
    1952:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1954:	a6 e4       	ldi	r26, 0x46	; 70
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e6 e4       	ldi	r30, 0x46	; 70
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	81 85       	ldd	r24, Z+9	; 0x09
    195e:	88 60       	ori	r24, 0x08	; 8
    1960:	19 96       	adiw	r26, 0x09	; 9
    1962:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1964:	a6 e4       	ldi	r26, 0x46	; 70
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e4       	ldi	r30, 0x46	; 70
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	81 85       	ldd	r24, Z+9	; 0x09
    196e:	8f 7e       	andi	r24, 0xEF	; 239
    1970:	19 96       	adiw	r26, 0x09	; 9
    1972:	8c 93       	st	X, r24
    1974:	19 97       	sbiw	r26, 0x09	; 9
    1976:	18 c1       	rjmp	.+560    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_9:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1978:	a6 e4       	ldi	r26, 0x46	; 70
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e6 e4       	ldi	r30, 0x46	; 70
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	81 85       	ldd	r24, Z+9	; 0x09
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	19 96       	adiw	r26, 0x09	; 9
    1986:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1988:	a6 e4       	ldi	r26, 0x46	; 70
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e6 e4       	ldi	r30, 0x46	; 70
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	81 85       	ldd	r24, Z+9	; 0x09
    1992:	82 60       	ori	r24, 0x02	; 2
    1994:	19 96       	adiw	r26, 0x09	; 9
    1996:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1998:	a6 e4       	ldi	r26, 0x46	; 70
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e4       	ldi	r30, 0x46	; 70
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	81 85       	ldd	r24, Z+9	; 0x09
    19a2:	88 60       	ori	r24, 0x08	; 8
    19a4:	19 96       	adiw	r26, 0x09	; 9
    19a6:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    19a8:	a6 e4       	ldi	r26, 0x46	; 70
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e4       	ldi	r30, 0x46	; 70
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	81 85       	ldd	r24, Z+9	; 0x09
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	19 96       	adiw	r26, 0x09	; 9
    19b6:	8c 93       	st	X, r24
    19b8:	19 97       	sbiw	r26, 0x09	; 9
    19ba:	f6 c0       	rjmp	.+492    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PFC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    19bc:	a6 e4       	ldi	r26, 0x46	; 70
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e6 e4       	ldi	r30, 0x46	; 70
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	81 85       	ldd	r24, Z+9	; 0x09
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	19 96       	adiw	r26, 0x09	; 9
    19ca:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    19cc:	a6 e4       	ldi	r26, 0x46	; 70
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e6 e4       	ldi	r30, 0x46	; 70
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	81 85       	ldd	r24, Z+9	; 0x09
    19d6:	8d 7f       	andi	r24, 0xFD	; 253
    19d8:	19 96       	adiw	r26, 0x09	; 9
    19da:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    19dc:	a6 e4       	ldi	r26, 0x46	; 70
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e6 e4       	ldi	r30, 0x46	; 70
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	81 85       	ldd	r24, Z+9	; 0x09
    19e6:	87 7f       	andi	r24, 0xF7	; 247
    19e8:	19 96       	adiw	r26, 0x09	; 9
    19ea:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    19ec:	a6 e4       	ldi	r26, 0x46	; 70
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e6 e4       	ldi	r30, 0x46	; 70
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	81 85       	ldd	r24, Z+9	; 0x09
    19f6:	80 61       	ori	r24, 0x10	; 16
    19f8:	19 96       	adiw	r26, 0x09	; 9
    19fa:	8c 93       	st	X, r24
    19fc:	19 97       	sbiw	r26, 0x09	; 9
    19fe:	d4 c0       	rjmp	.+424    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PFC_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1a00:	a6 e4       	ldi	r26, 0x46	; 70
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e6 e4       	ldi	r30, 0x46	; 70
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	81 85       	ldd	r24, Z+9	; 0x09
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	19 96       	adiw	r26, 0x09	; 9
    1a0e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1a10:	a6 e4       	ldi	r26, 0x46	; 70
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e6 e4       	ldi	r30, 0x46	; 70
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	81 85       	ldd	r24, Z+9	; 0x09
    1a1a:	8d 7f       	andi	r24, 0xFD	; 253
    1a1c:	19 96       	adiw	r26, 0x09	; 9
    1a1e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1a20:	a6 e4       	ldi	r26, 0x46	; 70
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e6 e4       	ldi	r30, 0x46	; 70
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	81 85       	ldd	r24, Z+9	; 0x09
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	19 96       	adiw	r26, 0x09	; 9
    1a2e:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1a30:	a6 e4       	ldi	r26, 0x46	; 70
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e6 e4       	ldi	r30, 0x46	; 70
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	81 85       	ldd	r24, Z+9	; 0x09
    1a3a:	80 61       	ori	r24, 0x10	; 16
    1a3c:	19 96       	adiw	r26, 0x09	; 9
    1a3e:	8c 93       	st	X, r24
    1a40:	19 97       	sbiw	r26, 0x09	; 9
    1a42:	b2 c0       	rjmp	.+356    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1a44:	a6 e4       	ldi	r26, 0x46	; 70
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e6 e4       	ldi	r30, 0x46	; 70
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	81 85       	ldd	r24, Z+9	; 0x09
    1a4e:	8e 7f       	andi	r24, 0xFE	; 254
    1a50:	19 96       	adiw	r26, 0x09	; 9
    1a52:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1a54:	a6 e4       	ldi	r26, 0x46	; 70
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e6 e4       	ldi	r30, 0x46	; 70
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	81 85       	ldd	r24, Z+9	; 0x09
    1a5e:	82 60       	ori	r24, 0x02	; 2
    1a60:	19 96       	adiw	r26, 0x09	; 9
    1a62:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1a64:	a6 e4       	ldi	r26, 0x46	; 70
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e6 e4       	ldi	r30, 0x46	; 70
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	81 85       	ldd	r24, Z+9	; 0x09
    1a6e:	87 7f       	andi	r24, 0xF7	; 247
    1a70:	19 96       	adiw	r26, 0x09	; 9
    1a72:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1a74:	a6 e4       	ldi	r26, 0x46	; 70
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e6 e4       	ldi	r30, 0x46	; 70
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	81 85       	ldd	r24, Z+9	; 0x09
    1a7e:	80 61       	ori	r24, 0x10	; 16
    1a80:	19 96       	adiw	r26, 0x09	; 9
    1a82:	8c 93       	st	X, r24
    1a84:	19 97       	sbiw	r26, 0x09	; 9
    1a86:	90 c0       	rjmp	.+288    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1a88:	a6 e4       	ldi	r26, 0x46	; 70
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e6 e4       	ldi	r30, 0x46	; 70
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	81 85       	ldd	r24, Z+9	; 0x09
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	19 96       	adiw	r26, 0x09	; 9
    1a96:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1a98:	a6 e4       	ldi	r26, 0x46	; 70
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e6 e4       	ldi	r30, 0x46	; 70
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	81 85       	ldd	r24, Z+9	; 0x09
    1aa2:	82 60       	ori	r24, 0x02	; 2
    1aa4:	19 96       	adiw	r26, 0x09	; 9
    1aa6:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1aa8:	a6 e4       	ldi	r26, 0x46	; 70
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e6 e4       	ldi	r30, 0x46	; 70
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	81 85       	ldd	r24, Z+9	; 0x09
    1ab2:	87 7f       	andi	r24, 0xF7	; 247
    1ab4:	19 96       	adiw	r26, 0x09	; 9
    1ab6:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1ab8:	a6 e4       	ldi	r26, 0x46	; 70
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e6 e4       	ldi	r30, 0x46	; 70
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	81 85       	ldd	r24, Z+9	; 0x09
    1ac2:	80 61       	ori	r24, 0x10	; 16
    1ac4:	19 96       	adiw	r26, 0x09	; 9
    1ac6:	8c 93       	st	X, r24
    1ac8:	19 97       	sbiw	r26, 0x09	; 9
    1aca:	6e c0       	rjmp	.+220    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_CTC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1acc:	a6 e4       	ldi	r26, 0x46	; 70
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e6 e4       	ldi	r30, 0x46	; 70
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	81 85       	ldd	r24, Z+9	; 0x09
    1ad6:	8e 7f       	andi	r24, 0xFE	; 254
    1ad8:	19 96       	adiw	r26, 0x09	; 9
    1ada:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1adc:	a6 e4       	ldi	r26, 0x46	; 70
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e6 e4       	ldi	r30, 0x46	; 70
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	81 85       	ldd	r24, Z+9	; 0x09
    1ae6:	8d 7f       	andi	r24, 0xFD	; 253
    1ae8:	19 96       	adiw	r26, 0x09	; 9
    1aea:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1aec:	a6 e4       	ldi	r26, 0x46	; 70
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e6 e4       	ldi	r30, 0x46	; 70
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	81 85       	ldd	r24, Z+9	; 0x09
    1af6:	88 60       	ori	r24, 0x08	; 8
    1af8:	19 96       	adiw	r26, 0x09	; 9
    1afa:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1afc:	a6 e4       	ldi	r26, 0x46	; 70
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e6 e4       	ldi	r30, 0x46	; 70
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	81 85       	ldd	r24, Z+9	; 0x09
    1b06:	80 61       	ori	r24, 0x10	; 16
    1b08:	19 96       	adiw	r26, 0x09	; 9
    1b0a:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->compare;
    1b0c:	a6 e4       	ldi	r26, 0x46	; 70
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	17 96       	adiw	r26, 0x07	; 7
    1b1a:	9c 93       	st	X, r25
    1b1c:	8e 93       	st	-X, r24
    1b1e:	16 97       	sbiw	r26, 0x06	; 6
    1b20:	43 c0       	rjmp	.+134    	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1b22:	a6 e4       	ldi	r26, 0x46	; 70
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e6 e4       	ldi	r30, 0x46	; 70
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	81 85       	ldd	r24, Z+9	; 0x09
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	19 96       	adiw	r26, 0x09	; 9
    1b30:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1b32:	a6 e4       	ldi	r26, 0x46	; 70
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e6 e4       	ldi	r30, 0x46	; 70
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	81 85       	ldd	r24, Z+9	; 0x09
    1b3c:	82 60       	ori	r24, 0x02	; 2
    1b3e:	19 96       	adiw	r26, 0x09	; 9
    1b40:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1b42:	a6 e4       	ldi	r26, 0x46	; 70
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e6 e4       	ldi	r30, 0x46	; 70
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	81 85       	ldd	r24, Z+9	; 0x09
    1b4c:	88 60       	ori	r24, 0x08	; 8
    1b4e:	19 96       	adiw	r26, 0x09	; 9
    1b50:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1b52:	a6 e4       	ldi	r26, 0x46	; 70
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e6 e4       	ldi	r30, 0x46	; 70
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	81 85       	ldd	r24, Z+9	; 0x09
    1b5c:	80 61       	ori	r24, 0x10	; 16
    1b5e:	19 96       	adiw	r26, 0x09	; 9
    1b60:	8c 93       	st	X, r24
    1b62:	19 97       	sbiw	r26, 0x09	; 9
    1b64:	21 c0       	rjmp	.+66     	; 0x1ba8 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1b66:	a6 e4       	ldi	r26, 0x46	; 70
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e6 e4       	ldi	r30, 0x46	; 70
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	81 85       	ldd	r24, Z+9	; 0x09
    1b70:	81 60       	ori	r24, 0x01	; 1
    1b72:	19 96       	adiw	r26, 0x09	; 9
    1b74:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1b76:	a6 e4       	ldi	r26, 0x46	; 70
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e6 e4       	ldi	r30, 0x46	; 70
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	81 85       	ldd	r24, Z+9	; 0x09
    1b80:	82 60       	ori	r24, 0x02	; 2
    1b82:	19 96       	adiw	r26, 0x09	; 9
    1b84:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1b86:	a6 e4       	ldi	r26, 0x46	; 70
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e6 e4       	ldi	r30, 0x46	; 70
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	81 85       	ldd	r24, Z+9	; 0x09
    1b90:	88 60       	ori	r24, 0x08	; 8
    1b92:	19 96       	adiw	r26, 0x09	; 9
    1b94:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1b96:	a6 e4       	ldi	r26, 0x46	; 70
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e6 e4       	ldi	r30, 0x46	; 70
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	81 85       	ldd	r24, Z+9	; 0x09
    1ba0:	80 61       	ori	r24, 0x10	; 16
    1ba2:	19 96       	adiw	r26, 0x09	; 9
    1ba4:	8c 93       	st	X, r24
    1ba6:	19 97       	sbiw	r26, 0x09	; 9
		break;
	}

	if(TIM1_config->channel == Channel_A)
    1ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    1baa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bac:	87 81       	ldd	r24, Z+7	; 0x07
    1bae:	88 23       	and	r24, r24
    1bb0:	d1 f4       	brne	.+52     	; 0x1be6 <Timer1_Init+0x508>
	{
		TIM1_BASE->TCCR1A_t.Reg = ((TIM1_BASE->TCCR1A_t.Reg & 0x3F) | TIM1_config->COM << COM1A0);
    1bb2:	a6 e4       	ldi	r26, 0x46	; 70
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e6 e4       	ldi	r30, 0x46	; 70
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	81 85       	ldd	r24, Z+9	; 0x09
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	2f 73       	andi	r18, 0x3F	; 63
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	81 81       	ldd	r24, Z+1	; 0x01
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	00 24       	eor	r0, r0
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	07 94       	ror	r0
    1bd2:	96 95       	lsr	r25
    1bd4:	87 95       	ror	r24
    1bd6:	07 94       	ror	r0
    1bd8:	98 2f       	mov	r25, r24
    1bda:	80 2d       	mov	r24, r0
    1bdc:	82 2b       	or	r24, r18
    1bde:	19 96       	adiw	r26, 0x09	; 9
    1be0:	8c 93       	st	X, r24
    1be2:	19 97       	sbiw	r26, 0x09	; 9
    1be4:	15 c0       	rjmp	.+42     	; 0x1c10 <Timer1_Init+0x532>
	}
	else
	{
		TIM1_BASE->TCCR1A_t.Reg = ((TIM1_BASE->TCCR1A_t.Reg & 0xCF) | TIM1_config->COM << COM1B0);
    1be6:	a6 e4       	ldi	r26, 0x46	; 70
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e6 e4       	ldi	r30, 0x46	; 70
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	81 85       	ldd	r24, Z+9	; 0x09
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	2f 7c       	andi	r18, 0xCF	; 207
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	82 95       	swap	r24
    1c00:	92 95       	swap	r25
    1c02:	90 7f       	andi	r25, 0xF0	; 240
    1c04:	98 27       	eor	r25, r24
    1c06:	80 7f       	andi	r24, 0xF0	; 240
    1c08:	98 27       	eor	r25, r24
    1c0a:	82 2b       	or	r24, r18
    1c0c:	19 96       	adiw	r26, 0x09	; 9
    1c0e:	8c 93       	st	X, r24
	}
	TIM1_BASE->TCCR1B_t.Reg = ((TIM1_BASE->TCCR1B_t.Reg & 0xF8) | TIM1_config->prescalar);
    1c10:	a6 e4       	ldi	r26, 0x46	; 70
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e6 e4       	ldi	r30, 0x46	; 70
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 85       	ldd	r24, Z+8	; 0x08
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	98 7f       	andi	r25, 0xF8	; 248
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	86 81       	ldd	r24, Z+6	; 0x06
    1c24:	89 2b       	or	r24, r25
    1c26:	18 96       	adiw	r26, 0x08	; 8
    1c28:	8c 93       	st	X, r24
    1c2a:	18 97       	sbiw	r26, 0x08	; 8

	return NO_ERROR;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <Timer1_EnableInt>:


void Timer1_EnableInt(TIM1_ConfigType *TIM1_config,void(*Ptr2Func)(void))
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <Timer1_EnableInt+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Timer1_EnableInt+0x8>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Timer1_EnableInt+0xa>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	7c 83       	std	Y+4, r23	; 0x04
    1c50:	6b 83       	std	Y+3, r22	; 0x03
	SREG &=  ~(1<<7);
    1c52:	af e5       	ldi	r26, 0x5F	; 95
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	ef e5       	ldi	r30, 0x5F	; 95
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8f 77       	andi	r24, 0x7F	; 127
    1c5e:	8c 93       	st	X, r24
	switch(TIM1_config->mode)
    1c60:	e9 81       	ldd	r30, Y+1	; 0x01
    1c62:	fa 81       	ldd	r31, Y+2	; 0x02
    1c64:	80 81       	ld	r24, Z
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3e 83       	std	Y+6, r19	; 0x06
    1c6c:	2d 83       	std	Y+5, r18	; 0x05
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	91 05       	cpc	r25, r1
    1c76:	31 f1       	breq	.+76     	; 0x1cc4 <Timer1_EnableInt+0x88>
    1c78:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c7c:	2c 30       	cpi	r18, 0x0C	; 12
    1c7e:	31 05       	cpc	r19, r1
    1c80:	61 f0       	breq	.+24     	; 0x1c9a <Timer1_EnableInt+0x5e>
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	89 f5       	brne	.+98     	; 0x1cec <Timer1_EnableInt+0xb0>
	{
	case TIM1_NORMAL:
		SET_BIT(TIMSK,TOIE1);
    1c8a:	a9 e5       	ldi	r26, 0x59	; 89
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 e5       	ldi	r30, 0x59	; 89
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	84 60       	ori	r24, 0x04	; 4
    1c96:	8c 93       	st	X, r24
    1c98:	29 c0       	rjmp	.+82     	; 0x1cec <Timer1_EnableInt+0xb0>
		break;
	case TIM1_CTC_ICR:
		if(TIM1_config->channel == Channel_A)
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	87 81       	ldd	r24, Z+7	; 0x07
    1ca0:	88 23       	and	r24, r24
    1ca2:	41 f4       	brne	.+16     	; 0x1cb4 <Timer1_EnableInt+0x78>
		{
			SET_BIT(TIMSK,OCIE1A);
    1ca4:	a9 e5       	ldi	r26, 0x59	; 89
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 e5       	ldi	r30, 0x59	; 89
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 61       	ori	r24, 0x10	; 16
    1cb0:	8c 93       	st	X, r24
    1cb2:	1c c0       	rjmp	.+56     	; 0x1cec <Timer1_EnableInt+0xb0>
		}
		else
		{
			SET_BIT(TIMSK,OCIE1B);
    1cb4:	a9 e5       	ldi	r26, 0x59	; 89
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 e5       	ldi	r30, 0x59	; 89
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	8c 93       	st	X, r24
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <Timer1_EnableInt+0xb0>
		}
		break;
	case TIM1_CTC_OCR:
		if(TIM1_config->channel == Channel_A)
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	87 81       	ldd	r24, Z+7	; 0x07
    1cca:	88 23       	and	r24, r24
    1ccc:	41 f4       	brne	.+16     	; 0x1cde <Timer1_EnableInt+0xa2>
		{
			SET_BIT(TIMSK,OCIE1A);
    1cce:	a9 e5       	ldi	r26, 0x59	; 89
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e9 e5       	ldi	r30, 0x59	; 89
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 61       	ori	r24, 0x10	; 16
    1cda:	8c 93       	st	X, r24
    1cdc:	07 c0       	rjmp	.+14     	; 0x1cec <Timer1_EnableInt+0xb0>
		}
		else
		{
			SET_BIT(TIMSK,OCIE1B);
    1cde:	a9 e5       	ldi	r26, 0x59	; 89
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e9 e5       	ldi	r30, 0x59	; 89
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	88 60       	ori	r24, 0x08	; 8
    1cea:	8c 93       	st	X, r24
		}
		break;
	}
	TIM1_SetCallBack(*Ptr2Func);
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	0e 94 23 0b 	call	0x1646	; 0x1646 <TIM1_SetCallBack>
	SREG |= (1<<7);
    1cf4:	af e5       	ldi	r26, 0x5F	; 95
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	ef e5       	ldi	r30, 0x5F	; 95
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 68       	ori	r24, 0x80	; 128
    1d00:	8c 93       	st	X, r24
}
    1d02:	26 96       	adiw	r28, 0x06	; 6
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <H_LCD_void_Init>:
#include "INC/LCD.h"
#include "util/delay.h"


void H_LCD_void_Init(void)
{
    1d14:	0f 93       	push	r16
    1d16:	1f 93       	push	r17
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	c4 55       	subi	r28, 0x54	; 84
    1d22:	d0 40       	sbci	r29, 0x00	; 0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1d2e:	89 e3       	ldi	r24, 0x39	; 57
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	63 e0       	ldi	r22, 0x03	; 3
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1d3a:	89 e3       	ldi	r24, 0x39	; 57
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN0,OUTPUT);
    1d46:	86 e3       	ldi	r24, 0x36	; 54
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN1,OUTPUT);
    1d52:	86 e3       	ldi	r24, 0x36	; 54
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN2,OUTPUT);
    1d5e:	86 e3       	ldi	r24, 0x36	; 54
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN4,OUTPUT);
    1d6a:	86 e3       	ldi	r24, 0x36	; 54
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
    1d76:	fe 01       	movw	r30, r28
    1d78:	ef 5a       	subi	r30, 0xAF	; 175
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	a0 ef       	ldi	r26, 0xF0	; 240
    1d82:	b1 e4       	ldi	r27, 0x41	; 65
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	03 5b       	subi	r16, 0xB3	; 179
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	fe 01       	movw	r30, r28
    1d94:	ef 5a       	subi	r30, 0xAF	; 175
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	60 81       	ld	r22, Z
    1d9a:	71 81       	ldd	r23, Z+1	; 0x01
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a e7       	ldi	r20, 0x7A	; 122
    1da6:	55 e4       	ldi	r21, 0x45	; 69
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	f8 01       	movw	r30, r16
    1db2:	80 83       	st	Z, r24
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	a2 83       	std	Z+2, r26	; 0x02
    1db8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e3 5b       	subi	r30, 0xB3	; 179
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	44 f4       	brge	.+16     	; 0x1de8 <H_LCD_void_Init+0xd4>
		__ticks = 1;
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e5 5b       	subi	r30, 0xB5	; 181
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	80 83       	st	Z, r24
    1de6:	64 c0       	rjmp	.+200    	; 0x1eb0 <H_LCD_void_Init+0x19c>
	else if (__tmp > 65535)
    1de8:	fe 01       	movw	r30, r28
    1dea:	e3 5b       	subi	r30, 0xB3	; 179
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <H_LCD_void_Init+0xf4>
    1e06:	43 c0       	rjmp	.+134    	; 0x1e8e <H_LCD_void_Init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ef 5a       	subi	r30, 0xAF	; 175
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	8e 01       	movw	r16, r28
    1e28:	05 5b       	subi	r16, 0xB5	; 181
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	1f c0       	rjmp	.+62     	; 0x1e7e <H_LCD_void_Init+0x16a>
    1e40:	fe 01       	movw	r30, r28
    1e42:	e7 5b       	subi	r30, 0xB7	; 183
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 e9       	ldi	r24, 0x90	; 144
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e7 5b       	subi	r30, 0xB7	; 183
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <H_LCD_void_Init+0x144>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e7 5b       	subi	r30, 0xB7	; 183
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	de 01       	movw	r26, r28
    1e68:	a5 5b       	subi	r26, 0xB5	; 181
    1e6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e5 5b       	subi	r30, 0xB5	; 181
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	11 96       	adiw	r26, 0x01	; 1
    1e7a:	9c 93       	st	X, r25
    1e7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e7e:	fe 01       	movw	r30, r28
    1e80:	e5 5b       	subi	r30, 0xB5	; 181
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	91 81       	ldd	r25, Z+1	; 0x01
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	d1 f6       	brne	.-76     	; 0x1e40 <H_LCD_void_Init+0x12c>
    1e8c:	27 c0       	rjmp	.+78     	; 0x1edc <H_LCD_void_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	05 5b       	subi	r16, 0xB5	; 181
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	e3 5b       	subi	r30, 0xB3	; 179
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	de 01       	movw	r26, r28
    1eb2:	a9 5b       	subi	r26, 0xB9	; 185
    1eb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e5 5b       	subi	r30, 0xB5	; 181
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	8d 93       	st	X+, r24
    1ec2:	9c 93       	st	X, r25
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e9 5b       	subi	r30, 0xB9	; 185
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <H_LCD_void_Init+0x1ba>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e9 5b       	subi	r30, 0xB9	; 185
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
	_delay_ms(30);

	/********************* function set command ***********************/

#if(LCD_DATA_BIT_MODE == 4)
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1edc:	89 e3       	ldi	r24, 0x39	; 57
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN0,LOGIC_LOW);
    1ee8:	86 e3       	ldi	r24, 0x36	; 54
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN1,LOGIC_HIGH);
    1ef4:	86 e3       	ldi	r24, 0x36	; 54
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN2,LOGIC_LOW);
    1f00:	86 e3       	ldi	r24, 0x36	; 54
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN4,LOGIC_LOW);
    1f0c:	86 e3       	ldi	r24, 0x36	; 54
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	64 e0       	ldi	r22, 0x04	; 4
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 5b       	subi	r30, 0xBD	; 189
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	80 83       	st	Z, r24
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	a2 83       	std	Z+2, r26	; 0x02
    1f2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	8e 01       	movw	r16, r28
    1f30:	01 5c       	subi	r16, 0xC1	; 193
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	fe 01       	movw	r30, r28
    1f36:	ed 5b       	subi	r30, 0xBD	; 189
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	55 e4       	ldi	r21, 0x45	; 69
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 83       	st	Z, r24
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	a2 83       	std	Z+2, r26	; 0x02
    1f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ff 96       	adiw	r30, 0x3f	; 63
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e af       	std	Y+62, r25	; 0x3e
    1f7e:	8d af       	std	Y+61, r24	; 0x3d
    1f80:	46 c0       	rjmp	.+140    	; 0x200e <H_LCD_void_Init+0x2fa>
	else if (__tmp > 65535)
    1f82:	fe 01       	movw	r30, r28
    1f84:	ff 96       	adiw	r30, 0x3f	; 63
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	64 f5       	brge	.+88     	; 0x1ff6 <H_LCD_void_Init+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ed 5b       	subi	r30, 0xBD	; 189
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e af       	std	Y+62, r25	; 0x3e
    1fca:	8d af       	std	Y+61, r24	; 0x3d
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <H_LCD_void_Init+0x2d8>
    1fce:	80 e9       	ldi	r24, 0x90	; 144
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	9c af       	std	Y+60, r25	; 0x3c
    1fd4:	8b af       	std	Y+59, r24	; 0x3b
    1fd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <H_LCD_void_Init+0x2c6>
    1fde:	9c af       	std	Y+60, r25	; 0x3c
    1fe0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e af       	std	Y+62, r25	; 0x3e
    1fea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <H_LCD_void_Init+0x2ba>
    1ff4:	16 c0       	rjmp	.+44     	; 0x2022 <H_LCD_void_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ff 96       	adiw	r30, 0x3f	; 63
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e af       	std	Y+62, r25	; 0x3e
    200c:	8d af       	std	Y+61, r24	; 0x3d
    200e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2010:	9e ad       	ldd	r25, Y+62	; 0x3e
    2012:	9a af       	std	Y+58, r25	; 0x3a
    2014:	89 af       	std	Y+57, r24	; 0x39
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	9a ad       	ldd	r25, Y+58	; 0x3a
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <H_LCD_void_Init+0x306>
    201e:	9a af       	std	Y+58, r25	; 0x3a
    2020:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2022:	88 e2       	ldi	r24, 0x28	; 40
    2024:	0e 94 13 15 	call	0x2a26	; 0x2a26 <H_LCD_void_sendCommand>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	8d ab       	std	Y+53, r24	; 0x35
    2032:	9e ab       	std	Y+54, r25	; 0x36
    2034:	af ab       	std	Y+55, r26	; 0x37
    2036:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	55 e4       	ldi	r21, 0x45	; 69
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	89 ab       	std	Y+49, r24	; 0x31
    2052:	9a ab       	std	Y+50, r25	; 0x32
    2054:	ab ab       	std	Y+51, r26	; 0x33
    2056:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <H_LCD_void_Init+0x366>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	98 ab       	std	Y+48, r25	; 0x30
    2076:	8f a7       	std	Y+47, r24	; 0x2f
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <H_LCD_void_Init+0x3e4>
	else if (__tmp > 65535)
    207a:	69 a9       	ldd	r22, Y+49	; 0x31
    207c:	7a a9       	ldd	r23, Y+50	; 0x32
    207e:	8b a9       	ldd	r24, Y+51	; 0x33
    2080:	9c a9       	ldd	r25, Y+52	; 0x34
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <H_LCD_void_Init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6d a9       	ldd	r22, Y+53	; 0x35
    2094:	7e a9       	ldd	r23, Y+54	; 0x36
    2096:	8f a9       	ldd	r24, Y+55	; 0x37
    2098:	98 ad       	ldd	r25, Y+56	; 0x38
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <H_LCD_void_Init+0x3c6>
    20bc:	80 e9       	ldi	r24, 0x90	; 144
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	9e a7       	std	Y+46, r25	; 0x2e
    20c2:	8d a7       	std	Y+45, r24	; 0x2d
    20c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <H_LCD_void_Init+0x3b4>
    20cc:	9e a7       	std	Y+46, r25	; 0x2e
    20ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d2:	98 a9       	ldd	r25, Y+48	; 0x30
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8f a5       	ldd	r24, Y+47	; 0x2f
    20dc:	98 a9       	ldd	r25, Y+48	; 0x30
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <H_LCD_void_Init+0x3a8>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <H_LCD_void_Init+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	69 a9       	ldd	r22, Y+49	; 0x31
    20e6:	7a a9       	ldd	r23, Y+50	; 0x32
    20e8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ea:	9c a9       	ldd	r25, Y+52	; 0x34
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	98 ab       	std	Y+48, r25	; 0x30
    20f6:	8f a7       	std	Y+47, r24	; 0x2f
    20f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fa:	98 a9       	ldd	r25, Y+48	; 0x30
    20fc:	9c a7       	std	Y+44, r25	; 0x2c
    20fe:	8b a7       	std	Y+43, r24	; 0x2b
    2100:	8b a5       	ldd	r24, Y+43	; 0x2b
    2102:	9c a5       	ldd	r25, Y+44	; 0x2c
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <H_LCD_void_Init+0x3f0>
    2108:	9c a7       	std	Y+44, r25	; 0x2c
    210a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CURSOR_OFF);
    210c:	8c e0       	ldi	r24, 0x0C	; 12
    210e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <H_LCD_void_sendCommand>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8f a3       	std	Y+39, r24	; 0x27
    211c:	98 a7       	std	Y+40, r25	; 0x28
    211e:	a9 a7       	std	Y+41, r26	; 0x29
    2120:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6f a1       	ldd	r22, Y+39	; 0x27
    2124:	78 a5       	ldd	r23, Y+40	; 0x28
    2126:	89 a5       	ldd	r24, Y+41	; 0x29
    2128:	9a a5       	ldd	r25, Y+42	; 0x2a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8b a3       	std	Y+35, r24	; 0x23
    213c:	9c a3       	std	Y+36, r25	; 0x24
    213e:	ad a3       	std	Y+37, r26	; 0x25
    2140:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2142:	6b a1       	ldd	r22, Y+35	; 0x23
    2144:	7c a1       	ldd	r23, Y+36	; 0x24
    2146:	8d a1       	ldd	r24, Y+37	; 0x25
    2148:	9e a1       	ldd	r25, Y+38	; 0x26
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <H_LCD_void_Init+0x450>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a a3       	std	Y+34, r25	; 0x22
    2160:	89 a3       	std	Y+33, r24	; 0x21
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <H_LCD_void_Init+0x4ce>
	else if (__tmp > 65535)
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	8d a1       	ldd	r24, Y+37	; 0x25
    216a:	9e a1       	ldd	r25, Y+38	; 0x26
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <H_LCD_void_Init+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6f a1       	ldd	r22, Y+39	; 0x27
    217e:	78 a5       	ldd	r23, Y+40	; 0x28
    2180:	89 a5       	ldd	r24, Y+41	; 0x29
    2182:	9a a5       	ldd	r25, Y+42	; 0x2a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <H_LCD_void_Init+0x4b0>
    21a6:	80 e9       	ldi	r24, 0x90	; 144
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	98 a3       	std	Y+32, r25	; 0x20
    21ac:	8f 8f       	std	Y+31, r24	; 0x1f
    21ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b0:	98 a1       	ldd	r25, Y+32	; 0x20
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <H_LCD_void_Init+0x49e>
    21b6:	98 a3       	std	Y+32, r25	; 0x20
    21b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	89 a1       	ldd	r24, Y+33	; 0x21
    21bc:	9a a1       	ldd	r25, Y+34	; 0x22
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9a a3       	std	Y+34, r25	; 0x22
    21c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	89 a1       	ldd	r24, Y+33	; 0x21
    21c6:	9a a1       	ldd	r25, Y+34	; 0x22
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <H_LCD_void_Init+0x492>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <H_LCD_void_Init+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6b a1       	ldd	r22, Y+35	; 0x23
    21d0:	7c a1       	ldd	r23, Y+36	; 0x24
    21d2:	8d a1       	ldd	r24, Y+37	; 0x25
    21d4:	9e a1       	ldd	r25, Y+38	; 0x26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9a a3       	std	Y+34, r25	; 0x22
    21e0:	89 a3       	std	Y+33, r24	; 0x21
    21e2:	89 a1       	ldd	r24, Y+33	; 0x21
    21e4:	9a a1       	ldd	r25, Y+34	; 0x22
    21e6:	9e 8f       	std	Y+30, r25	; 0x1e
    21e8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <H_LCD_void_Init+0x4da>
    21f2:	9e 8f       	std	Y+30, r25	; 0x1e
    21f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <H_LCD_void_sendCommand>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e8       	ldi	r26, 0x80	; 128
    2202:	bf e3       	ldi	r27, 0x3F	; 63
    2204:	89 8f       	std	Y+25, r24	; 0x19
    2206:	9a 8f       	std	Y+26, r25	; 0x1a
    2208:	ab 8f       	std	Y+27, r26	; 0x1b
    220a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220c:	69 8d       	ldd	r22, Y+25	; 0x19
    220e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2210:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2212:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a e7       	ldi	r20, 0x7A	; 122
    221a:	55 e4       	ldi	r21, 0x45	; 69
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8d 8b       	std	Y+21, r24	; 0x15
    2226:	9e 8b       	std	Y+22, r25	; 0x16
    2228:	af 8b       	std	Y+23, r26	; 0x17
    222a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    222c:	6d 89       	ldd	r22, Y+21	; 0x15
    222e:	7e 89       	ldd	r23, Y+22	; 0x16
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <H_LCD_void_Init+0x53a>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <H_LCD_void_Init+0x5b8>
	else if (__tmp > 65535)
    224e:	6d 89       	ldd	r22, Y+21	; 0x15
    2250:	7e 89       	ldd	r23, Y+22	; 0x16
    2252:	8f 89       	ldd	r24, Y+23	; 0x17
    2254:	98 8d       	ldd	r25, Y+24	; 0x18
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	4c f5       	brge	.+82     	; 0x22b8 <H_LCD_void_Init+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	69 8d       	ldd	r22, Y+25	; 0x19
    2268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <H_LCD_void_Init+0x59a>
    2290:	80 e9       	ldi	r24, 0x90	; 144
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	9a 8b       	std	Y+18, r25	; 0x12
    2296:	89 8b       	std	Y+17, r24	; 0x11
    2298:	89 89       	ldd	r24, Y+17	; 0x11
    229a:	9a 89       	ldd	r25, Y+18	; 0x12
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <H_LCD_void_Init+0x588>
    22a0:	9a 8b       	std	Y+18, r25	; 0x12
    22a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	8b 89       	ldd	r24, Y+19	; 0x13
    22a6:	9c 89       	ldd	r25, Y+20	; 0x14
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	8b 89       	ldd	r24, Y+19	; 0x13
    22b0:	9c 89       	ldd	r25, Y+20	; 0x14
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	69 f7       	brne	.-38     	; 0x2290 <H_LCD_void_Init+0x57c>
    22b6:	14 c0       	rjmp	.+40     	; 0x22e0 <H_LCD_void_Init+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ba:	7e 89       	ldd	r23, Y+22	; 0x16
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	98 8d       	ldd	r25, Y+24	; 0x18
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	8b 89       	ldd	r24, Y+19	; 0x13
    22ce:	9c 89       	ldd	r25, Y+20	; 0x14
    22d0:	98 8b       	std	Y+16, r25	; 0x10
    22d2:	8f 87       	std	Y+15, r24	; 0x0f
    22d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d6:	98 89       	ldd	r25, Y+16	; 0x10
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <H_LCD_void_Init+0x5c4>
    22dc:	98 8b       	std	Y+16, r25	; 0x10
    22de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <H_LCD_void_sendCommand>
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	8b 87       	std	Y+11, r24	; 0x0b
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	ad 87       	std	Y+13, r26	; 0x0d
    22f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a e7       	ldi	r20, 0x7A	; 122
    2304:	55 e4       	ldi	r21, 0x45	; 69
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8f 83       	std	Y+7, r24	; 0x07
    2310:	98 87       	std	Y+8, r25	; 0x08
    2312:	a9 87       	std	Y+9, r26	; 0x09
    2314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <H_LCD_void_Init+0x624>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <H_LCD_void_Init+0x6a2>
	else if (__tmp > 65535)
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <H_LCD_void_Init+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <H_LCD_void_Init+0x684>
    237a:	80 e9       	ldi	r24, 0x90	; 144
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <H_LCD_void_Init+0x672>
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <H_LCD_void_Init+0x666>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <H_LCD_void_Init+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	8d 81       	ldd	r24, Y+5	; 0x05
    23b8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <H_LCD_void_Init+0x6ae>
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01

#else if(LCD_DATA_BIT_MODE == 8)
	DIO_voidSetPortDirection(LCD_DATA_PORT_ID,LOGIC_HIGH);
#endif

}
    23ca:	cc 5a       	subi	r28, 0xAC	; 172
    23cc:	df 4f       	sbci	r29, 0xFF	; 255
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(uint8 copy_u8Byte)
{
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c7 54       	subi	r28, 0x47	; 71
    23f0:	d0 40       	sbci	r29, 0x00	; 0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	fe 01       	movw	r30, r28
    23fe:	e9 5b       	subi	r30, 0xB9	; 185
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 83       	st	Z, r24
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    2404:	89 e3       	ldi	r24, 0x39	; 57
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	62 e0       	ldi	r22, 0x02	; 2
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2410:	fe 01       	movw	r30, r28
    2412:	ed 5b       	subi	r30, 0xBD	; 189
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e8       	ldi	r26, 0x80	; 128
    241c:	bf e3       	ldi	r27, 0x3F	; 63
    241e:	80 83       	st	Z, r24
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	a2 83       	std	Z+2, r26	; 0x02
    2424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	8e 01       	movw	r16, r28
    2428:	01 5c       	subi	r16, 0xC1	; 193
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	ed 5b       	subi	r30, 0xBD	; 189
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	55 e4       	ldi	r21, 0x45	; 69
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	80 83       	st	Z, r24
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	a2 83       	std	Z+2, r26	; 0x02
    2452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2454:	fe 01       	movw	r30, r28
    2456:	ff 96       	adiw	r30, 0x3f	; 63
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	2c f4       	brge	.+10     	; 0x247a <H_LCD_void_latchByte+0x98>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9e af       	std	Y+62, r25	; 0x3e
    2476:	8d af       	std	Y+61, r24	; 0x3d
    2478:	46 c0       	rjmp	.+140    	; 0x2506 <H_LCD_void_latchByte+0x124>
	else if (__tmp > 65535)
    247a:	fe 01       	movw	r30, r28
    247c:	ff 96       	adiw	r30, 0x3f	; 63
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	64 f5       	brge	.+88     	; 0x24ee <H_LCD_void_latchByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	fe 01       	movw	r30, r28
    2498:	ed 5b       	subi	r30, 0xBD	; 189
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e af       	std	Y+62, r25	; 0x3e
    24c2:	8d af       	std	Y+61, r24	; 0x3d
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <H_LCD_void_latchByte+0x102>
    24c6:	80 e9       	ldi	r24, 0x90	; 144
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	9c af       	std	Y+60, r25	; 0x3c
    24cc:	8b af       	std	Y+59, r24	; 0x3b
    24ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    24d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <H_LCD_void_latchByte+0xf0>
    24d6:	9c af       	std	Y+60, r25	; 0x3c
    24d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8d ad       	ldd	r24, Y+61	; 0x3d
    24dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	9e af       	std	Y+62, r25	; 0x3e
    24e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <H_LCD_void_latchByte+0xe4>
    24ec:	16 c0       	rjmp	.+44     	; 0x251a <H_LCD_void_latchByte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	fe 01       	movw	r30, r28
    24f0:	ff 96       	adiw	r30, 0x3f	; 63
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9e af       	std	Y+62, r25	; 0x3e
    2504:	8d af       	std	Y+61, r24	; 0x3d
    2506:	8d ad       	ldd	r24, Y+61	; 0x3d
    2508:	9e ad       	ldd	r25, Y+62	; 0x3e
    250a:	9a af       	std	Y+58, r25	; 0x3a
    250c:	89 af       	std	Y+57, r24	; 0x39
    250e:	89 ad       	ldd	r24, Y+57	; 0x39
    2510:	9a ad       	ldd	r25, Y+58	; 0x3a
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <H_LCD_void_latchByte+0x130>
    2516:	9a af       	std	Y+58, r25	; 0x3a
    2518:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,4));
    251a:	fe 01       	movw	r30, r28
    251c:	e9 5b       	subi	r30, 0xB9	; 185
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	80 71       	andi	r24, 0x10	; 16
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	95 95       	asr	r25
    252c:	87 95       	ror	r24
    252e:	95 95       	asr	r25
    2530:	87 95       	ror	r24
    2532:	95 95       	asr	r25
    2534:	87 95       	ror	r24
    2536:	95 95       	asr	r25
    2538:	87 95       	ror	r24
    253a:	28 2f       	mov	r18, r24
    253c:	86 e3       	ldi	r24, 0x36	; 54
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	42 2f       	mov	r20, r18
    2544:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,5));
    2548:	fe 01       	movw	r30, r28
    254a:	e9 5b       	subi	r30, 0xB9	; 185
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	80 72       	andi	r24, 0x20	; 32
    2556:	90 70       	andi	r25, 0x00	; 0
    2558:	95 95       	asr	r25
    255a:	87 95       	ror	r24
    255c:	95 95       	asr	r25
    255e:	87 95       	ror	r24
    2560:	95 95       	asr	r25
    2562:	87 95       	ror	r24
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	95 95       	asr	r25
    256a:	87 95       	ror	r24
    256c:	28 2f       	mov	r18, r24
    256e:	86 e3       	ldi	r24, 0x36	; 54
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	42 2f       	mov	r20, r18
    2576:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,6));
    257a:	fe 01       	movw	r30, r28
    257c:	e9 5b       	subi	r30, 0xB9	; 185
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	80 74       	andi	r24, 0x40	; 64
    2588:	90 70       	andi	r25, 0x00	; 0
    258a:	08 2e       	mov	r0, r24
    258c:	89 2f       	mov	r24, r25
    258e:	00 0c       	add	r0, r0
    2590:	88 1f       	adc	r24, r24
    2592:	99 0b       	sbc	r25, r25
    2594:	00 0c       	add	r0, r0
    2596:	88 1f       	adc	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	28 2f       	mov	r18, r24
    259c:	86 e3       	ldi	r24, 0x36	; 54
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	42 2f       	mov	r20, r18
    25a4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,7));
    25a8:	fe 01       	movw	r30, r28
    25aa:	e9 5b       	subi	r30, 0xB9	; 185
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	28 2f       	mov	r18, r24
    25b2:	22 1f       	adc	r18, r18
    25b4:	22 27       	eor	r18, r18
    25b6:	22 1f       	adc	r18, r18
    25b8:	86 e3       	ldi	r24, 0x36	; 54
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	64 e0       	ldi	r22, 0x04	; 4
    25be:	42 2f       	mov	r20, r18
    25c0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    25c4:	89 e3       	ldi	r24, 0x39	; 57
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	62 e0       	ldi	r22, 0x02	; 2
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e8       	ldi	r26, 0x80	; 128
    25d6:	bf e3       	ldi	r27, 0x3F	; 63
    25d8:	8d ab       	std	Y+53, r24	; 0x35
    25da:	9e ab       	std	Y+54, r25	; 0x36
    25dc:	af ab       	std	Y+55, r26	; 0x37
    25de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6d a9       	ldd	r22, Y+53	; 0x35
    25e2:	7e a9       	ldd	r23, Y+54	; 0x36
    25e4:	8f a9       	ldd	r24, Y+55	; 0x37
    25e6:	98 ad       	ldd	r25, Y+56	; 0x38
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	55 e4       	ldi	r21, 0x45	; 69
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	89 ab       	std	Y+49, r24	; 0x31
    25fa:	9a ab       	std	Y+50, r25	; 0x32
    25fc:	ab ab       	std	Y+51, r26	; 0x33
    25fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2600:	69 a9       	ldd	r22, Y+49	; 0x31
    2602:	7a a9       	ldd	r23, Y+50	; 0x32
    2604:	8b a9       	ldd	r24, Y+51	; 0x33
    2606:	9c a9       	ldd	r25, Y+52	; 0x34
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <H_LCD_void_latchByte+0x240>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	98 ab       	std	Y+48, r25	; 0x30
    261e:	8f a7       	std	Y+47, r24	; 0x2f
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <H_LCD_void_latchByte+0x2be>
	else if (__tmp > 65535)
    2622:	69 a9       	ldd	r22, Y+49	; 0x31
    2624:	7a a9       	ldd	r23, Y+50	; 0x32
    2626:	8b a9       	ldd	r24, Y+51	; 0x33
    2628:	9c a9       	ldd	r25, Y+52	; 0x34
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <H_LCD_void_latchByte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6d a9       	ldd	r22, Y+53	; 0x35
    263c:	7e a9       	ldd	r23, Y+54	; 0x36
    263e:	8f a9       	ldd	r24, Y+55	; 0x37
    2640:	98 ad       	ldd	r25, Y+56	; 0x38
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <H_LCD_void_latchByte+0x2a0>
    2664:	80 e9       	ldi	r24, 0x90	; 144
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	9e a7       	std	Y+46, r25	; 0x2e
    266a:	8d a7       	std	Y+45, r24	; 0x2d
    266c:	8d a5       	ldd	r24, Y+45	; 0x2d
    266e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <H_LCD_void_latchByte+0x28e>
    2674:	9e a7       	std	Y+46, r25	; 0x2e
    2676:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8f a5       	ldd	r24, Y+47	; 0x2f
    267a:	98 a9       	ldd	r25, Y+48	; 0x30
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	98 ab       	std	Y+48, r25	; 0x30
    2680:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8f a5       	ldd	r24, Y+47	; 0x2f
    2684:	98 a9       	ldd	r25, Y+48	; 0x30
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <H_LCD_void_latchByte+0x282>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <H_LCD_void_latchByte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	69 a9       	ldd	r22, Y+49	; 0x31
    268e:	7a a9       	ldd	r23, Y+50	; 0x32
    2690:	8b a9       	ldd	r24, Y+51	; 0x33
    2692:	9c a9       	ldd	r25, Y+52	; 0x34
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	98 ab       	std	Y+48, r25	; 0x30
    269e:	8f a7       	std	Y+47, r24	; 0x2f
    26a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a2:	98 a9       	ldd	r25, Y+48	; 0x30
    26a4:	9c a7       	std	Y+44, r25	; 0x2c
    26a6:	8b a7       	std	Y+43, r24	; 0x2b
    26a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <H_LCD_void_latchByte+0x2ca>
    26b0:	9c a7       	std	Y+44, r25	; 0x2c
    26b2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    26b4:	89 e3       	ldi	r24, 0x39	; 57
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	62 e0       	ldi	r22, 0x02	; 2
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e8       	ldi	r26, 0x80	; 128
    26c6:	bf e3       	ldi	r27, 0x3F	; 63
    26c8:	8f a3       	std	Y+39, r24	; 0x27
    26ca:	98 a7       	std	Y+40, r25	; 0x28
    26cc:	a9 a7       	std	Y+41, r26	; 0x29
    26ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d0:	6f a1       	ldd	r22, Y+39	; 0x27
    26d2:	78 a5       	ldd	r23, Y+40	; 0x28
    26d4:	89 a5       	ldd	r24, Y+41	; 0x29
    26d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a e7       	ldi	r20, 0x7A	; 122
    26de:	55 e4       	ldi	r21, 0x45	; 69
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8b a3       	std	Y+35, r24	; 0x23
    26ea:	9c a3       	std	Y+36, r25	; 0x24
    26ec:	ad a3       	std	Y+37, r26	; 0x25
    26ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f0:	6b a1       	ldd	r22, Y+35	; 0x23
    26f2:	7c a1       	ldd	r23, Y+36	; 0x24
    26f4:	8d a1       	ldd	r24, Y+37	; 0x25
    26f6:	9e a1       	ldd	r25, Y+38	; 0x26
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e8       	ldi	r20, 0x80	; 128
    26fe:	5f e3       	ldi	r21, 0x3F	; 63
    2700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2704:	88 23       	and	r24, r24
    2706:	2c f4       	brge	.+10     	; 0x2712 <H_LCD_void_latchByte+0x330>
		__ticks = 1;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9a a3       	std	Y+34, r25	; 0x22
    270e:	89 a3       	std	Y+33, r24	; 0x21
    2710:	3f c0       	rjmp	.+126    	; 0x2790 <H_LCD_void_latchByte+0x3ae>
	else if (__tmp > 65535)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	3f ef       	ldi	r19, 0xFF	; 255
    271e:	4f e7       	ldi	r20, 0x7F	; 127
    2720:	57 e4       	ldi	r21, 0x47	; 71
    2722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2726:	18 16       	cp	r1, r24
    2728:	4c f5       	brge	.+82     	; 0x277c <H_LCD_void_latchByte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272a:	6f a1       	ldd	r22, Y+39	; 0x27
    272c:	78 a5       	ldd	r23, Y+40	; 0x28
    272e:	89 a5       	ldd	r24, Y+41	; 0x29
    2730:	9a a5       	ldd	r25, Y+42	; 0x2a
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	bc 01       	movw	r22, r24
    2744:	cd 01       	movw	r24, r26
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	0f c0       	rjmp	.+30     	; 0x2772 <H_LCD_void_latchByte+0x390>
    2754:	80 e9       	ldi	r24, 0x90	; 144
    2756:	91 e0       	ldi	r25, 0x01	; 1
    2758:	98 a3       	std	Y+32, r25	; 0x20
    275a:	8f 8f       	std	Y+31, r24	; 0x1f
    275c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    275e:	98 a1       	ldd	r25, Y+32	; 0x20
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <H_LCD_void_latchByte+0x37e>
    2764:	98 a3       	std	Y+32, r25	; 0x20
    2766:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2768:	89 a1       	ldd	r24, Y+33	; 0x21
    276a:	9a a1       	ldd	r25, Y+34	; 0x22
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	9a a3       	std	Y+34, r25	; 0x22
    2770:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	89 a1       	ldd	r24, Y+33	; 0x21
    2774:	9a a1       	ldd	r25, Y+34	; 0x22
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	69 f7       	brne	.-38     	; 0x2754 <H_LCD_void_latchByte+0x372>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <H_LCD_void_latchByte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	6b a1       	ldd	r22, Y+35	; 0x23
    277e:	7c a1       	ldd	r23, Y+36	; 0x24
    2780:	8d a1       	ldd	r24, Y+37	; 0x25
    2782:	9e a1       	ldd	r25, Y+38	; 0x26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	89 a3       	std	Y+33, r24	; 0x21
    2790:	89 a1       	ldd	r24, Y+33	; 0x21
    2792:	9a a1       	ldd	r25, Y+34	; 0x22
    2794:	9e 8f       	std	Y+30, r25	; 0x1e
    2796:	8d 8f       	std	Y+29, r24	; 0x1d
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <H_LCD_void_latchByte+0x3ba>
    27a0:	9e 8f       	std	Y+30, r25	; 0x1e
    27a2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,0));
    27a4:	fe 01       	movw	r30, r28
    27a6:	e9 5b       	subi	r30, 0xB9	; 185
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	28 2f       	mov	r18, r24
    27ae:	21 70       	andi	r18, 0x01	; 1
    27b0:	86 e3       	ldi	r24, 0x36	; 54
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	42 2f       	mov	r20, r18
    27b8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,1));
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 5b       	subi	r30, 0xB9	; 185
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	82 70       	andi	r24, 0x02	; 2
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	95 95       	asr	r25
    27ce:	87 95       	ror	r24
    27d0:	28 2f       	mov	r18, r24
    27d2:	86 e3       	ldi	r24, 0x36	; 54
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	42 2f       	mov	r20, r18
    27da:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,2));
    27de:	fe 01       	movw	r30, r28
    27e0:	e9 5b       	subi	r30, 0xB9	; 185
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 81       	ld	r24, Z
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	84 70       	andi	r24, 0x04	; 4
    27ec:	90 70       	andi	r25, 0x00	; 0
    27ee:	95 95       	asr	r25
    27f0:	87 95       	ror	r24
    27f2:	95 95       	asr	r25
    27f4:	87 95       	ror	r24
    27f6:	28 2f       	mov	r18, r24
    27f8:	86 e3       	ldi	r24, 0x36	; 54
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	62 e0       	ldi	r22, 0x02	; 2
    27fe:	42 2f       	mov	r20, r18
    2800:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,3));
    2804:	fe 01       	movw	r30, r28
    2806:	e9 5b       	subi	r30, 0xB9	; 185
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	88 70       	andi	r24, 0x08	; 8
    2812:	90 70       	andi	r25, 0x00	; 0
    2814:	95 95       	asr	r25
    2816:	87 95       	ror	r24
    2818:	95 95       	asr	r25
    281a:	87 95       	ror	r24
    281c:	95 95       	asr	r25
    281e:	87 95       	ror	r24
    2820:	28 2f       	mov	r18, r24
    2822:	86 e3       	ldi	r24, 0x36	; 54
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	64 e0       	ldi	r22, 0x04	; 4
    2828:	42 2f       	mov	r20, r18
    282a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    282e:	89 e3       	ldi	r24, 0x39	; 57
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	62 e0       	ldi	r22, 0x02	; 2
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	89 8f       	std	Y+25, r24	; 0x19
    2844:	9a 8f       	std	Y+26, r25	; 0x1a
    2846:	ab 8f       	std	Y+27, r26	; 0x1b
    2848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a e7       	ldi	r20, 0x7A	; 122
    2858:	55 e4       	ldi	r21, 0x45	; 69
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8d 8b       	std	Y+21, r24	; 0x15
    2864:	9e 8b       	std	Y+22, r25	; 0x16
    2866:	af 8b       	std	Y+23, r26	; 0x17
    2868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <H_LCD_void_latchByte+0x4aa>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	3f c0       	rjmp	.+126    	; 0x290a <H_LCD_void_latchByte+0x528>
	else if (__tmp > 65535)
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <H_LCD_void_latchByte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	69 8d       	ldd	r22, Y+25	; 0x19
    28a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <H_LCD_void_latchByte+0x50a>
    28ce:	80 e9       	ldi	r24, 0x90	; 144
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	9a 8b       	std	Y+18, r25	; 0x12
    28d4:	89 8b       	std	Y+17, r24	; 0x11
    28d6:	89 89       	ldd	r24, Y+17	; 0x11
    28d8:	9a 89       	ldd	r25, Y+18	; 0x12
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <H_LCD_void_latchByte+0x4f8>
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <H_LCD_void_latchByte+0x4ec>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <H_LCD_void_latchByte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	8b 89       	ldd	r24, Y+19	; 0x13
    290c:	9c 89       	ldd	r25, Y+20	; 0x14
    290e:	98 8b       	std	Y+16, r25	; 0x10
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	8f 85       	ldd	r24, Y+15	; 0x0f
    2914:	98 89       	ldd	r25, Y+16	; 0x10
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <H_LCD_void_latchByte+0x534>
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    291e:	89 e3       	ldi	r24, 0x39	; 57
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 ea       	ldi	r26, 0xA0	; 160
    2930:	b0 e4       	ldi	r27, 0x40	; 64
    2932:	8b 87       	std	Y+11, r24	; 0x0b
    2934:	9c 87       	std	Y+12, r25	; 0x0c
    2936:	ad 87       	std	Y+13, r26	; 0x0d
    2938:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6b 85       	ldd	r22, Y+11	; 0x0b
    293c:	7c 85       	ldd	r23, Y+12	; 0x0c
    293e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2940:	9e 85       	ldd	r25, Y+14	; 0x0e
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a e7       	ldi	r20, 0x7A	; 122
    2948:	55 e4       	ldi	r21, 0x45	; 69
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	8f 83       	std	Y+7, r24	; 0x07
    2954:	98 87       	std	Y+8, r25	; 0x08
    2956:	a9 87       	std	Y+9, r26	; 0x09
    2958:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <H_LCD_void_latchByte+0x59a>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9e 83       	std	Y+6, r25	; 0x06
    2978:	8d 83       	std	Y+5, r24	; 0x05
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <H_LCD_void_latchByte+0x618>
	else if (__tmp > 65535)
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <H_LCD_void_latchByte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6b 85       	ldd	r22, Y+11	; 0x0b
    2996:	7c 85       	ldd	r23, Y+12	; 0x0c
    2998:	8d 85       	ldd	r24, Y+13	; 0x0d
    299a:	9e 85       	ldd	r25, Y+14	; 0x0e
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <H_LCD_void_latchByte+0x5fa>
    29be:	80 e9       	ldi	r24, 0x90	; 144
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <H_LCD_void_latchByte+0x5e8>
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <H_LCD_void_latchByte+0x5dc>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <H_LCD_void_latchByte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <H_LCD_void_latchByte+0x624>
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2a0e:	c9 5b       	subi	r28, 0xB9	; 185
    2a10:	df 4f       	sbci	r29, 0xFF	; 255
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	08 95       	ret

00002a26 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(uint8 copy_u8command)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	0f 92       	push	r0
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2a32:	89 e3       	ldi	r24, 0x39	; 57
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <H_LCD_void_latchByte>
}
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <H_LCD_void_sendData>:

void H_LCD_void_sendData(uint8 copy_u8data )
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2a58:	89 e3       	ldi	r24, 0x39	; 57
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	63 e0       	ldi	r22, 0x03	; 3
    2a5e:	41 e0       	ldi	r20, 0x01	; 1
    2a60:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <H_LCD_void_latchByte>
}
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const sint8 * pstr)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <H_LCD_void_sendString+0x6>
    2a78:	0f 92       	push	r0
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	9b 83       	std	Y+3, r25	; 0x03
    2a80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2a82:	19 82       	std	Y+1, r1	; 0x01
    2a84:	0e c0       	rjmp	.+28     	; 0x2aa2 <H_LCD_void_sendString+0x30>
	for(;pstr[i]!='\0';i++)
	{
		H_LCD_void_sendData(pstr[i]);
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	28 2f       	mov	r18, r24
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a90:	fc 01       	movw	r30, r24
    2a92:	e2 0f       	add	r30, r18
    2a94:	f3 1f       	adc	r31, r19
    2a96:	80 81       	ld	r24, Z
    2a98:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <H_LCD_void_sendData>
}

void H_LCD_void_sendString(const sint8 * pstr)
{
	uint8 i=0;
	for(;pstr[i]!='\0';i++)
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2aac:	fc 01       	movw	r30, r24
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 23       	and	r24, r24
    2ab6:	39 f7       	brne	.-50     	; 0x2a86 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[i]);
	}
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <H_LCD_void_sendIntNum>:


char buff[16]; /* String to hold the ascii result */

void H_LCD_void_sendIntNum(sint32 copy_s32Num)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	64 97       	sbiw	r28, 0x14	; 20
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	69 8b       	std	Y+17, r22	; 0x11
    2ada:	7a 8b       	std	Y+18, r23	; 0x12
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
	sint8 buff[16];
	itoa(copy_s32Num,buff,10);
    2ae0:	89 89       	ldd	r24, Y+17	; 0x11
    2ae2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2f 5f       	subi	r18, 0xFF	; 255
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	b9 01       	movw	r22, r18
    2aec:	4a e0       	ldi	r20, 0x0A	; 10
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	0e 94 86 19 	call	0x330c	; 0x330c <itoa>
	H_LCD_void_sendString(buff);
    2af4:	ce 01       	movw	r24, r28
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <H_LCD_void_sendString>
}
    2afc:	64 96       	adiw	r28, 0x14	; 20
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <Keypad_adjustKeyNum>:
 */

#include "inc/keypad.h"

uint8 Keypad_adjustKeyNum(uint8 buttonNum)
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <Keypad_adjustKeyNum+0x6>
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <Keypad_adjustKeyNum+0x8>
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 button=0;
    2b1c:	19 82       	std	Y+1, r1	; 0x01
	switch(buttonNum)
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	3c 83       	std	Y+4, r19	; 0x04
    2b26:	2b 83       	std	Y+3, r18	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	88 30       	cpi	r24, 0x08	; 8
    2b2e:	91 05       	cpc	r25, r1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <Keypad_adjustKeyNum+0x26>
    2b32:	70 c0       	rjmp	.+224    	; 0x2c14 <Keypad_adjustKeyNum+0x106>
    2b34:	2b 81       	ldd	r18, Y+3	; 0x03
    2b36:	3c 81       	ldd	r19, Y+4	; 0x04
    2b38:	29 30       	cpi	r18, 0x09	; 9
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	5c f5       	brge	.+86     	; 0x2b94 <Keypad_adjustKeyNum+0x86>
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	84 30       	cpi	r24, 0x04	; 4
    2b44:	91 05       	cpc	r25, r1
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <Keypad_adjustKeyNum+0x3c>
    2b48:	59 c0       	rjmp	.+178    	; 0x2bfc <Keypad_adjustKeyNum+0xee>
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	25 30       	cpi	r18, 0x05	; 5
    2b50:	31 05       	cpc	r19, r1
    2b52:	9c f4       	brge	.+38     	; 0x2b7a <Keypad_adjustKeyNum+0x6c>
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <Keypad_adjustKeyNum+0x52>
    2b5e:	48 c0       	rjmp	.+144    	; 0x2bf0 <Keypad_adjustKeyNum+0xe2>
    2b60:	2b 81       	ldd	r18, Y+3	; 0x03
    2b62:	3c 81       	ldd	r19, Y+4	; 0x04
    2b64:	23 30       	cpi	r18, 0x03	; 3
    2b66:	31 05       	cpc	r19, r1
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <Keypad_adjustKeyNum+0x5e>
    2b6a:	45 c0       	rjmp	.+138    	; 0x2bf6 <Keypad_adjustKeyNum+0xe8>
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	81 30       	cpi	r24, 0x01	; 1
    2b72:	91 05       	cpc	r25, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <Keypad_adjustKeyNum+0x6a>
    2b76:	39 c0       	rjmp	.+114    	; 0x2bea <Keypad_adjustKeyNum+0xdc>
    2b78:	67 c0       	rjmp	.+206    	; 0x2c48 <Keypad_adjustKeyNum+0x13a>
    2b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7e:	26 30       	cpi	r18, 0x06	; 6
    2b80:	31 05       	cpc	r19, r1
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <Keypad_adjustKeyNum+0x78>
    2b84:	41 c0       	rjmp	.+130    	; 0x2c08 <Keypad_adjustKeyNum+0xfa>
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8a:	87 30       	cpi	r24, 0x07	; 7
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	0c f0       	brlt	.+2      	; 0x2b92 <Keypad_adjustKeyNum+0x84>
    2b90:	3e c0       	rjmp	.+124    	; 0x2c0e <Keypad_adjustKeyNum+0x100>
    2b92:	37 c0       	rjmp	.+110    	; 0x2c02 <Keypad_adjustKeyNum+0xf4>
    2b94:	2b 81       	ldd	r18, Y+3	; 0x03
    2b96:	3c 81       	ldd	r19, Y+4	; 0x04
    2b98:	2c 30       	cpi	r18, 0x0C	; 12
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	09 f4       	brne	.+2      	; 0x2ba0 <Keypad_adjustKeyNum+0x92>
    2b9e:	46 c0       	rjmp	.+140    	; 0x2c2c <Keypad_adjustKeyNum+0x11e>
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	8d 30       	cpi	r24, 0x0D	; 13
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	5c f4       	brge	.+22     	; 0x2bc0 <Keypad_adjustKeyNum+0xb2>
    2baa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bac:	3c 81       	ldd	r19, Y+4	; 0x04
    2bae:	2a 30       	cpi	r18, 0x0A	; 10
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	b1 f1       	breq	.+108    	; 0x2c20 <Keypad_adjustKeyNum+0x112>
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	8b 30       	cpi	r24, 0x0B	; 11
    2bba:	91 05       	cpc	r25, r1
    2bbc:	a4 f5       	brge	.+104    	; 0x2c26 <Keypad_adjustKeyNum+0x118>
    2bbe:	2d c0       	rjmp	.+90     	; 0x2c1a <Keypad_adjustKeyNum+0x10c>
    2bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc4:	2e 30       	cpi	r18, 0x0E	; 14
    2bc6:	31 05       	cpc	r19, r1
    2bc8:	b9 f1       	breq	.+110    	; 0x2c38 <Keypad_adjustKeyNum+0x12a>
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bce:	8e 30       	cpi	r24, 0x0E	; 14
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	7c f1       	brlt	.+94     	; 0x2c32 <Keypad_adjustKeyNum+0x124>
    2bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    2bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    2bd8:	2f 30       	cpi	r18, 0x0F	; 15
    2bda:	31 05       	cpc	r19, r1
    2bdc:	79 f1       	breq	.+94     	; 0x2c3c <Keypad_adjustKeyNum+0x12e>
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	80 31       	cpi	r24, 0x10	; 16
    2be4:	91 05       	cpc	r25, r1
    2be6:	69 f1       	breq	.+90     	; 0x2c42 <Keypad_adjustKeyNum+0x134>
    2be8:	2f c0       	rjmp	.+94     	; 0x2c48 <Keypad_adjustKeyNum+0x13a>
	{
	case 1:
		button=7;
    2bea:	87 e0       	ldi	r24, 0x07	; 7
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	2e c0       	rjmp	.+92     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 2:
		button=8;
    2bf0:	88 e0       	ldi	r24, 0x08	; 8
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	2b c0       	rjmp	.+86     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 3:
		button=9;
    2bf6:	89 e0       	ldi	r24, 0x09	; 9
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	28 c0       	rjmp	.+80     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 4:
		button='%';
    2bfc:	85 e2       	ldi	r24, 0x25	; 37
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	25 c0       	rjmp	.+74     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 5:
		button=4;
    2c02:	84 e0       	ldi	r24, 0x04	; 4
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	22 c0       	rjmp	.+68     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 6:
		button=5;
    2c08:	85 e0       	ldi	r24, 0x05	; 5
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	1f c0       	rjmp	.+62     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 7:
		button=6;
    2c0e:	86 e0       	ldi	r24, 0x06	; 6
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	1c c0       	rjmp	.+56     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 8:
		button='*';
    2c14:	8a e2       	ldi	r24, 0x2A	; 42
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	19 c0       	rjmp	.+50     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 9:
		button=1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	16 c0       	rjmp	.+44     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 10:
		button=2;
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	13 c0       	rjmp	.+38     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 11:
		button=3;
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	10 c0       	rjmp	.+32     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 12:
		button='-';
    2c2c:	8d e2       	ldi	r24, 0x2D	; 45
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	0d c0       	rjmp	.+26     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 13:
		button=13;
    2c32:	8d e0       	ldi	r24, 0x0D	; 13
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	0a c0       	rjmp	.+20     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 14:
		button=0;
    2c38:	19 82       	std	Y+1, r1	; 0x01
    2c3a:	08 c0       	rjmp	.+16     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 15:
		button='=';
    2c3c:	8d e3       	ldi	r24, 0x3D	; 61
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	05 c0       	rjmp	.+10     	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	case 16:
		button='+';
    2c42:	8b e2       	ldi	r24, 0x2B	; 43
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <Keypad_adjustKeyNum+0x13e>
		break;
	default :
		button=buttonNum;
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button;
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey(void)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <Keypad_getPressedKey+0x6>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <Keypad_getPressedKey+0x8>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <Keypad_getPressedKey+0xa>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 key=0;
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 keypad_port_value=0;
    2c6c:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		for(col=0;col<4;col++)
    2c6e:	1b 82       	std	Y+3, r1	; 0x03
    2c70:	7a c0       	rjmp	.+244    	; 0x2d66 <Keypad_getPressedKey+0x10a>
		{
			DIO_voidSetPortDirection(PORTD_BASE,INPUT);
    2c72:	80 e3       	ldi	r24, 0x30	; 48
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	60 e0       	ldi	r22, 0x00	; 0
    2c78:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_voidSetPortDirection>
			switch(col)
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	3e 83       	std	Y+6, r19	; 0x06
    2c84:	2d 83       	std	Y+5, r18	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	f1 f0       	breq	.+60     	; 0x2ccc <Keypad_getPressedKey+0x70>
    2c90:	2d 81       	ldd	r18, Y+5	; 0x05
    2c92:	3e 81       	ldd	r19, Y+6	; 0x06
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <Keypad_getPressedKey+0x48>
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	61 f0       	breq	.+24     	; 0x2cba <Keypad_getPressedKey+0x5e>
    2ca2:	2e c0       	rjmp	.+92     	; 0x2d00 <Keypad_getPressedKey+0xa4>
    2ca4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ca6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	c1 f0       	breq	.+48     	; 0x2cde <Keypad_getPressedKey+0x82>
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	e1 f0       	breq	.+56     	; 0x2cf0 <Keypad_getPressedKey+0x94>
    2cb8:	23 c0       	rjmp	.+70     	; 0x2d00 <Keypad_getPressedKey+0xa4>
			{
			case 0:
				DIO_voidSetPinDirection(PORTD_BASE,PIN7,OUTPUT);
    2cba:	80 e3       	ldi	r24, 0x30	; 48
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	67 e0       	ldi	r22, 0x07	; 7
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN7);
    2cc6:	8f e7       	ldi	r24, 0x7F	; 127
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	1a c0       	rjmp	.+52     	; 0x2d00 <Keypad_getPressedKey+0xa4>
				break;
			case 1:
				DIO_voidSetPinDirection(PORTD_BASE,PIN6,OUTPUT);
    2ccc:	80 e3       	ldi	r24, 0x30	; 48
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	66 e0       	ldi	r22, 0x06	; 6
    2cd2:	41 e0       	ldi	r20, 0x01	; 1
    2cd4:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN6);
    2cd8:	8f eb       	ldi	r24, 0xBF	; 191
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	11 c0       	rjmp	.+34     	; 0x2d00 <Keypad_getPressedKey+0xa4>
				break;
			case 2:
				DIO_voidSetPinDirection(PORTD_BASE,PIN5,OUTPUT);
    2cde:	80 e3       	ldi	r24, 0x30	; 48
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	65 e0       	ldi	r22, 0x05	; 5
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN5);
    2cea:	8f ed       	ldi	r24, 0xDF	; 223
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	08 c0       	rjmp	.+16     	; 0x2d00 <Keypad_getPressedKey+0xa4>
				break;
			case 3:
				DIO_voidSetPinDirection(PORTD_BASE,PIN3,OUTPUT);
    2cf0:	80 e3       	ldi	r24, 0x30	; 48
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	63 e0       	ldi	r22, 0x03	; 3
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN3);
    2cfc:	87 ef       	ldi	r24, 0xF7	; 247
    2cfe:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);
    2d00:	80 e3       	ldi	r24, 0x30	; 48
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	69 81       	ldd	r22, Y+1	; 0x01
    2d06:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_voidSetPortValue>

			for(row=0;row<4;row++)
    2d0a:	1c 82       	std	Y+4, r1	; 0x04
    2d0c:	26 c0       	rjmp	.+76     	; 0x2d5a <Keypad_getPressedKey+0xfe>
			{
				if(DIO_voidGetPinValue(PORTC_BASE,PIN5-row)==LOGIC_LOW)
    2d0e:	95 e0       	ldi	r25, 0x05	; 5
    2d10:	8c 81       	ldd	r24, Y+4	; 0x04
    2d12:	29 2f       	mov	r18, r25
    2d14:	28 1b       	sub	r18, r24
    2d16:	83 e3       	ldi	r24, 0x33	; 51
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	62 2f       	mov	r22, r18
    2d1c:	0e 94 ef 07 	call	0xfde	; 0xfde <DIO_voidGetPinValue>
    2d20:	88 23       	and	r24, r24
    2d22:	c1 f4       	brne	.+48     	; 0x2d54 <Keypad_getPressedKey+0xf8>
				{
					key=Keypad_adjustKeyNum((row*4)+col+1);
    2d24:	8c 81       	ldd	r24, Y+4	; 0x04
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	98 2f       	mov	r25, r24
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	89 0f       	add	r24, r25
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <Keypad_adjustKeyNum>
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
					return key;
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
				}
			}
		}

	}
}
    2d42:	26 96       	adiw	r28, 0x06	; 6
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret
				keypad_port_value = ~(1<<PIN3);
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);

			for(row=0;row<4;row++)
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	8c 83       	std	Y+4, r24	; 0x04
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	84 30       	cpi	r24, 0x04	; 4
    2d5e:	b8 f2       	brcs	.-82     	; 0x2d0e <Keypad_getPressedKey+0xb2>
	uint8 key=0;
	uint8 keypad_port_value=0;

	while(1)
	{
		for(col=0;col<4;col++)
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	8f 5f       	subi	r24, 0xFF	; 255
    2d64:	8b 83       	std	Y+3, r24	; 0x03
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	84 30       	cpi	r24, 0x04	; 4
    2d6a:	08 f4       	brcc	.+2      	; 0x2d6e <Keypad_getPressedKey+0x112>
    2d6c:	82 cf       	rjmp	.-252    	; 0x2c72 <Keypad_getPressedKey+0x16>
    2d6e:	7f cf       	rjmp	.-258    	; 0x2c6e <Keypad_getPressedKey+0x12>

00002d70 <SevenSeg_Init>:
 */

#include "inc\segment7_driver.h"

void SevenSeg_Init()
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTB_BASE,PIN0,OUTPUT);
    2d78:	86 e3       	ldi	r24, 0x36	; 54
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	41 e0       	ldi	r20, 0x01	; 1
    2d80:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN1,OUTPUT);
    2d84:	86 e3       	ldi	r24, 0x36	; 54
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	61 e0       	ldi	r22, 0x01	; 1
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN2,OUTPUT);
    2d90:	86 e3       	ldi	r24, 0x36	; 54
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	62 e0       	ldi	r22, 0x02	; 2
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN4,OUTPUT);
    2d9c:	86 e3       	ldi	r24, 0x36	; 54
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	64 e0       	ldi	r22, 0x04	; 4
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PORTB_BASE,PIN0,INPUT);
    2da8:	86 e3       	ldi	r24, 0x36	; 54
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN1,INPUT);
    2db4:	86 e3       	ldi	r24, 0x36	; 54
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN2,INPUT);
    2dc0:	86 e3       	ldi	r24, 0x36	; 54
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	62 e0       	ldi	r22, 0x02	; 2
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN4,INPUT);
    2dcc:	86 e3       	ldi	r24, 0x36	; 54
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	64 e0       	ldi	r22, 0x04	; 4
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORTA_BASE,PIN3,OUTPUT);
    2dd8:	89 e3       	ldi	r24, 0x39	; 57
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN3,LOGIC_LOW);
    2de4:	89 e3       	ldi	r24, 0x39	; 57
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	63 e0       	ldi	r22, 0x03	; 3
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTA_BASE,PIN2,OUTPUT);
    2df0:	89 e3       	ldi	r24, 0x39	; 57
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	62 e0       	ldi	r22, 0x02	; 2
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN2,LOGIC_LOW);
    2dfc:	89 e3       	ldi	r24, 0x39	; 57
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	62 e0       	ldi	r22, 0x02	; 2
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN5,OUTPUT);
    2e08:	86 e3       	ldi	r24, 0x36	; 54
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	65 e0       	ldi	r22, 0x05	; 5
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN5,LOGIC_LOW);
    2e14:	86 e3       	ldi	r24, 0x36	; 54
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	65 e0       	ldi	r22, 0x05	; 5
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN6,OUTPUT);
    2e20:	86 e3       	ldi	r24, 0x36	; 54
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	66 e0       	ldi	r22, 0x06	; 6
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN6,LOGIC_LOW);
    2e2c:	86 e3       	ldi	r24, 0x36	; 54
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	66 e0       	ldi	r22, 0x06	; 6
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
}
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <SevenSeg_Num>:


void SevenSeg_Num(uint8 num)
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <SevenSeg_Num+0x6>
    2e44:	0f 92       	push	r0
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	3b 83       	std	Y+3, r19	; 0x03
    2e54:	2a 83       	std	Y+2, r18	; 0x02
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	84 30       	cpi	r24, 0x04	; 4
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <SevenSeg_Num+0x24>
    2e60:	ab c0       	rjmp	.+342    	; 0x2fb8 <SevenSeg_Num+0x17a>
    2e62:	2a 81       	ldd	r18, Y+2	; 0x02
    2e64:	3b 81       	ldd	r19, Y+3	; 0x03
    2e66:	25 30       	cpi	r18, 0x05	; 5
    2e68:	31 05       	cpc	r19, r1
    2e6a:	ec f4       	brge	.+58     	; 0x2ea6 <SevenSeg_Num+0x68>
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <SevenSeg_Num+0x3a>
    2e76:	55 c0       	rjmp	.+170    	; 0x2f22 <SevenSeg_Num+0xe4>
    2e78:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7c:	22 30       	cpi	r18, 0x02	; 2
    2e7e:	31 05       	cpc	r19, r1
    2e80:	2c f4       	brge	.+10     	; 0x2e8c <SevenSeg_Num+0x4e>
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	9b 81       	ldd	r25, Y+3	; 0x03
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	99 f1       	breq	.+102    	; 0x2ef0 <SevenSeg_Num+0xb2>
    2e8a:	2b c1       	rjmp	.+598    	; 0x30e2 <SevenSeg_Num+0x2a4>
    2e8c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e8e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e90:	22 30       	cpi	r18, 0x02	; 2
    2e92:	31 05       	cpc	r19, r1
    2e94:	09 f4       	brne	.+2      	; 0x2e98 <SevenSeg_Num+0x5a>
    2e96:	5e c0       	rjmp	.+188    	; 0x2f54 <SevenSeg_Num+0x116>
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	83 30       	cpi	r24, 0x03	; 3
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	09 f4       	brne	.+2      	; 0x2ea4 <SevenSeg_Num+0x66>
    2ea2:	71 c0       	rjmp	.+226    	; 0x2f86 <SevenSeg_Num+0x148>
    2ea4:	1e c1       	rjmp	.+572    	; 0x30e2 <SevenSeg_Num+0x2a4>
    2ea6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea8:	3b 81       	ldd	r19, Y+3	; 0x03
    2eaa:	27 30       	cpi	r18, 0x07	; 7
    2eac:	31 05       	cpc	r19, r1
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <SevenSeg_Num+0x74>
    2eb0:	ce c0       	rjmp	.+412    	; 0x304e <SevenSeg_Num+0x210>
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb6:	88 30       	cpi	r24, 0x08	; 8
    2eb8:	91 05       	cpc	r25, r1
    2eba:	6c f4       	brge	.+26     	; 0x2ed6 <SevenSeg_Num+0x98>
    2ebc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ebe:	3b 81       	ldd	r19, Y+3	; 0x03
    2ec0:	25 30       	cpi	r18, 0x05	; 5
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <SevenSeg_Num+0x8a>
    2ec6:	91 c0       	rjmp	.+290    	; 0x2fea <SevenSeg_Num+0x1ac>
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ecc:	86 30       	cpi	r24, 0x06	; 6
    2ece:	91 05       	cpc	r25, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <SevenSeg_Num+0x96>
    2ed2:	a4 c0       	rjmp	.+328    	; 0x301c <SevenSeg_Num+0x1de>
    2ed4:	06 c1       	rjmp	.+524    	; 0x30e2 <SevenSeg_Num+0x2a4>
    2ed6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ed8:	3b 81       	ldd	r19, Y+3	; 0x03
    2eda:	28 30       	cpi	r18, 0x08	; 8
    2edc:	31 05       	cpc	r19, r1
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <SevenSeg_Num+0xa4>
    2ee0:	cf c0       	rjmp	.+414    	; 0x3080 <SevenSeg_Num+0x242>
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee6:	89 30       	cpi	r24, 0x09	; 9
    2ee8:	91 05       	cpc	r25, r1
    2eea:	09 f4       	brne	.+2      	; 0x2eee <SevenSeg_Num+0xb0>
    2eec:	e2 c0       	rjmp	.+452    	; 0x30b2 <SevenSeg_Num+0x274>
    2eee:	f9 c0       	rjmp	.+498    	; 0x30e2 <SevenSeg_Num+0x2a4>
	{
	case 0 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2ef0:	86 e3       	ldi	r24, 0x36	; 54
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	60 e0       	ldi	r22, 0x00	; 0
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2efc:	86 e3       	ldi	r24, 0x36	; 54
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2f08:	86 e3       	ldi	r24, 0x36	; 54
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	62 e0       	ldi	r22, 0x02	; 2
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2f14:	86 e3       	ldi	r24, 0x36	; 54
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	64 e0       	ldi	r22, 0x04	; 4
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2f20:	e0 c0       	rjmp	.+448    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2f22:	86 e3       	ldi	r24, 0x36	; 54
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2f2e:	86 e3       	ldi	r24, 0x36	; 54
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	61 e0       	ldi	r22, 0x01	; 1
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2f3a:	86 e3       	ldi	r24, 0x36	; 54
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	62 e0       	ldi	r22, 0x02	; 2
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2f46:	86 e3       	ldi	r24, 0x36	; 54
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	64 e0       	ldi	r22, 0x04	; 4
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2f52:	c7 c0       	rjmp	.+398    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2f54:	86 e3       	ldi	r24, 0x36	; 54
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	40 e0       	ldi	r20, 0x00	; 0
    2f5c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    2f60:	86 e3       	ldi	r24, 0x36	; 54
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	61 e0       	ldi	r22, 0x01	; 1
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2f6c:	86 e3       	ldi	r24, 0x36	; 54
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	62 e0       	ldi	r22, 0x02	; 2
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2f78:	86 e3       	ldi	r24, 0x36	; 54
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	64 e0       	ldi	r22, 0x04	; 4
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2f84:	ae c0       	rjmp	.+348    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2f86:	86 e3       	ldi	r24, 0x36	; 54
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	60 e0       	ldi	r22, 0x00	; 0
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    2f92:	86 e3       	ldi	r24, 0x36	; 54
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	61 e0       	ldi	r22, 0x01	; 1
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2f9e:	86 e3       	ldi	r24, 0x36	; 54
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	62 e0       	ldi	r22, 0x02	; 2
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2faa:	86 e3       	ldi	r24, 0x36	; 54
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	64 e0       	ldi	r22, 0x04	; 4
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2fb6:	95 c0       	rjmp	.+298    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2fb8:	86 e3       	ldi	r24, 0x36	; 54
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	40 e0       	ldi	r20, 0x00	; 0
    2fc0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2fc4:	86 e3       	ldi	r24, 0x36	; 54
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	61 e0       	ldi	r22, 0x01	; 1
    2fca:	40 e0       	ldi	r20, 0x00	; 0
    2fcc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    2fd0:	86 e3       	ldi	r24, 0x36	; 54
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	62 e0       	ldi	r22, 0x02	; 2
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2fdc:	86 e3       	ldi	r24, 0x36	; 54
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	64 e0       	ldi	r22, 0x04	; 4
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2fe8:	7c c0       	rjmp	.+248    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2fea:	86 e3       	ldi	r24, 0x36	; 54
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2ff6:	86 e3       	ldi	r24, 0x36	; 54
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	61 e0       	ldi	r22, 0x01	; 1
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    3002:	86 e3       	ldi	r24, 0x36	; 54
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	62 e0       	ldi	r22, 0x02	; 2
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    300e:	86 e3       	ldi	r24, 0x36	; 54
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	64 e0       	ldi	r22, 0x04	; 4
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    301a:	63 c0       	rjmp	.+198    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    301c:	86 e3       	ldi	r24, 0x36	; 54
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    3028:	86 e3       	ldi	r24, 0x36	; 54
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    3034:	86 e3       	ldi	r24, 0x36	; 54
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	62 e0       	ldi	r22, 0x02	; 2
    303a:	41 e0       	ldi	r20, 0x01	; 1
    303c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    3040:	86 e3       	ldi	r24, 0x36	; 54
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	64 e0       	ldi	r22, 0x04	; 4
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    304c:	4a c0       	rjmp	.+148    	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    304e:	86 e3       	ldi	r24, 0x36	; 54
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    305a:	86 e3       	ldi	r24, 0x36	; 54
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    3066:	86 e3       	ldi	r24, 0x36	; 54
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	62 e0       	ldi	r22, 0x02	; 2
    306c:	41 e0       	ldi	r20, 0x01	; 1
    306e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    3072:	86 e3       	ldi	r24, 0x36	; 54
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	64 e0       	ldi	r22, 0x04	; 4
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    307e:	31 c0       	rjmp	.+98     	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    3080:	86 e3       	ldi	r24, 0x36	; 54
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    308c:	86 e3       	ldi	r24, 0x36	; 54
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    3098:	86 e3       	ldi	r24, 0x36	; 54
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	62 e0       	ldi	r22, 0x02	; 2
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    30a4:	86 e3       	ldi	r24, 0x36	; 54
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	64 e0       	ldi	r22, 0x04	; 4
    30aa:	41 e0       	ldi	r20, 0x01	; 1
    30ac:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    30b0:	18 c0       	rjmp	.+48     	; 0x30e2 <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    30b2:	86 e3       	ldi	r24, 0x36	; 54
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    30be:	86 e3       	ldi	r24, 0x36	; 54
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    30ca:	86 e3       	ldi	r24, 0x36	; 54
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	62 e0       	ldi	r22, 0x02	; 2
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    30d6:	86 e3       	ldi	r24, 0x36	; 54
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	64 e0       	ldi	r22, 0x04	; 4
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		break;
	}

}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <Tim1_Task>:


static uint8 gTick=0;

void Tim1_Task()
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	2e 97       	sbiw	r28, 0x0e	; 14
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
	gTick++;
    3102:	80 91 80 00 	lds	r24, 0x0080
    3106:	8f 5f       	subi	r24, 0xFF	; 255
    3108:	80 93 80 00 	sts	0x0080, r24
	if(gTick == 1)
    310c:	80 91 80 00 	lds	r24, 0x0080
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	09 f0       	breq	.+2      	; 0x3116 <Tim1_Task+0x28>
    3114:	78 c0       	rjmp	.+240    	; 0x3206 <Tim1_Task+0x118>
	{
		DIO_voidSetPinValue(PORTA_BASE,5,LOGIC_LOW);
    3116:	89 e3       	ldi	r24, 0x39	; 57
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	65 e0       	ldi	r22, 0x05	; 5
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e4       	ldi	r25, 0x40	; 64
    3126:	ac e9       	ldi	r26, 0x9C	; 156
    3128:	b5 e4       	ldi	r27, 0x45	; 69
    312a:	8b 87       	std	Y+11, r24	; 0x0b
    312c:	9c 87       	std	Y+12, r25	; 0x0c
    312e:	ad 87       	std	Y+13, r26	; 0x0d
    3130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3132:	6b 85       	ldd	r22, Y+11	; 0x0b
    3134:	7c 85       	ldd	r23, Y+12	; 0x0c
    3136:	8d 85       	ldd	r24, Y+13	; 0x0d
    3138:	9e 85       	ldd	r25, Y+14	; 0x0e
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a e7       	ldi	r20, 0x7A	; 122
    3140:	55 e4       	ldi	r21, 0x45	; 69
    3142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8f 83       	std	Y+7, r24	; 0x07
    314c:	98 87       	std	Y+8, r25	; 0x08
    314e:	a9 87       	std	Y+9, r26	; 0x09
    3150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3152:	6f 81       	ldd	r22, Y+7	; 0x07
    3154:	78 85       	ldd	r23, Y+8	; 0x08
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	9a 85       	ldd	r25, Y+10	; 0x0a
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e8       	ldi	r20, 0x80	; 128
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3166:	88 23       	and	r24, r24
    3168:	2c f4       	brge	.+10     	; 0x3174 <Tim1_Task+0x86>
		__ticks = 1;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9e 83       	std	Y+6, r25	; 0x06
    3170:	8d 83       	std	Y+5, r24	; 0x05
    3172:	3f c0       	rjmp	.+126    	; 0x31f2 <Tim1_Task+0x104>
	else if (__tmp > 65535)
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	3f ef       	ldi	r19, 0xFF	; 255
    3180:	4f e7       	ldi	r20, 0x7F	; 127
    3182:	57 e4       	ldi	r21, 0x47	; 71
    3184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3188:	18 16       	cp	r1, r24
    318a:	4c f5       	brge	.+82     	; 0x31de <Tim1_Task+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318c:	6b 85       	ldd	r22, Y+11	; 0x0b
    318e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3190:	8d 85       	ldd	r24, Y+13	; 0x0d
    3192:	9e 85       	ldd	r25, Y+14	; 0x0e
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e2       	ldi	r20, 0x20	; 32
    319a:	51 e4       	ldi	r21, 0x41	; 65
    319c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	0f c0       	rjmp	.+30     	; 0x31d4 <Tim1_Task+0xe6>
    31b6:	80 e9       	ldi	r24, 0x90	; 144
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	9c 83       	std	Y+4, r25	; 0x04
    31bc:	8b 83       	std	Y+3, r24	; 0x03
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	9c 81       	ldd	r25, Y+4	; 0x04
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <Tim1_Task+0xd4>
    31c6:	9c 83       	std	Y+4, r25	; 0x04
    31c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	9e 81       	ldd	r25, Y+6	; 0x06
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d4:	8d 81       	ldd	r24, Y+5	; 0x05
    31d6:	9e 81       	ldd	r25, Y+6	; 0x06
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	69 f7       	brne	.-38     	; 0x31b6 <Tim1_Task+0xc8>
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <Tim1_Task+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31de:	6f 81       	ldd	r22, Y+7	; 0x07
    31e0:	78 85       	ldd	r23, Y+8	; 0x08
    31e2:	89 85       	ldd	r24, Y+9	; 0x09
    31e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
    31f2:	8d 81       	ldd	r24, Y+5	; 0x05
    31f4:	9e 81       	ldd	r25, Y+6	; 0x06
    31f6:	9a 83       	std	Y+2, r25	; 0x02
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	9a 81       	ldd	r25, Y+2	; 0x02
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <Tim1_Task+0x110>
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
	}
}
    3206:	2e 96       	adiw	r28, 0x0e	; 14
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	cd bf       	out	0x3d, r28	; 61
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <main>:
void main()
{
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(&TIM1_config);
    3220:	83 e7       	ldi	r24, 0x73	; 115
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	0e 94 6f 0b 	call	0x16de	; 0x16de <Timer1_Init>
	Timer1_EnableInt(&TIM1_config,Tim1_Task);
    3228:	27 e7       	ldi	r18, 0x77	; 119
    322a:	38 e1       	ldi	r19, 0x18	; 24
    322c:	83 e7       	ldi	r24, 0x73	; 115
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b9 01       	movw	r22, r18
    3232:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <Timer1_EnableInt>
	DIO_voidSetPinDirection(PORTA_BASE,5,OUTPUT);
    3236:	89 e3       	ldi	r24, 0x39	; 57
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	65 e0       	ldi	r22, 0x05	; 5
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	while(1)
	{
		DIO_voidSetPinValue(PORTA_BASE,5,LOGIC_HIGH);
    3242:	89 e3       	ldi	r24, 0x39	; 57
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	65 e0       	ldi	r22, 0x05	; 5
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    324e:	f9 cf       	rjmp	.-14     	; 0x3242 <main+0x2a>

00003250 <__divmodhi4>:
    3250:	97 fb       	bst	r25, 7
    3252:	09 2e       	mov	r0, r25
    3254:	07 26       	eor	r0, r23
    3256:	0a d0       	rcall	.+20     	; 0x326c <__divmodhi4_neg1>
    3258:	77 fd       	sbrc	r23, 7
    325a:	04 d0       	rcall	.+8      	; 0x3264 <__divmodhi4_neg2>
    325c:	0c d0       	rcall	.+24     	; 0x3276 <__udivmodhi4>
    325e:	06 d0       	rcall	.+12     	; 0x326c <__divmodhi4_neg1>
    3260:	00 20       	and	r0, r0
    3262:	1a f4       	brpl	.+6      	; 0x326a <__divmodhi4_exit>

00003264 <__divmodhi4_neg2>:
    3264:	70 95       	com	r23
    3266:	61 95       	neg	r22
    3268:	7f 4f       	sbci	r23, 0xFF	; 255

0000326a <__divmodhi4_exit>:
    326a:	08 95       	ret

0000326c <__divmodhi4_neg1>:
    326c:	f6 f7       	brtc	.-4      	; 0x326a <__divmodhi4_exit>
    326e:	90 95       	com	r25
    3270:	81 95       	neg	r24
    3272:	9f 4f       	sbci	r25, 0xFF	; 255
    3274:	08 95       	ret

00003276 <__udivmodhi4>:
    3276:	aa 1b       	sub	r26, r26
    3278:	bb 1b       	sub	r27, r27
    327a:	51 e1       	ldi	r21, 0x11	; 17
    327c:	07 c0       	rjmp	.+14     	; 0x328c <__udivmodhi4_ep>

0000327e <__udivmodhi4_loop>:
    327e:	aa 1f       	adc	r26, r26
    3280:	bb 1f       	adc	r27, r27
    3282:	a6 17       	cp	r26, r22
    3284:	b7 07       	cpc	r27, r23
    3286:	10 f0       	brcs	.+4      	; 0x328c <__udivmodhi4_ep>
    3288:	a6 1b       	sub	r26, r22
    328a:	b7 0b       	sbc	r27, r23

0000328c <__udivmodhi4_ep>:
    328c:	88 1f       	adc	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	5a 95       	dec	r21
    3292:	a9 f7       	brne	.-22     	; 0x327e <__udivmodhi4_loop>
    3294:	80 95       	com	r24
    3296:	90 95       	com	r25
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	08 95       	ret

0000329e <__prologue_saves__>:
    329e:	2f 92       	push	r2
    32a0:	3f 92       	push	r3
    32a2:	4f 92       	push	r4
    32a4:	5f 92       	push	r5
    32a6:	6f 92       	push	r6
    32a8:	7f 92       	push	r7
    32aa:	8f 92       	push	r8
    32ac:	9f 92       	push	r9
    32ae:	af 92       	push	r10
    32b0:	bf 92       	push	r11
    32b2:	cf 92       	push	r12
    32b4:	df 92       	push	r13
    32b6:	ef 92       	push	r14
    32b8:	ff 92       	push	r15
    32ba:	0f 93       	push	r16
    32bc:	1f 93       	push	r17
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	ca 1b       	sub	r28, r26
    32c8:	db 0b       	sbc	r29, r27
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
    32d4:	09 94       	ijmp

000032d6 <__epilogue_restores__>:
    32d6:	2a 88       	ldd	r2, Y+18	; 0x12
    32d8:	39 88       	ldd	r3, Y+17	; 0x11
    32da:	48 88       	ldd	r4, Y+16	; 0x10
    32dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    32de:	6e 84       	ldd	r6, Y+14	; 0x0e
    32e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    32e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    32e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    32e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    32e8:	b9 84       	ldd	r11, Y+9	; 0x09
    32ea:	c8 84       	ldd	r12, Y+8	; 0x08
    32ec:	df 80       	ldd	r13, Y+7	; 0x07
    32ee:	ee 80       	ldd	r14, Y+6	; 0x06
    32f0:	fd 80       	ldd	r15, Y+5	; 0x05
    32f2:	0c 81       	ldd	r16, Y+4	; 0x04
    32f4:	1b 81       	ldd	r17, Y+3	; 0x03
    32f6:	aa 81       	ldd	r26, Y+2	; 0x02
    32f8:	b9 81       	ldd	r27, Y+1	; 0x01
    32fa:	ce 0f       	add	r28, r30
    32fc:	d1 1d       	adc	r29, r1
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	ed 01       	movw	r28, r26
    330a:	08 95       	ret

0000330c <itoa>:
    330c:	fb 01       	movw	r30, r22
    330e:	9f 01       	movw	r18, r30
    3310:	e8 94       	clt
    3312:	42 30       	cpi	r20, 0x02	; 2
    3314:	c4 f0       	brlt	.+48     	; 0x3346 <itoa+0x3a>
    3316:	45 32       	cpi	r20, 0x25	; 37
    3318:	b4 f4       	brge	.+44     	; 0x3346 <itoa+0x3a>
    331a:	4a 30       	cpi	r20, 0x0A	; 10
    331c:	29 f4       	brne	.+10     	; 0x3328 <itoa+0x1c>
    331e:	97 fb       	bst	r25, 7
    3320:	1e f4       	brtc	.+6      	; 0x3328 <itoa+0x1c>
    3322:	90 95       	com	r25
    3324:	81 95       	neg	r24
    3326:	9f 4f       	sbci	r25, 0xFF	; 255
    3328:	64 2f       	mov	r22, r20
    332a:	77 27       	eor	r23, r23
    332c:	0e 94 3b 19 	call	0x3276	; 0x3276 <__udivmodhi4>
    3330:	80 5d       	subi	r24, 0xD0	; 208
    3332:	8a 33       	cpi	r24, 0x3A	; 58
    3334:	0c f0       	brlt	.+2      	; 0x3338 <itoa+0x2c>
    3336:	89 5d       	subi	r24, 0xD9	; 217
    3338:	81 93       	st	Z+, r24
    333a:	cb 01       	movw	r24, r22
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	a1 f7       	brne	.-24     	; 0x3328 <itoa+0x1c>
    3340:	16 f4       	brtc	.+4      	; 0x3346 <itoa+0x3a>
    3342:	5d e2       	ldi	r21, 0x2D	; 45
    3344:	51 93       	st	Z+, r21
    3346:	10 82       	st	Z, r1
    3348:	c9 01       	movw	r24, r18
    334a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <strrev>

0000334e <strrev>:
    334e:	dc 01       	movw	r26, r24
    3350:	fc 01       	movw	r30, r24
    3352:	67 2f       	mov	r22, r23
    3354:	71 91       	ld	r23, Z+
    3356:	77 23       	and	r23, r23
    3358:	e1 f7       	brne	.-8      	; 0x3352 <strrev+0x4>
    335a:	32 97       	sbiw	r30, 0x02	; 2
    335c:	04 c0       	rjmp	.+8      	; 0x3366 <strrev+0x18>
    335e:	7c 91       	ld	r23, X
    3360:	6d 93       	st	X+, r22
    3362:	70 83       	st	Z, r23
    3364:	62 91       	ld	r22, -Z
    3366:	ae 17       	cp	r26, r30
    3368:	bf 07       	cpc	r27, r31
    336a:	c8 f3       	brcs	.-14     	; 0x335e <strrev+0x10>
    336c:	08 95       	ret

0000336e <_exit>:
    336e:	f8 94       	cli

00003370 <__stop_program>:
    3370:	ff cf       	rjmp	.-2      	; 0x3370 <__stop_program>
