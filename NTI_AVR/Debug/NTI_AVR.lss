
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00003a70  00003b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800086  00800086  00003b2a  2**0
                  ALLOC
  3 .stab         0000459c  00000000  00000000  00003b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e74  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000af3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ce35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000dd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ead0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ec30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f68b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <main>
      8a:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 1c 	jmp	0x39b4	; 0x39b4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 1c 	jmp	0x39ec	; 0x39ec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 1c 	jmp	0x39bc	; 0x39bc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "inc/ADC.h"
#include "inc/ADC_priv.h"


void ADC_Init(ADC_ConfigType *ADC_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg =0;
     b54:	e4 e2       	ldi	r30, 0x24	; 36
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	13 82       	std	Z+3, r1	; 0x03
	CLEAR_BIT(ADC_BASE->ADCSRA.Reg,ADIE); /*clear the interrupt enable bit 3 in ADCSRA REG to disable the ADC interrupt*/
     b5a:	a4 e2       	ldi	r26, 0x24	; 36
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e4 e2       	ldi	r30, 0x24	; 36
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	87 7f       	andi	r24, 0xF7	; 247
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xF8) | (ADC_config->Prescalar);
     b6a:	a4 e2       	ldi	r26, 0x24	; 36
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e4 e2       	ldi	r30, 0x24	; 36
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	98 2f       	mov	r25, r24
     b76:	98 7f       	andi	r25, 0xF8	; 248
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	89 2b       	or	r24, r25
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0x3F) | (ADC_config->V_ref<<REFS0);
     b84:	a4 e2       	ldi	r26, 0x24	; 36
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e4 e2       	ldi	r30, 0x24	; 36
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	28 2f       	mov	r18, r24
     b90:	2f 73       	andi	r18, 0x3F	; 63
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	00 24       	eor	r0, r0
     b9e:	96 95       	lsr	r25
     ba0:	87 95       	ror	r24
     ba2:	07 94       	ror	r0
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	07 94       	ror	r0
     baa:	98 2f       	mov	r25, r24
     bac:	80 2d       	mov	r24, r0
     bae:	82 2b       	or	r24, r18
     bb0:	13 96       	adiw	r26, 0x03	; 3
     bb2:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xDF) | (ADC_config->Adj<<ADLAR);
     bb4:	a4 e2       	ldi	r26, 0x24	; 36
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e4 e2       	ldi	r30, 0x24	; 36
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	2f 7d       	andi	r18, 0xDF	; 223
     bc2:	e9 81       	ldd	r30, Y+1	; 0x01
     bc4:	fa 81       	ldd	r31, Y+2	; 0x02
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 95       	swap	r24
     bd2:	92 95       	swap	r25
     bd4:	90 7f       	andi	r25, 0xF0	; 240
     bd6:	98 27       	eor	r25, r24
     bd8:	80 7f       	andi	r24, 0xF0	; 240
     bda:	98 27       	eor	r25, r24
     bdc:	82 2b       	or	r24, r18
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xDF) | (ADC_config->trig_switch);
     be2:	a4 e2       	ldi	r26, 0x24	; 36
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e4 e2       	ldi	r30, 0x24	; 36
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	84 81       	ldd	r24, Z+4	; 0x04
     bf6:	89 2b       	or	r24, r25
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADEN); /*set the enable bit 7 in ADCSRA REG*/
     bfc:	a4 e2       	ldi	r26, 0x24	; 36
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e2       	ldi	r30, 0x24	; 36
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	8c 93       	st	X, r24
     c0c:	12 97       	sbiw	r26, 0x02	; 2
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(ADC_ConfigType *ADC_config)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <ADC_getDigitalValueSynchNonBlocking+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c26:	a4 e2       	ldi	r26, 0x24	; 36
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e4 e2       	ldi	r30, 0x24	; 36
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	83 81       	ldd	r24, Z+3	; 0x03
     c30:	98 2f       	mov	r25, r24
     c32:	90 7e       	andi	r25, 0xE0	; 224
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	80 81       	ld	r24, Z
     c3a:	87 70       	andi	r24, 0x07	; 7
     c3c:	89 2b       	or	r24, r25
     c3e:	13 96       	adiw	r26, 0x03	; 3
     c40:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADSC);
     c42:	a4 e2       	ldi	r26, 0x24	; 36
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e4 e2       	ldi	r30, 0x24	; 36
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 93       	st	X, r24
     c52:	12 97       	sbiw	r26, 0x02	; 2
	while(BIT_IS_CLEAR(ADC_BASE->ADCSRA.Reg,ADIF))
     c54:	e4 e2       	ldi	r30, 0x24	; 36
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 71       	andi	r24, 0x10	; 16
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <ADC_getDigitalValueSynchNonBlocking+0x3c>
	{

	}
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     c66:	a4 e2       	ldi	r26, 0x24	; 36
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e4 e2       	ldi	r30, 0x24	; 36
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	8c 93       	st	X, r24
     c76:	12 97       	sbiw	r26, 0x02	; 2
	return ADC_BASE->ADCL.Reg;
     c78:	e4 e2       	ldi	r30, 0x24	; 36
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <ADC_getDigitalValueAsynchCallBack>:

void ADC_getDigitalValueAsynchCallBack(ADC_ConfigType *ADC_config)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <ADC_getDigitalValueAsynchCallBack+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c9a:	a4 e2       	ldi	r26, 0x24	; 36
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e2       	ldi	r30, 0x24	; 36
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	98 2f       	mov	r25, r24
     ca6:	90 7e       	andi	r25, 0xE0	; 224
     ca8:	e9 81       	ldd	r30, Y+1	; 0x01
     caa:	fa 81       	ldd	r31, Y+2	; 0x02
     cac:	80 81       	ld	r24, Z
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	89 2b       	or	r24, r25
     cb2:	13 96       	adiw	r26, 0x03	; 3
     cb4:	8c 93       	st	X, r24
	SFIOR = (SFIOR & 0x1F) | (ADC_config->Trigger <<ADTS0);
     cb6:	a0 e5       	ldi	r26, 0x50	; 80
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e0 e5       	ldi	r30, 0x50	; 80
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	28 2f       	mov	r18, r24
     cc2:	2f 71       	andi	r18, 0x1F	; 31
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	85 81       	ldd	r24, Z+5	; 0x05
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	82 95       	swap	r24
     cd4:	92 95       	swap	r25
     cd6:	90 7f       	andi	r25, 0xF0	; 240
     cd8:	98 27       	eor	r25, r24
     cda:	80 7f       	andi	r24, 0xF0	; 240
     cdc:	98 27       	eor	r25, r24
     cde:	82 2b       	or	r24, r18
     ce0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIE);
     ce2:	a4 e2       	ldi	r26, 0x24	; 36
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e2       	ldi	r30, 0x24	; 36
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     cf2:	a4 e2       	ldi	r26, 0x24	; 36
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e2       	ldi	r30, 0x24	; 36
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	8c 93       	st	X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_voidSetPinDirection+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_voidSetPinDirection+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_voidSetPinDirection+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	6b 83       	std	Y+3, r22	; 0x03
     d22:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	2d 83       	std	Y+5, r18	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_voidSetPinDirection+0x2c>
     d38:	51 c0       	rjmp	.+162    	; 0xddc <DIO_voidSetPinDirection+0xce>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	24 30       	cpi	r18, 0x04	; 4
     d40:	31 05       	cpc	r19, r1
     d42:	7c f4       	brge	.+30     	; 0xd62 <DIO_voidSetPinDirection+0x54>
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	71 f1       	breq	.+92     	; 0xdaa <DIO_voidSetPinDirection+0x9c>
     d4e:	2d 81       	ldd	r18, Y+5	; 0x05
     d50:	3e 81       	ldd	r19, Y+6	; 0x06
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	ac f5       	brge	.+106    	; 0xdc2 <DIO_voidSetPinDirection+0xb4>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	d1 f0       	breq	.+52     	; 0xd94 <DIO_voidSetPinDirection+0x86>
     d60:	81 c0       	rjmp	.+258    	; 0xe64 <DIO_voidSetPinDirection+0x156>
     d62:	2d 81       	ldd	r18, Y+5	; 0x05
     d64:	3e 81       	ldd	r19, Y+6	; 0x06
     d66:	25 30       	cpi	r18, 0x05	; 5
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <DIO_voidSetPinDirection+0x60>
     d6c:	52 c0       	rjmp	.+164    	; 0xe12 <DIO_voidSetPinDirection+0x104>
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	0c f4       	brge	.+2      	; 0xd7a <DIO_voidSetPinDirection+0x6c>
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <DIO_voidSetPinDirection+0xea>
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	3e 81       	ldd	r19, Y+6	; 0x06
     d7e:	26 30       	cpi	r18, 0x06	; 6
     d80:	31 05       	cpc	r19, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <DIO_voidSetPinDirection+0x78>
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <DIO_voidSetPinDirection+0x120>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <DIO_voidSetPinDirection+0x84>
     d90:	5d c0       	rjmp	.+186    	; 0xe4c <DIO_voidSetPinDirection+0x13e>
     d92:	68 c0       	rjmp	.+208    	; 0xe64 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	98 2f       	mov	r25, r24
     d9e:	91 70       	andi	r25, 0x01	; 1
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	89 2b       	or	r24, r25
     da6:	81 83       	std	Z+1, r24	; 0x01
     da8:	5d c0       	rjmp	.+186    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	81 70       	andi	r24, 0x01	; 1
     db4:	98 2f       	mov	r25, r24
     db6:	99 0f       	add	r25, r25
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	89 2b       	or	r24, r25
     dbe:	81 83       	std	Z+1, r24	; 0x01
     dc0:	51 c0       	rjmp	.+162    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	98 2f       	mov	r25, r24
     dce:	99 0f       	add	r25, r25
     dd0:	99 0f       	add	r25, r25
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	89 2b       	or	r24, r25
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	44 c0       	rjmp	.+136    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	98 2f       	mov	r25, r24
     de8:	99 0f       	add	r25, r25
     dea:	99 0f       	add	r25, r25
     dec:	99 0f       	add	r25, r25
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	89 2b       	or	r24, r25
     df4:	81 83       	std	Z+1, r24	; 0x01
     df6:	36 c0       	rjmp	.+108    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	81 70       	andi	r24, 0x01	; 1
     e02:	98 2f       	mov	r25, r24
     e04:	92 95       	swap	r25
     e06:	90 7f       	andi	r25, 0xF0	; 240
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	8f 7e       	andi	r24, 0xEF	; 239
     e0c:	89 2b       	or	r24, r25
     e0e:	81 83       	std	Z+1, r24	; 0x01
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	98 2f       	mov	r25, r24
     e1e:	92 95       	swap	r25
     e20:	99 0f       	add	r25, r25
     e22:	90 7e       	andi	r25, 0xE0	; 224
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	89 2b       	or	r24, r25
     e2a:	81 83       	std	Z+1, r24	; 0x01
     e2c:	1b c0       	rjmp	.+54     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	81 70       	andi	r24, 0x01	; 1
     e32:	e9 81       	ldd	r30, Y+1	; 0x01
     e34:	fa 81       	ldd	r31, Y+2	; 0x02
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	98 2f       	mov	r25, r24
     e3a:	92 95       	swap	r25
     e3c:	99 0f       	add	r25, r25
     e3e:	99 0f       	add	r25, r25
     e40:	90 7c       	andi	r25, 0xC0	; 192
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	8f 7b       	andi	r24, 0xBF	; 191
     e46:	89 2b       	or	r24, r25
     e48:	81 83       	std	Z+1, r24	; 0x01
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	81 70       	andi	r24, 0x01	; 1
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	98 2f       	mov	r25, r24
     e56:	97 95       	ror	r25
     e58:	99 27       	eor	r25, r25
     e5a:	97 95       	ror	r25
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	89 2b       	or	r24, r25
     e62:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_voidSetPinValue+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_voidSetPinValue+0x8>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_voidSetPinValue+0xa>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3e 83       	std	Y+6, r19	; 0x06
     e94:	2d 83       	std	Y+5, r18	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_voidSetPinValue+0x2c>
     ea0:	51 c0       	rjmp	.+162    	; 0xf44 <DIO_voidSetPinValue+0xce>
     ea2:	2d 81       	ldd	r18, Y+5	; 0x05
     ea4:	3e 81       	ldd	r19, Y+6	; 0x06
     ea6:	24 30       	cpi	r18, 0x04	; 4
     ea8:	31 05       	cpc	r19, r1
     eaa:	7c f4       	brge	.+30     	; 0xeca <DIO_voidSetPinValue+0x54>
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <DIO_voidSetPinValue+0x9c>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	ac f5       	brge	.+106    	; 0xf2a <DIO_voidSetPinValue+0xb4>
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	d1 f0       	breq	.+52     	; 0xefc <DIO_voidSetPinValue+0x86>
     ec8:	81 c0       	rjmp	.+258    	; 0xfcc <DIO_voidSetPinValue+0x156>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	25 30       	cpi	r18, 0x05	; 5
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_voidSetPinValue+0x60>
     ed4:	52 c0       	rjmp	.+164    	; 0xf7a <DIO_voidSetPinValue+0x104>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	91 05       	cpc	r25, r1
     ede:	0c f4       	brge	.+2      	; 0xee2 <DIO_voidSetPinValue+0x6c>
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <DIO_voidSetPinValue+0xea>
     ee2:	2d 81       	ldd	r18, Y+5	; 0x05
     ee4:	3e 81       	ldd	r19, Y+6	; 0x06
     ee6:	26 30       	cpi	r18, 0x06	; 6
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_voidSetPinValue+0x78>
     eec:	54 c0       	rjmp	.+168    	; 0xf96 <DIO_voidSetPinValue+0x120>
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	87 30       	cpi	r24, 0x07	; 7
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_voidSetPinValue+0x84>
     ef8:	5d c0       	rjmp	.+186    	; 0xfb4 <DIO_voidSetPinValue+0x13e>
     efa:	68 c0       	rjmp	.+208    	; 0xfcc <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	89 2b       	or	r24, r25
     f0e:	82 83       	std	Z+2, r24	; 0x02
     f10:	5d c0       	rjmp	.+186    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	98 2f       	mov	r25, r24
     f1e:	99 0f       	add	r25, r25
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	89 2b       	or	r24, r25
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	51 c0       	rjmp	.+162    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	81 70       	andi	r24, 0x01	; 1
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	81 70       	andi	r24, 0x01	; 1
     f34:	98 2f       	mov	r25, r24
     f36:	99 0f       	add	r25, r25
     f38:	99 0f       	add	r25, r25
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	89 2b       	or	r24, r25
     f40:	82 83       	std	Z+2, r24	; 0x02
     f42:	44 c0       	rjmp	.+136    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 70       	andi	r24, 0x01	; 1
     f4e:	98 2f       	mov	r25, r24
     f50:	99 0f       	add	r25, r25
     f52:	99 0f       	add	r25, r25
     f54:	99 0f       	add	r25, r25
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	89 2b       	or	r24, r25
     f5c:	82 83       	std	Z+2, r24	; 0x02
     f5e:	36 c0       	rjmp	.+108    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	98 2f       	mov	r25, r24
     f6c:	92 95       	swap	r25
     f6e:	90 7f       	andi	r25, 0xF0	; 240
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	89 2b       	or	r24, r25
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	29 c0       	rjmp	.+82     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	98 2f       	mov	r25, r24
     f86:	92 95       	swap	r25
     f88:	99 0f       	add	r25, r25
     f8a:	90 7e       	andi	r25, 0xE0	; 224
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	89 2b       	or	r24, r25
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	81 70       	andi	r24, 0x01	; 1
     fa0:	98 2f       	mov	r25, r24
     fa2:	92 95       	swap	r25
     fa4:	99 0f       	add	r25, r25
     fa6:	99 0f       	add	r25, r25
     fa8:	90 7c       	andi	r25, 0xC0	; 192
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	89 2b       	or	r24, r25
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	98 2f       	mov	r25, r24
     fbe:	97 95       	ror	r25
     fc0:	99 27       	eor	r25, r25
     fc2:	97 95       	ror	r25
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	8f 77       	andi	r24, 0x7F	; 127
     fc8:	89 2b       	or	r24, r25
     fca:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
     fcc:	26 96       	adiw	r28, 0x06	; 6
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_voidGetPinValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_voidGetPinValue+0x8>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_voidGetPinValue+0xa>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9b 83       	std	Y+3, r25	; 0x03
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3e 83       	std	Y+6, r19	; 0x06
     ffc:	2d 83       	std	Y+5, r18	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_voidGetPinValue+0x2c>
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <DIO_voidGetPinValue+0xa8>
    100a:	2d 81       	ldd	r18, Y+5	; 0x05
    100c:	3e 81       	ldd	r19, Y+6	; 0x06
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	7c f4       	brge	.+30     	; 0x1032 <DIO_voidGetPinValue+0x54>
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	29 f1       	breq	.+74     	; 0x1068 <DIO_voidGetPinValue+0x8a>
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	3c f5       	brge	.+78     	; 0x1076 <DIO_voidGetPinValue+0x98>
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	b1 f0       	breq	.+44     	; 0x105c <DIO_voidGetPinValue+0x7e>
    1030:	55 c0       	rjmp	.+170    	; 0x10dc <DIO_voidGetPinValue+0xfe>
    1032:	2d 81       	ldd	r18, Y+5	; 0x05
    1034:	3e 81       	ldd	r19, Y+6	; 0x06
    1036:	25 30       	cpi	r18, 0x05	; 5
    1038:	31 05       	cpc	r19, r1
    103a:	b1 f1       	breq	.+108    	; 0x10a8 <DIO_voidGetPinValue+0xca>
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	91 05       	cpc	r25, r1
    1044:	4c f1       	brlt	.+82     	; 0x1098 <DIO_voidGetPinValue+0xba>
    1046:	2d 81       	ldd	r18, Y+5	; 0x05
    1048:	3e 81       	ldd	r19, Y+6	; 0x06
    104a:	26 30       	cpi	r18, 0x06	; 6
    104c:	31 05       	cpc	r19, r1
    104e:	a9 f1       	breq	.+106    	; 0x10ba <DIO_voidGetPinValue+0xdc>
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f1       	breq	.+116    	; 0x10ce <DIO_voidGetPinValue+0xf0>
    105a:	40 c0       	rjmp	.+128    	; 0x10dc <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	80 81       	ld	r24, Z
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	3a c0       	rjmp	.+116    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	80 81       	ld	r24, Z
    106e:	86 95       	lsr	r24
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	33 c0       	rjmp	.+102    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	86 95       	lsr	r24
    107e:	86 95       	lsr	r24
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	2b c0       	rjmp	.+86     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1086:	ea 81       	ldd	r30, Y+2	; 0x02
    1088:	fb 81       	ldd	r31, Y+3	; 0x03
    108a:	80 81       	ld	r24, Z
    108c:	86 95       	lsr	r24
    108e:	86 95       	lsr	r24
    1090:	86 95       	lsr	r24
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	22 c0       	rjmp	.+68     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 81       	ld	r24, Z
    109e:	82 95       	swap	r24
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	1a c0       	rjmp	.+52     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	80 81       	ld	r24, Z
    10ae:	82 95       	swap	r24
    10b0:	86 95       	lsr	r24
    10b2:	87 70       	andi	r24, 0x07	; 7
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 81       	ld	r24, Z
    10c0:	82 95       	swap	r24
    10c2:	86 95       	lsr	r24
    10c4:	86 95       	lsr	r24
    10c6:	83 70       	andi	r24, 0x03	; 3
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 81       	ld	r24, Z
    10d4:	88 1f       	adc	r24, r24
    10d6:	88 27       	eor	r24, r24
    10d8:	88 1f       	adc	r24, r24
    10da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10de:	26 96       	adiw	r28, 0x06	; 6
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_voidSetPortDirection+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 83       	std	Z+1, r24	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_voidSetPortValue+0x6>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	82 83       	std	Z+2, r24	; 0x02
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_voidGetPortValue+0x6>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 81       	ld	r24, Z
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <SPI_Init>:
#include "inc/SPI_priv.h"
#include "avr/interrupt.h"


void SPI_Init(SPI_ConfigType *SPI_config)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <SPI_Init+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	 * CPOL     SCK is low or high when idle
	 * CPHA     Sample Data with the raising or falling edge
	 * SPR1:0   Choose SPI clock prescale
	 ***********************************************************************/

	SPI_BASE->SPCR_t.Reg = (SPI_config->interrupt <<SPIE) | (1<<SPE) | (SPI_config->data_order <<DORD) | (SPI_config->data_order <<DORD) | (SPI_config->polarity <<CPOL) | (SPI_config->phase <<CPHA) | (SPI_config->prescalar <<SPR0);
    1168:	ad e2       	ldi	r26, 0x2D	; 45
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e9 81       	ldd	r30, Y+1	; 0x01
    116e:	fa 81       	ldd	r31, Y+2	; 0x02
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	96 95       	lsr	r25
    1178:	98 2f       	mov	r25, r24
    117a:	88 27       	eor	r24, r24
    117c:	97 95       	ror	r25
    117e:	87 95       	ror	r24
    1180:	28 2f       	mov	r18, r24
    1182:	20 64       	ori	r18, 0x40	; 64
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	81 81       	ldd	r24, Z+1	; 0x01
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	82 95       	swap	r24
    1194:	92 95       	swap	r25
    1196:	90 7f       	andi	r25, 0xF0	; 240
    1198:	98 27       	eor	r25, r24
    119a:	80 7f       	andi	r24, 0xF0	; 240
    119c:	98 27       	eor	r25, r24
    119e:	28 2b       	or	r18, r24
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	81 81       	ldd	r24, Z+1	; 0x01
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	82 95       	swap	r24
    11b0:	92 95       	swap	r25
    11b2:	90 7f       	andi	r25, 0xF0	; 240
    11b4:	98 27       	eor	r25, r24
    11b6:	80 7f       	andi	r24, 0xF0	; 240
    11b8:	98 27       	eor	r25, r24
    11ba:	28 2b       	or	r18, r24
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	83 81       	ldd	r24, Z+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	28 2b       	or	r18, r24
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	92 2f       	mov	r25, r18
    11e8:	98 2b       	or	r25, r24
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	85 81       	ldd	r24, Z+5	; 0x05
    11f0:	89 2b       	or	r24, r25
    11f2:	8c 93       	st	X, r24

	/* SPI2X bit in SPSR controls double speed so if prescalar is 128 and ds enabled it's 64 */
	SPI_BASE->SPSR_t.Reg = ((SPI_BASE->SPSR_t.Reg & 0xFE) |(SPI_config->ds<<SPI2X));
    11f4:	ad e2       	ldi	r26, 0x2D	; 45
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	ed e2       	ldi	r30, 0x2D	; 45
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	81 81       	ldd	r24, Z+1	; 0x01
    11fe:	98 2f       	mov	r25, r24
    1200:	9e 7f       	andi	r25, 0xFE	; 254
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	89 2b       	or	r24, r25
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	8c 93       	st	X, r24
    120e:	11 97       	sbiw	r26, 0x01	; 1

}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <SPI_sendReceiveByte>:

uint8 SPI_sendReceiveByte(uint8 copyu8data)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = copyu8data;
    1226:	ef e2       	ldi	r30, 0x2F	; 47
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    122e:	ee e2       	ldi	r30, 0x2E	; 46
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 23       	and	r24, r24
    1236:	dc f7       	brge	.-10     	; 0x122e <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    1238:	ef e2       	ldi	r30, 0x2F	; 47
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
}
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <SPI_sendString>:

void SPI_sendString(const uint8 *str)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <SPI_sendString+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <SPI_sendString+0x8>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1256:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	0f c0       	rjmp	.+30     	; 0x127a <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	fc 01       	movw	r30, r24
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	80 81       	ld	r24, Z
    126e:	0e 94 0d 09 	call	0x121a	; 0x121a <SPI_sendReceiveByte>
    1272:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	fc 01       	movw	r30, r24
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	80 81       	ld	r24, Z
    128c:	88 23       	and	r24, r24
    128e:	31 f7       	brne	.-52     	; 0x125c <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <SPI_receiveString>:


void SPI_receiveString(uint8 *str)
{
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <SPI_receiveString+0xa>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9b 83       	std	Y+3, r25	; 0x03
    12b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    12b2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	8c 01       	movw	r16, r24
    12c0:	02 0f       	add	r16, r18
    12c2:	13 1f       	adc	r17, r19
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	0e 94 0d 09 	call	0x121a	; 0x121a <SPI_sendReceiveByte>
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 83       	st	Z, r24
    12ce:	10 c0       	rjmp	.+32     	; 0x12f0 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	8c 01       	movw	r16, r24
    12e2:	02 0f       	add	r16, r18
    12e4:	13 1f       	adc	r17, r19
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	0e 94 0d 09 	call	0x121a	; 0x121a <SPI_sendReceiveByte>
    12ec:	f8 01       	movw	r30, r16
    12ee:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	fc 01       	movw	r30, r24
    12fc:	e2 0f       	add	r30, r18
    12fe:	f3 1f       	adc	r31, r19
    1300:	80 81       	ld	r24, Z
    1302:	83 32       	cpi	r24, 0x23	; 35
    1304:	29 f7       	brne	.-54     	; 0x12d0 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	fc 01       	movw	r30, r24
    1312:	e2 0f       	add	r30, r18
    1314:	f3 1f       	adc	r31, r19
    1316:	10 82       	st	Z, r1
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret

00001328 <TWI_Init>:
#include "inc/TWI_priv.h"
#include "avr/interrupt.h"


Error_Status TWI_Init(TWI_ConfigType *TWI_config)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <TWI_Init+0x6>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
	// frequency = cpu_clk / (16 + 2*(TWBR)*(2^TWSR))
	TWI_BASE->TWBR_t.Reg = 0x02;
    1338:	e0 e2       	ldi	r30, 0x20	; 32
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	80 83       	st	Z, r24

	// clearing TWSR reg for the status bits and setting the prescalar bits
	TWI_BASE->TWSR_t.Reg = 0;
    1340:	e0 e2       	ldi	r30, 0x20	; 32
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	11 82       	std	Z+1, r1	; 0x01
	TWI_BASE->TWSR_t.Reg |= TWI_config->prescale<<TWPS0;
    1346:	a0 e2       	ldi	r26, 0x20	; 32
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e0 e2       	ldi	r30, 0x20	; 32
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	e9 81       	ldd	r30, Y+1	; 0x01
    1352:	fa 81       	ldd	r31, Y+2	; 0x02
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	89 2b       	or	r24, r25
    1358:	11 96       	adiw	r26, 0x01	; 1
    135a:	8c 93       	st	X, r24
    135c:	11 97       	sbiw	r26, 0x01	; 1

	if(TWI_config->general_call == TWI_GC_ENABLE)
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	49 f4       	brne	.+18     	; 0x137a <TWI_Init+0x52>
	{
		// TWGCE bit for general call and the rest 7 bits for the slave address
		TWI_BASE->TWAR_t.Reg = (TWI_config->general_call<<TWGCE);
    1368:	e0 e2       	ldi	r30, 0x20	; 32
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	a9 81       	ldd	r26, Y+1	; 0x01
    136e:	ba 81       	ldd	r27, Y+2	; 0x02
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	8c 91       	ld	r24, X
    1374:	12 97       	sbiw	r26, 0x02	; 2
    1376:	82 83       	std	Z+2, r24	; 0x02
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <TWI_Init+0x70>
	}
	else
	{
		if(TWI_config->slave_address>127)
    137a:	e9 81       	ldd	r30, Y+1	; 0x01
    137c:	fa 81       	ldd	r31, Y+2	; 0x02
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	88 23       	and	r24, r24
    1382:	14 f4       	brge	.+4      	; 0x1388 <TWI_Init+0x60>
		{
			return OUT_OF_RANGE;
    1384:	1b 82       	std	Y+3, r1	; 0x03
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <TWI_Init+0x86>
		}
		else
		{
			TWI_BASE->TWAR_t.Reg = (TWI_config->slave_address<<TWA0);
    1388:	a0 e2       	ldi	r26, 0x20	; 32
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e9 81       	ldd	r30, Y+1	; 0x01
    138e:	fa 81       	ldd	r31, Y+2	; 0x02
    1390:	83 81       	ldd	r24, Z+3	; 0x03
    1392:	88 0f       	add	r24, r24
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	8c 93       	st	X, r24
		}
	}

	//TWIE to set the interrupt enable according to the config /TWEA to set acknowledge / TWEN to enable the TWI
	TWI_BASE->TWCR_t.Reg = (TWI_config->interrupt<<TWIE) |  (1<<TWEN);
    1398:	a0 e2       	ldi	r26, 0x20	; 32
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	80 81       	ld	r24, Z
    13a2:	84 60       	ori	r24, 0x04	; 4
    13a4:	d8 96       	adiw	r26, 0x38	; 56
    13a6:	8c 93       	st	X, r24
    13a8:	d8 97       	sbiw	r26, 0x38	; 56

	return NO_ERROR;
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <TWI_sendByte>:


void TWI_sendByte(uint8 copy_u8data)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	//put the data in the TWDR data register
	TWI_BASE->TWDR_t.Reg = copy_u8data;
    13c8:	e0 e2       	ldi	r30, 0x20	; 32
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	83 83       	std	Z+3, r24	; 0x03


	/* clear the TWINT flag by setting the bit before sending the data
	 * enable the TWI module by setting TWEN
	 */
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1 << TWEN);
    13d0:	e0 e2       	ldi	r30, 0x20	; 32
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	84 e8       	ldi	r24, 0x84	; 132
    13d6:	80 af       	std	Z+56, r24	; 0x38

	// wait foe the TWINT flag to know that data is sent successfully
	while(BIT_IS_CLEAR(TWI_BASE->TWCR_t.Reg,TWINT));
    13d8:	e0 e2       	ldi	r30, 0x20	; 32
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 ad       	ldd	r24, Z+56	; 0x38
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <TWI_sendByte+0x1c>

}
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <TWI_sendStart>:


void TWI_sendStart(void)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	/* clear the TWINT flag by setting the bit before sending the data
	 * send the start bit by setting TWSTA bit
	 * enable the TWI module by setting TWEN
	 */
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    13f2:	e0 e2       	ldi	r30, 0x20	; 32
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	84 ea       	ldi	r24, 0xA4	; 164
    13f8:	80 af       	std	Z+56, r24	; 0x38

	// wait foe the TWINT flag to know that start bit is sent successfully
	while(BIT_IS_CLEAR(TWI_BASE->TWCR_t.Reg,TWINT));
    13fa:	e0 e2       	ldi	r30, 0x20	; 32
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 ad       	ldd	r24, Z+56	; 0x38
    1400:	88 23       	and	r24, r24
    1402:	dc f7       	brge	.-10     	; 0x13fa <TWI_sendStart+0x10>
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <TWI_sendStop>:


void TWI_sendStop(void)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	/* clear the TWINT flag by setting the bit before sending the data
	 * send the stop bit by setting TWSTO bit
	 * enable the TWI module by setting TWEN
	 */
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1412:	e0 e2       	ldi	r30, 0x20	; 32
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	84 e9       	ldi	r24, 0x94	; 148
    1418:	80 af       	std	Z+56, r24	; 0x38

	// wait foe the TWINT flag to know that stop bit is sent successfully
	while(BIT_IS_CLEAR(TWI_BASE->TWCR_t.Reg,TWINT));
    141a:	e0 e2       	ldi	r30, 0x20	; 32
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 ad       	ldd	r24, Z+56	; 0x38
    1420:	88 23       	and	r24, r24
    1422:	dc f7       	brge	.-10     	; 0x141a <TWI_sendStop+0x10>
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <TWI_recieveByteWithACK>:


uint8 TWI_recieveByteWithACK()
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62


	/* clear the TWINT flag by setting the bit before sending the data
	 * enable the TWI module by setting TWEN
	 */
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1<<TWEA) | (1 << TWEN);
    1432:	e0 e2       	ldi	r30, 0x20	; 32
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	84 ec       	ldi	r24, 0xC4	; 196
    1438:	80 af       	std	Z+56, r24	; 0x38

	// wait foe the TWINT flag to know that data is sent successfully
	while(BIT_IS_CLEAR(TWI_BASE->TWCR_t.Reg,TWINT));
    143a:	e0 e2       	ldi	r30, 0x20	; 32
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 ad       	ldd	r24, Z+56	; 0x38
    1440:	88 23       	and	r24, r24
    1442:	dc f7       	brge	.-10     	; 0x143a <TWI_recieveByteWithACK+0x10>

	/* Read Data */
	return TWI_BASE->TWDR_t.Reg;
    1444:	e0 e2       	ldi	r30, 0x20	; 32
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	83 81       	ldd	r24, Z+3	; 0x03
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <TWI_recieveByteWithNACK>:


uint8 TWI_recieveByteWithNACK()
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62


	/* clear the TWINT flag by setting the bit before sending the data
	 * enable the TWI module by setting TWEN
	 */
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1 << TWEN);
    1458:	e0 e2       	ldi	r30, 0x20	; 32
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	84 e8       	ldi	r24, 0x84	; 132
    145e:	80 af       	std	Z+56, r24	; 0x38

	// wait foe the TWINT flag to know that data is sent successfully
	while(BIT_IS_CLEAR(TWI_BASE->TWCR_t.Reg,TWINT));
    1460:	e0 e2       	ldi	r30, 0x20	; 32
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 ad       	ldd	r24, Z+56	; 0x38
    1466:	88 23       	and	r24, r24
    1468:	dc f7       	brge	.-10     	; 0x1460 <TWI_recieveByteWithNACK+0x10>

	/* Read Data */
	return TWI_BASE->TWDR_t.Reg;
    146a:	e0 e2       	ldi	r30, 0x20	; 32
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	83 81       	ldd	r24, Z+3	; 0x03
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <TWI_getStatus>:


uint8 TWI_getStatus(void)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWI_BASE->TWSR_t.Reg & TWI_STATUS_MASK;
    1480:	e0 e2       	ldi	r30, 0x20	; 32
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	81 81       	ldd	r24, Z+1	; 0x01
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	89 83       	std	Y+1, r24	; 0x01
	return status;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <TWI_receiveByteAsynchCallBack>:

static void (*P_TWI_CallBack)(void) = NULL_PTR;


uint8 TWI_receiveByteAsynchCallBack()
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	TWI_BASE->TWCR_t.Reg = (1 << TWINT) | (1 << TWEN);
    149c:	e0 e2       	ldi	r30, 0x20	; 32
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	84 e8       	ldi	r24, 0x84	; 132
    14a2:	80 af       	std	Z+56, r24	; 0x38
	return TWI_BASE->TWDR_t.Reg;
    14a4:	e0 e2       	ldi	r30, 0x20	; 32
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	83 81       	ldd	r24, Z+3	; 0x03
}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <TWI_SetCallBack>:


void TWI_SetCallBack(void(*TWI_receiveByteAsynchCallBack)(void))
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <TWI_SetCallBack+0x6>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01

	P_TWI_CallBack = TWI_receiveByteAsynchCallBack;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	90 93 87 00 	sts	0x0087, r25
    14c6:	80 93 86 00 	sts	0x0086, r24
	SREG |= (1<<7);
    14ca:	af e5       	ldi	r26, 0x5F	; 95
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ef e5       	ldi	r30, 0x5F	; 95
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	8c 93       	st	X, r24
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <__vector_19>:

ISR(TWI_vect)
{
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	if(P_TWI_CallBack != NULL_PTR)
    150c:	80 91 86 00 	lds	r24, 0x0086
    1510:	90 91 87 00 	lds	r25, 0x0087
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <__vector_19+0x4e>
	{
		SREG &= ~(1<<7);
    1518:	af e5       	ldi	r26, 0x5F	; 95
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ef e5       	ldi	r30, 0x5F	; 95
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8f 77       	andi	r24, 0x7F	; 127
    1524:	8c 93       	st	X, r24
		P_TWI_CallBack();
    1526:	e0 91 86 00 	lds	r30, 0x0086
    152a:	f0 91 87 00 	lds	r31, 0x0087
    152e:	09 95       	icall
	}

}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <UART_init>:
#include "inc/USART_priv.h"
#include "avr/interrupt.h"


void UART_init()
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <UART_init+0x6>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	uint16 ubrr_value = 0;
    1560:	1a 82       	std	Y+2, r1	; 0x02
    1562:	19 82       	std	Y+1, r1	; 0x01
	/* U2X = 1 for double transmission speed */
	USART_BASE->UCSRA_t.Reg = (1<<U2X);
    1564:	e9 e2       	ldi	r30, 0x29	; 41
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	82 83       	std	Z+2, r24	; 0x02
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	USART_BASE->UCSRB_t.Reg = (1<<RXEN) | (1<<TXEN);
    156c:	e9 e2       	ldi	r30, 0x29	; 41
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	88 e1       	ldi	r24, 0x18	; 24
    1572:	81 83       	std	Z+1, r24	; 0x01
	 * UPM1:0  = parity mode
	 * USBS    = stop bit select
	 * UCSZ2:0 = data size select
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	USART_BASE->UCSRC_t.Reg = (1<<URSEL) |(USART_MODE_SELECT<<UMSEL) | (USART_PARITY_SELECT<<UPM0) | (USART_STOP_BIT_SELECT<<USBS) | (USART_CHAR_SIZE<<UCSZ0);
    1574:	e9 e2       	ldi	r30, 0x29	; 41
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	86 e8       	ldi	r24, 0x86	; 134
    157a:	87 8b       	std	Z+23, r24	; 0x17
#if (USART_MODE_SELECT == 1) // this bit is used in synchronous mode only
	USART_BASE->UCSRC_t.Reg |= (USART_CLK_POLARITY_SELECT<<UCPOL);
#endif


	ubrr_value = (uint16)(((F_CPU_t / (BUAD_RATE * 8UL))) - 1);
    157c:	87 e6       	ldi	r24, 0x67	; 103
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01

	USART_BASE->UBRRH_t.Reg = ubrr_value>>8;
    1584:	e9 e2       	ldi	r30, 0x29	; 41
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	89 2f       	mov	r24, r25
    158e:	99 27       	eor	r25, r25
    1590:	80 8f       	std	Z+24, r24	; 0x18
	USART_BASE->UBRRL_t.Reg = ubrr_value;
    1592:	e9 e2       	ldi	r30, 0x29	; 41
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	80 83       	st	Z, r24

}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <UART_sendByte>:


void UART_sendByte(const uint8 Copy_u8Data)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(USART_BASE->UCSRA_t.Reg,UDRE)){}
    15b0:	e9 e2       	ldi	r30, 0x29	; 41
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	80 72       	andi	r24, 0x20	; 32
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	b9 f3       	breq	.-18     	; 0x15b0 <UART_sendByte+0xc>

	USART_BASE->UDR_t.Reg = Copy_u8Data;
    15c2:	e9 e2       	ldi	r30, 0x29	; 41
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	83 83       	std	Z+3, r24	; 0x03
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <UART_sendString+0x6>
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	9b 83       	std	Y+3, r25	; 0x03
    15e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	0e c0       	rjmp	.+28     	; 0x1602 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	fc 01       	movw	r30, r24
    15f2:	e2 0f       	add	r30, r18
    15f4:	f3 1f       	adc	r31, r19
    15f6:	80 81       	ld	r24, Z
    15f8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <UART_sendByte>
		i++;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	9b 81       	ldd	r25, Y+3	; 0x03
    160c:	fc 01       	movw	r30, r24
    160e:	e2 0f       	add	r30, r18
    1610:	f3 1f       	adc	r31, r19
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	39 f7       	brne	.-50     	; 0x15e6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <UART_receiveByteSynchNonBlocking>:

uint8 UART_receiveByteSynchNonBlocking()
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(USART_BASE->UCSRA_t.Reg,RXC)){}
    162c:	e9 e2       	ldi	r30, 0x29	; 41
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	88 23       	and	r24, r24
    1634:	dc f7       	brge	.-10     	; 0x162c <UART_receiveByteSynchNonBlocking+0x8>

	return USART_BASE->UDR_t.Reg;
    1636:	e9 e2       	ldi	r30, 0x29	; 41
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	83 81       	ldd	r24, Z+3	; 0x03
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <UART_receiveByteAsynchCallBack>:

uint8 UART_receiveByteAsynchCallBack()
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62

	return USART_BASE->UDR_t.Reg;
    164a:	e9 e2       	ldi	r30, 0x29	; 41
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	83 81       	ldd	r24, Z+3	; 0x03
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <UART_SetCallBack>:

static void (*P_UART_CallBack)(void) = NULL_PTR;


void UART_SetCallBack(void(*UART_receiveByteAsynchCallBack)(void))
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <UART_SetCallBack+0x6>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
	P_UART_CallBack = UART_receiveByteAsynchCallBack;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	90 93 89 00 	sts	0x0089, r25
    166c:	80 93 88 00 	sts	0x0088, r24
}
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <__vector_13>:

ISR(USART_RXC_vect)
{
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	if(P_UART_CallBack != NULL_PTR)
    16a4:	80 91 88 00 	lds	r24, 0x0088
    16a8:	90 91 89 00 	lds	r25, 0x0089
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <__vector_13+0x4e>
	{
		SREG &= ~(1<<7);
    16b0:	af e5       	ldi	r26, 0x5F	; 95
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ef e5       	ldi	r30, 0x5F	; 95
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 77       	andi	r24, 0x7F	; 127
    16bc:	8c 93       	st	X, r24
		P_UART_CallBack();
    16be:	e0 91 88 00 	lds	r30, 0x0088
    16c2:	f0 91 89 00 	lds	r31, 0x0089
    16c6:	09 95       	icall
	}

}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <TIM0_SetCallBack>:

static void (*P_TIM0_CallBack)(void) = NULL_PTR;


void TIM0_SetCallBack(void(*Ptr2Func)(void))
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <TIM0_SetCallBack+0x6>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
	P_TIM0_CallBack = Ptr2Func;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	90 93 8b 00 	sts	0x008B, r25
    1704:	80 93 8a 00 	sts	0x008A, r24
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM0_CallBack != NULL_PTR)
    173c:	80 91 8a 00 	lds	r24, 0x008A
    1740:	90 91 8b 00 	lds	r25, 0x008B
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	61 f0       	breq	.+24     	; 0x1760 <__vector_11+0x4e>
	{
		SREG &= ~(1<<7);
    1748:	af e5       	ldi	r26, 0x5F	; 95
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	ef e5       	ldi	r30, 0x5F	; 95
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 77       	andi	r24, 0x7F	; 127
    1754:	8c 93       	st	X, r24
		P_TIM0_CallBack();
    1756:	e0 91 8a 00 	lds	r30, 0x008A
    175a:	f0 91 8b 00 	lds	r31, 0x008B
    175e:	09 95       	icall
	}

}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	ff 91       	pop	r31
    1766:	ef 91       	pop	r30
    1768:	bf 91       	pop	r27
    176a:	af 91       	pop	r26
    176c:	9f 91       	pop	r25
    176e:	8f 91       	pop	r24
    1770:	7f 91       	pop	r23
    1772:	6f 91       	pop	r22
    1774:	5f 91       	pop	r21
    1776:	4f 91       	pop	r20
    1778:	3f 91       	pop	r19
    177a:	2f 91       	pop	r18
    177c:	0f 90       	pop	r0
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	0f 90       	pop	r0
    1782:	1f 90       	pop	r1
    1784:	18 95       	reti

00001786 <Timer0_Init>:


Error_Status Timer0_Init(TIM0_ConfigType *TIM0_config)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <Timer0_Init+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <Timer0_Init+0x8>
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01

	switch(TIM0_config->mode)
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3d 83       	std	Y+5, r19	; 0x05
    17a4:	2c 83       	std	Y+4, r18	; 0x04
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	b1 f1       	breq	.+108    	; 0x181c <Timer0_Init+0x96>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <Timer0_Init+0x3e>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	71 f0       	breq	.+28     	; 0x17de <Timer0_Init+0x58>
    17c2:	80 c0       	rjmp	.+256    	; 0x18c4 <Timer0_Init+0x13e>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <Timer0_Init+0x4a>
    17ce:	40 c0       	rjmp	.+128    	; 0x1850 <Timer0_Init+0xca>
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	83 30       	cpi	r24, 0x03	; 3
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <Timer0_Init+0x56>
    17da:	5b c0       	rjmp	.+182    	; 0x1892 <Timer0_Init+0x10c>
    17dc:	73 c0       	rjmp	.+230    	; 0x18c4 <Timer0_Init+0x13e>
	{
	case NORMAL:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    17de:	a2 e5       	ldi	r26, 0x52	; 82
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e2 e5       	ldi	r30, 0x52	; 82
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	80 68       	ori	r24, 0x80	; 128
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    17ee:	a2 e5       	ldi	r26, 0x52	; 82
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e5       	ldi	r30, 0x52	; 82
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	81 81       	ldd	r24, Z+1	; 0x01
    17f8:	87 7f       	andi	r24, 0xF7	; 247
    17fa:	11 96       	adiw	r26, 0x01	; 1
    17fc:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    17fe:	a2 e5       	ldi	r26, 0x52	; 82
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e2 e5       	ldi	r30, 0x52	; 82
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	81 81       	ldd	r24, Z+1	; 0x01
    1808:	8f 7b       	andi	r24, 0xBF	; 191
    180a:	11 96       	adiw	r26, 0x01	; 1
    180c:	8c 93       	st	X, r24
		TIM0_BASE->TCNT0_t.Reg = TIM0_config->reload;
    180e:	a2 e5       	ldi	r26, 0x52	; 82
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e9 81       	ldd	r30, Y+1	; 0x01
    1814:	fa 81       	ldd	r31, Y+2	; 0x02
    1816:	83 81       	ldd	r24, Z+3	; 0x03
    1818:	8c 93       	st	X, r24
    181a:	54 c0       	rjmp	.+168    	; 0x18c4 <Timer0_Init+0x13e>
		break;
	case PHASE_CORRECT_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    181c:	a2 e5       	ldi	r26, 0x52	; 82
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e2 e5       	ldi	r30, 0x52	; 82
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	81 81       	ldd	r24, Z+1	; 0x01
    1826:	8f 77       	andi	r24, 0x7F	; 127
    1828:	11 96       	adiw	r26, 0x01	; 1
    182a:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    182c:	a2 e5       	ldi	r26, 0x52	; 82
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e5       	ldi	r30, 0x52	; 82
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	81 81       	ldd	r24, Z+1	; 0x01
    1836:	87 7f       	andi	r24, 0xF7	; 247
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    183c:	a2 e5       	ldi	r26, 0x52	; 82
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e2 e5       	ldi	r30, 0x52	; 82
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	81 81       	ldd	r24, Z+1	; 0x01
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	11 96       	adiw	r26, 0x01	; 1
    184a:	8c 93       	st	X, r24
    184c:	11 97       	sbiw	r26, 0x01	; 1
    184e:	3a c0       	rjmp	.+116    	; 0x18c4 <Timer0_Init+0x13e>
		break;
	case CTC:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    1850:	a2 e5       	ldi	r26, 0x52	; 82
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e2 e5       	ldi	r30, 0x52	; 82
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	81 81       	ldd	r24, Z+1	; 0x01
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	11 96       	adiw	r26, 0x01	; 1
    185e:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    1860:	a2 e5       	ldi	r26, 0x52	; 82
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e2 e5       	ldi	r30, 0x52	; 82
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	81 81       	ldd	r24, Z+1	; 0x01
    186a:	88 60       	ori	r24, 0x08	; 8
    186c:	11 96       	adiw	r26, 0x01	; 1
    186e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    1870:	a2 e5       	ldi	r26, 0x52	; 82
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e2 e5       	ldi	r30, 0x52	; 82
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	81 81       	ldd	r24, Z+1	; 0x01
    187a:	8f 7b       	andi	r24, 0xBF	; 191
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	8c 93       	st	X, r24
		TIM0_BASE->OCR0_t.Reg = TIM0_config->compare;
    1880:	a2 e5       	ldi	r26, 0x52	; 82
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e9 81       	ldd	r30, Y+1	; 0x01
    1886:	fa 81       	ldd	r31, Y+2	; 0x02
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	1a 96       	adiw	r26, 0x0a	; 10
    188c:	8c 93       	st	X, r24
    188e:	1a 97       	sbiw	r26, 0x0a	; 10
    1890:	19 c0       	rjmp	.+50     	; 0x18c4 <Timer0_Init+0x13e>
		break;
	case FAST_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    1892:	a2 e5       	ldi	r26, 0x52	; 82
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e2 e5       	ldi	r30, 0x52	; 82
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	81 81       	ldd	r24, Z+1	; 0x01
    189c:	8f 77       	andi	r24, 0x7F	; 127
    189e:	11 96       	adiw	r26, 0x01	; 1
    18a0:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    18a2:	a2 e5       	ldi	r26, 0x52	; 82
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e2 e5       	ldi	r30, 0x52	; 82
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	81 81       	ldd	r24, Z+1	; 0x01
    18ac:	88 60       	ori	r24, 0x08	; 8
    18ae:	11 96       	adiw	r26, 0x01	; 1
    18b0:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    18b2:	a2 e5       	ldi	r26, 0x52	; 82
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e2 e5       	ldi	r30, 0x52	; 82
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	81 81       	ldd	r24, Z+1	; 0x01
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	8c 93       	st	X, r24
    18c2:	11 97       	sbiw	r26, 0x01	; 1
		break;
	}
	if(((TIM0_config->mode == PHASE_CORRECT_PWM) || (TIM0_config->mode == FAST_PWM)) && (TIM0_config->COM == NON_PWM_TOGGLE))
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	80 81       	ld	r24, Z
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	29 f0       	breq	.+10     	; 0x18d8 <Timer0_Init+0x152>
    18ce:	e9 81       	ldd	r30, Y+1	; 0x01
    18d0:	fa 81       	ldd	r31, Y+2	; 0x02
    18d2:	80 81       	ld	r24, Z
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	39 f4       	brne	.+14     	; 0x18e6 <Timer0_Init+0x160>
    18d8:	e9 81       	ldd	r30, Y+1	; 0x01
    18da:	fa 81       	ldd	r31, Y+2	; 0x02
    18dc:	81 81       	ldd	r24, Z+1	; 0x01
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <Timer0_Init+0x160>
	{
		return OUT_OF_RANGE;
    18e2:	1b 82       	std	Y+3, r1	; 0x03
    18e4:	25 c0       	rjmp	.+74     	; 0x1930 <Timer0_Init+0x1aa>
	}
	else
	{
		TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xCF) | TIM0_config->COM << COM00);
    18e6:	a2 e5       	ldi	r26, 0x52	; 82
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e2 e5       	ldi	r30, 0x52	; 82
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	81 81       	ldd	r24, Z+1	; 0x01
    18f0:	28 2f       	mov	r18, r24
    18f2:	2f 7c       	andi	r18, 0xCF	; 207
    18f4:	e9 81       	ldd	r30, Y+1	; 0x01
    18f6:	fa 81       	ldd	r31, Y+2	; 0x02
    18f8:	81 81       	ldd	r24, Z+1	; 0x01
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	82 95       	swap	r24
    1900:	92 95       	swap	r25
    1902:	90 7f       	andi	r25, 0xF0	; 240
    1904:	98 27       	eor	r25, r24
    1906:	80 7f       	andi	r24, 0xF0	; 240
    1908:	98 27       	eor	r25, r24
    190a:	82 2b       	or	r24, r18
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	8c 93       	st	X, r24
	}
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    1910:	a2 e5       	ldi	r26, 0x52	; 82
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e5       	ldi	r30, 0x52	; 82
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	98 2f       	mov	r25, r24
    191c:	98 7f       	andi	r25, 0xF8	; 248
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	84 81       	ldd	r24, Z+4	; 0x04
    1924:	89 2b       	or	r24, r25
    1926:	11 96       	adiw	r26, 0x01	; 1
    1928:	8c 93       	st	X, r24
    192a:	11 97       	sbiw	r26, 0x01	; 1

	return NO_ERROR;
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	9b 83       	std	Y+3, r25	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <Timer0_start>:


void Timer0_start(TIM0_ConfigType *TIM0_config)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <Timer0_start+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    1950:	a2 e5       	ldi	r26, 0x52	; 82
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e2 e5       	ldi	r30, 0x52	; 82
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	81 81       	ldd	r24, Z+1	; 0x01
    195a:	98 2f       	mov	r25, r24
    195c:	98 7f       	andi	r25, 0xF8	; 248
    195e:	e9 81       	ldd	r30, Y+1	; 0x01
    1960:	fa 81       	ldd	r31, Y+2	; 0x02
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	89 2b       	or	r24, r25
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	8c 93       	st	X, r24
    196a:	11 97       	sbiw	r26, 0x01	; 1
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <Timer0_stop>:

void Timer0_stop()
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	TIM0_BASE->TCCR0_t.Reg &= 0xF8;
    197e:	a2 e5       	ldi	r26, 0x52	; 82
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e2 e5       	ldi	r30, 0x52	; 82
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	81 81       	ldd	r24, Z+1	; 0x01
    1988:	88 7f       	andi	r24, 0xF8	; 248
    198a:	11 96       	adiw	r26, 0x01	; 1
    198c:	8c 93       	st	X, r24
    198e:	11 97       	sbiw	r26, 0x01	; 1
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <Timer0_GetCounts>:

void Timer0_GetCounts()
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <Timer0_SetDelayTimeMilliSecond>:

void Timer0_SetDelayTimeMilliSecond()
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <Timer0_EnableInt>:

void Timer0_EnableInt(TIM0_ConfigType *TIM0_config,void(*Ptr2Func)(void))
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <Timer0_EnableInt+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <Timer0_EnableInt+0x8>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <Timer0_EnableInt+0xa>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	7c 83       	std	Y+4, r23	; 0x04
    19c6:	6b 83       	std	Y+3, r22	; 0x03
	SREG &=  ~(1<<7);
    19c8:	af e5       	ldi	r26, 0x5F	; 95
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ef e5       	ldi	r30, 0x5F	; 95
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 77       	andi	r24, 0x7F	; 127
    19d4:	8c 93       	st	X, r24
	switch(TIM0_config->mode)
    19d6:	e9 81       	ldd	r30, Y+1	; 0x01
    19d8:	fa 81       	ldd	r31, Y+2	; 0x02
    19da:	80 81       	ld	r24, Z
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	3e 83       	std	Y+6, r19	; 0x06
    19e2:	2d 83       	std	Y+5, r18	; 0x05
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <Timer0_EnableInt+0x46>
    19ec:	2d 81       	ldd	r18, Y+5	; 0x05
    19ee:	3e 81       	ldd	r19, Y+6	; 0x06
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	49 f0       	breq	.+18     	; 0x1a08 <Timer0_EnableInt+0x56>
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <Timer0_EnableInt+0x64>
	{
	case NORMAL:
		SET_BIT(TIMSK,TOIE0);
    19f8:	a9 e5       	ldi	r26, 0x59	; 89
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e9 e5       	ldi	r30, 0x59	; 89
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	81 60       	ori	r24, 0x01	; 1
    1a04:	8c 93       	st	X, r24
    1a06:	07 c0       	rjmp	.+14     	; 0x1a16 <Timer0_EnableInt+0x64>
		break;
	case CTC:
		SET_BIT(TIMSK,OCIE0);
    1a08:	a9 e5       	ldi	r26, 0x59	; 89
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e9 e5       	ldi	r30, 0x59	; 89
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	82 60       	ori	r24, 0x02	; 2
    1a14:	8c 93       	st	X, r24
		break;
	}
	TIM0_SetCallBack(*Ptr2Func);
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TIM0_SetCallBack>
	SREG |= (1<<7);
    1a1e:	af e5       	ldi	r26, 0x5F	; 95
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ef e5       	ldi	r30, 0x5F	; 95
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 68       	ori	r24, 0x80	; 128
    1a2a:	8c 93       	st	X, r24
}
    1a2c:	26 96       	adiw	r28, 0x06	; 6
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <Timer0_DisableInt>:

void Timer0_DisableInt()
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    1a46:	a9 e5       	ldi	r26, 0x59	; 89
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e9 e5       	ldi	r30, 0x59	; 89
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8e 7f       	andi	r24, 0xFE	; 254
    1a52:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    1a54:	a9 e5       	ldi	r26, 0x59	; 89
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e9 e5       	ldi	r30, 0x59	; 89
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8d 7f       	andi	r24, 0xFD	; 253
    1a60:	8c 93       	st	X, r24
}
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <Timer0_setFastPWM>:

Error_Status Timer0_setFastPWM(uint8 duty,TIM0_ConfigType *TIM0_config)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	2f 97       	sbiw	r28, 0x0f	; 15
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	7b 83       	std	Y+3, r23	; 0x03
    1a80:	6a 83       	std	Y+2, r22	; 0x02
	if(duty>=0 || duty<=100)
	{
		TIM0_BASE->OCR0_t.Reg  = abs (((duty*256)/100)-1);
    1a82:	82 e5       	ldi	r24, 0x52	; 82
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9f 87       	std	Y+15, r25	; 0x0f
    1a88:	8e 87       	std	Y+14, r24	; 0x0e
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	98 2f       	mov	r25, r24
    1a92:	88 27       	eor	r24, r24
    1a94:	24 e6       	ldi	r18, 0x64	; 100
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	b9 01       	movw	r22, r18
    1a9a:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9d 87       	std	Y+13, r25	; 0x0d
    1aa4:	8c 87       	std	Y+12, r24	; 0x0c
    1aa6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1aa8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1aaa:	ff 23       	and	r31, r31
    1aac:	3c f4       	brge	.+14     	; 0x1abc <Timer0_setFastPWM+0x54>
    1aae:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ab2:	90 95       	com	r25
    1ab4:	81 95       	neg	r24
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	9d 87       	std	Y+13, r25	; 0x0d
    1aba:	8c 87       	std	Y+12, r24	; 0x0c
    1abc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1abe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ac0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ac2:	82 87       	std	Z+10, r24	; 0x0a

		if(TIM0_config->COM == CLEAR_COM)
    1ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac8:	81 81       	ldd	r24, Z+1	; 0x01
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	71 f5       	brne	.+92     	; 0x1b2a <Timer0_setFastPWM+0xc2>
		{
			TIM0_BASE->OCR0_t.Reg  = abs (((duty*255)/100)-1);
    1ace:	82 e5       	ldi	r24, 0x52	; 82
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9b 87       	std	Y+11, r25	; 0x0b
    1ad4:	8a 87       	std	Y+10, r24	; 0x0a
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	48 2f       	mov	r20, r24
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	ca 01       	movw	r24, r20
    1ade:	9c 01       	movw	r18, r24
    1ae0:	22 0f       	add	r18, r18
    1ae2:	33 1f       	adc	r19, r19
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	96 95       	lsr	r25
    1ae8:	98 2f       	mov	r25, r24
    1aea:	88 27       	eor	r24, r24
    1aec:	97 95       	ror	r25
    1aee:	87 95       	ror	r24
    1af0:	82 1b       	sub	r24, r18
    1af2:	93 0b       	sbc	r25, r19
    1af4:	84 0f       	add	r24, r20
    1af6:	95 1f       	adc	r25, r21
    1af8:	24 e6       	ldi	r18, 0x64	; 100
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	b9 01       	movw	r22, r18
    1afe:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
    1b02:	cb 01       	movw	r24, r22
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	99 87       	std	Y+9, r25	; 0x09
    1b08:	88 87       	std	Y+8, r24	; 0x08
    1b0a:	e8 85       	ldd	r30, Y+8	; 0x08
    1b0c:	f9 85       	ldd	r31, Y+9	; 0x09
    1b0e:	ff 23       	and	r31, r31
    1b10:	3c f4       	brge	.+14     	; 0x1b20 <Timer0_setFastPWM+0xb8>
    1b12:	88 85       	ldd	r24, Y+8	; 0x08
    1b14:	99 85       	ldd	r25, Y+9	; 0x09
    1b16:	90 95       	com	r25
    1b18:	81 95       	neg	r24
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	99 87       	std	Y+9, r25	; 0x09
    1b1e:	88 87       	std	Y+8, r24	; 0x08
    1b20:	88 85       	ldd	r24, Y+8	; 0x08
    1b22:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b24:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b26:	82 87       	std	Z+10, r24	; 0x0a
    1b28:	2a c0       	rjmp	.+84     	; 0x1b7e <Timer0_setFastPWM+0x116>
		}
		else if(TIM0_config->COM == SET_COM)
    1b2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b2e:	81 81       	ldd	r24, Z+1	; 0x01
    1b30:	83 30       	cpi	r24, 0x03	; 3
    1b32:	29 f5       	brne	.+74     	; 0x1b7e <Timer0_setFastPWM+0x116>
		{
			TIM0_BASE->OCR0_t.Reg  = abs(255-((duty*256)/100));
    1b34:	82 e5       	ldi	r24, 0x52	; 82
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9f 83       	std	Y+7, r25	; 0x07
    1b3a:	8e 83       	std	Y+6, r24	; 0x06
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	98 2f       	mov	r25, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	24 e6       	ldi	r18, 0x64	; 100
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	b9 01       	movw	r22, r18
    1b4c:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 01       	movw	r18, r24
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	82 1b       	sub	r24, r18
    1b5a:	93 0b       	sbc	r25, r19
    1b5c:	9d 83       	std	Y+5, r25	; 0x05
    1b5e:	8c 83       	std	Y+4, r24	; 0x04
    1b60:	ec 81       	ldd	r30, Y+4	; 0x04
    1b62:	fd 81       	ldd	r31, Y+5	; 0x05
    1b64:	ff 23       	and	r31, r31
    1b66:	3c f4       	brge	.+14     	; 0x1b76 <Timer0_setFastPWM+0x10e>
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	90 95       	com	r25
    1b6e:	81 95       	neg	r24
    1b70:	9f 4f       	sbci	r25, 0xFF	; 255
    1b72:	9d 83       	std	Y+5, r25	; 0x05
    1b74:	8c 83       	std	Y+4, r24	; 0x04
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	ee 81       	ldd	r30, Y+6	; 0x06
    1b7a:	ff 81       	ldd	r31, Y+7	; 0x07
    1b7c:	82 87       	std	Z+10, r24	; 0x0a
	else
	{
		return OUT_OF_RANGE;
	}

	return NO_ERROR;
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
}
    1b80:	2f 96       	adiw	r28, 0x0f	; 15
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <setphaseCorrectPWM>:


void setphaseCorrectPWM(uint8 duty)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01


	TIM0_BASE->OCR0_t.Reg  = (duty*255)/100;
    1b9e:	e2 e5       	ldi	r30, 0x52	; 82
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	ca 01       	movw	r24, r20
    1baa:	9c 01       	movw	r18, r24
    1bac:	22 0f       	add	r18, r18
    1bae:	33 1f       	adc	r19, r19
    1bb0:	c9 01       	movw	r24, r18
    1bb2:	96 95       	lsr	r25
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	88 27       	eor	r24, r24
    1bb8:	97 95       	ror	r25
    1bba:	87 95       	ror	r24
    1bbc:	82 1b       	sub	r24, r18
    1bbe:	93 0b       	sbc	r25, r19
    1bc0:	84 0f       	add	r24, r20
    1bc2:	95 1f       	adc	r25, r21
    1bc4:	24 e6       	ldi	r18, 0x64	; 100
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	b9 01       	movw	r22, r18
    1bca:	0e 94 a7 1c 	call	0x394e	; 0x394e <__divmodhi4>
    1bce:	cb 01       	movw	r24, r22
    1bd0:	82 87       	std	Z+10, r24	; 0x0a

}
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <TIM1_SetCallBack>:

static void (*P_TIM1_CallBack)(void) = NULL_PTR;


void TIM1_SetCallBack(void(*Ptr2Func)(void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <TIM1_SetCallBack+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
	P_TIM1_CallBack = Ptr2Func;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	90 93 8d 00 	sts	0x008D, r25
    1bf0:	80 93 8c 00 	sts	0x008C, r24
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	2f 93       	push	r18
    1c0a:	3f 93       	push	r19
    1c0c:	4f 93       	push	r20
    1c0e:	5f 93       	push	r21
    1c10:	6f 93       	push	r22
    1c12:	7f 93       	push	r23
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	af 93       	push	r26
    1c1a:	bf 93       	push	r27
    1c1c:	ef 93       	push	r30
    1c1e:	ff 93       	push	r31
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM1_CallBack != NULL_PTR)
    1c28:	80 91 8c 00 	lds	r24, 0x008C
    1c2c:	90 91 8d 00 	lds	r25, 0x008D
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <__vector_9+0x4e>
	{
		SREG &= ~(1<<7);
    1c34:	af e5       	ldi	r26, 0x5F	; 95
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ef e5       	ldi	r30, 0x5F	; 95
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 77       	andi	r24, 0x7F	; 127
    1c40:	8c 93       	st	X, r24
		P_TIM1_CallBack();
    1c42:	e0 91 8c 00 	lds	r30, 0x008C
    1c46:	f0 91 8d 00 	lds	r31, 0x008D
    1c4a:	09 95       	icall
	}

}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <TIM1_ICU_SetCallBack>:

static void (*P_TIM1_ICU_CallBack)(void) = NULL_PTR;


void TIM1_ICU_SetCallBack(void(*Ptr2Func)(void))
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <TIM1_ICU_SetCallBack+0x6>
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	P_TIM1_ICU_CallBack = Ptr2Func;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	9a 81       	ldd	r25, Y+2	; 0x02
    1c84:	90 93 8f 00 	sts	0x008F, r25
    1c88:	80 93 8e 00 	sts	0x008E, r24
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	2f 93       	push	r18
    1ca2:	3f 93       	push	r19
    1ca4:	4f 93       	push	r20
    1ca6:	5f 93       	push	r21
    1ca8:	6f 93       	push	r22
    1caa:	7f 93       	push	r23
    1cac:	8f 93       	push	r24
    1cae:	9f 93       	push	r25
    1cb0:	af 93       	push	r26
    1cb2:	bf 93       	push	r27
    1cb4:	ef 93       	push	r30
    1cb6:	ff 93       	push	r31
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM1_ICU_CallBack != NULL_PTR)
    1cc0:	80 91 8e 00 	lds	r24, 0x008E
    1cc4:	90 91 8f 00 	lds	r25, 0x008F
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <__vector_6+0x4e>
	{
		SREG &= ~(1<<7);
    1ccc:	af e5       	ldi	r26, 0x5F	; 95
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ef e5       	ldi	r30, 0x5F	; 95
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8f 77       	andi	r24, 0x7F	; 127
    1cd8:	8c 93       	st	X, r24
		P_TIM1_ICU_CallBack();
    1cda:	e0 91 8e 00 	lds	r30, 0x008E
    1cde:	f0 91 8f 00 	lds	r31, 0x008F
    1ce2:	09 95       	icall
	}

}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	ff 91       	pop	r31
    1cea:	ef 91       	pop	r30
    1cec:	bf 91       	pop	r27
    1cee:	af 91       	pop	r26
    1cf0:	9f 91       	pop	r25
    1cf2:	8f 91       	pop	r24
    1cf4:	7f 91       	pop	r23
    1cf6:	6f 91       	pop	r22
    1cf8:	5f 91       	pop	r21
    1cfa:	4f 91       	pop	r20
    1cfc:	3f 91       	pop	r19
    1cfe:	2f 91       	pop	r18
    1d00:	0f 90       	pop	r0
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	0f 90       	pop	r0
    1d06:	1f 90       	pop	r1
    1d08:	18 95       	reti

00001d0a <Timer1_Init>:

Error_Status Timer1_Init(TIM1_ConfigType *TIM1_config)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <Timer1_Init+0x6>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <Timer1_Init+0x8>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01

	switch(TIM1_config->mode)
    1d1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1e:	80 81       	ld	r24, Z
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3c 83       	std	Y+4, r19	; 0x04
    1d26:	2b 83       	std	Y+3, r18	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	86 30       	cpi	r24, 0x06	; 6
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <Timer1_Init+0x2a>
    1d32:	38 c1       	rjmp	.+624    	; 0x1fa4 <Timer1_Init+0x29a>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	27 30       	cpi	r18, 0x07	; 7
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	24 f5       	brge	.+72     	; 0x1d86 <Timer1_Init+0x7c>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <Timer1_Init+0x40>
    1d48:	9c c0       	rjmp	.+312    	; 0x1e82 <Timer1_Init+0x178>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	23 30       	cpi	r18, 0x03	; 3
    1d50:	31 05       	cpc	r19, r1
    1d52:	64 f4       	brge	.+24     	; 0x1d6c <Timer1_Init+0x62>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <Timer1_Init+0x54>
    1d5c:	45 c0       	rjmp	.+138    	; 0x1de8 <Timer1_Init+0xde>
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	21 30       	cpi	r18, 0x01	; 1
    1d64:	31 05       	cpc	r19, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <Timer1_Init+0x60>
    1d68:	6a c0       	rjmp	.+212    	; 0x1e3e <Timer1_Init+0x134>
    1d6a:	34 c2       	rjmp	.+1128   	; 0x21d4 <Timer1_Init+0x4ca>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	84 30       	cpi	r24, 0x04	; 4
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <Timer1_Init+0x6e>
    1d76:	c9 c0       	rjmp	.+402    	; 0x1f0a <Timer1_Init+0x200>
    1d78:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7c:	25 30       	cpi	r18, 0x05	; 5
    1d7e:	31 05       	cpc	r19, r1
    1d80:	0c f0       	brlt	.+2      	; 0x1d84 <Timer1_Init+0x7a>
    1d82:	ee c0       	rjmp	.+476    	; 0x1f60 <Timer1_Init+0x256>
    1d84:	a0 c0       	rjmp	.+320    	; 0x1ec6 <Timer1_Init+0x1bc>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	8b 30       	cpi	r24, 0x0B	; 11
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <Timer1_Init+0x88>
    1d90:	91 c1       	rjmp	.+802    	; 0x20b4 <Timer1_Init+0x3aa>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	2c 30       	cpi	r18, 0x0C	; 12
    1d98:	31 05       	cpc	r19, r1
    1d9a:	9c f4       	brge	.+38     	; 0x1dc2 <Timer1_Init+0xb8>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	89 30       	cpi	r24, 0x09	; 9
    1da2:	91 05       	cpc	r25, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <Timer1_Init+0x9e>
    1da6:	42 c1       	rjmp	.+644    	; 0x202c <Timer1_Init+0x322>
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	2a 30       	cpi	r18, 0x0A	; 10
    1dae:	31 05       	cpc	r19, r1
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <Timer1_Init+0xaa>
    1db2:	5e c1       	rjmp	.+700    	; 0x2070 <Timer1_Init+0x366>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	88 30       	cpi	r24, 0x08	; 8
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <Timer1_Init+0xb6>
    1dbe:	14 c1       	rjmp	.+552    	; 0x1fe8 <Timer1_Init+0x2de>
    1dc0:	09 c2       	rjmp	.+1042   	; 0x21d4 <Timer1_Init+0x4ca>
    1dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc6:	2e 30       	cpi	r18, 0x0E	; 14
    1dc8:	31 05       	cpc	r19, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <Timer1_Init+0xc4>
    1dcc:	c0 c1       	rjmp	.+896    	; 0x214e <Timer1_Init+0x444>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	8f 30       	cpi	r24, 0x0F	; 15
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <Timer1_Init+0xd0>
    1dd8:	dc c1       	rjmp	.+952    	; 0x2192 <Timer1_Init+0x488>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	2c 30       	cpi	r18, 0x0C	; 12
    1de0:	31 05       	cpc	r19, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <Timer1_Init+0xdc>
    1de4:	89 c1       	rjmp	.+786    	; 0x20f8 <Timer1_Init+0x3ee>
    1de6:	f6 c1       	rjmp	.+1004   	; 0x21d4 <Timer1_Init+0x4ca>
	{
	case TIM1_NORMAL:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1de8:	a6 e4       	ldi	r26, 0x46	; 70
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e6 e4       	ldi	r30, 0x46	; 70
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	81 85       	ldd	r24, Z+9	; 0x09
    1df2:	8e 7f       	andi	r24, 0xFE	; 254
    1df4:	19 96       	adiw	r26, 0x09	; 9
    1df6:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1df8:	a6 e4       	ldi	r26, 0x46	; 70
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e6 e4       	ldi	r30, 0x46	; 70
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	81 85       	ldd	r24, Z+9	; 0x09
    1e02:	8d 7f       	andi	r24, 0xFD	; 253
    1e04:	19 96       	adiw	r26, 0x09	; 9
    1e06:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1e08:	a6 e4       	ldi	r26, 0x46	; 70
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e6 e4       	ldi	r30, 0x46	; 70
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	81 85       	ldd	r24, Z+9	; 0x09
    1e12:	87 7f       	andi	r24, 0xF7	; 247
    1e14:	19 96       	adiw	r26, 0x09	; 9
    1e16:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1e18:	a6 e4       	ldi	r26, 0x46	; 70
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e6 e4       	ldi	r30, 0x46	; 70
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	81 85       	ldd	r24, Z+9	; 0x09
    1e22:	8f 7e       	andi	r24, 0xEF	; 239
    1e24:	19 96       	adiw	r26, 0x09	; 9
    1e26:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->reload;
    1e28:	a6 e4       	ldi	r26, 0x46	; 70
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e30:	84 81       	ldd	r24, Z+4	; 0x04
    1e32:	95 81       	ldd	r25, Z+5	; 0x05
    1e34:	17 96       	adiw	r26, 0x07	; 7
    1e36:	9c 93       	st	X, r25
    1e38:	8e 93       	st	-X, r24
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	cb c1       	rjmp	.+918    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC8:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1e3e:	a6 e4       	ldi	r26, 0x46	; 70
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e6 e4       	ldi	r30, 0x46	; 70
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	81 85       	ldd	r24, Z+9	; 0x09
    1e48:	81 60       	ori	r24, 0x01	; 1
    1e4a:	19 96       	adiw	r26, 0x09	; 9
    1e4c:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1e4e:	a6 e4       	ldi	r26, 0x46	; 70
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e4       	ldi	r30, 0x46	; 70
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	81 85       	ldd	r24, Z+9	; 0x09
    1e58:	8d 7f       	andi	r24, 0xFD	; 253
    1e5a:	19 96       	adiw	r26, 0x09	; 9
    1e5c:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1e5e:	a6 e4       	ldi	r26, 0x46	; 70
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e6 e4       	ldi	r30, 0x46	; 70
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	81 85       	ldd	r24, Z+9	; 0x09
    1e68:	87 7f       	andi	r24, 0xF7	; 247
    1e6a:	19 96       	adiw	r26, 0x09	; 9
    1e6c:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1e6e:	a6 e4       	ldi	r26, 0x46	; 70
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e6 e4       	ldi	r30, 0x46	; 70
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	81 85       	ldd	r24, Z+9	; 0x09
    1e78:	8f 7e       	andi	r24, 0xEF	; 239
    1e7a:	19 96       	adiw	r26, 0x09	; 9
    1e7c:	8c 93       	st	X, r24
    1e7e:	19 97       	sbiw	r26, 0x09	; 9
    1e80:	a9 c1       	rjmp	.+850    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC9:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1e82:	a6 e4       	ldi	r26, 0x46	; 70
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e6 e4       	ldi	r30, 0x46	; 70
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	81 85       	ldd	r24, Z+9	; 0x09
    1e8c:	8e 7f       	andi	r24, 0xFE	; 254
    1e8e:	19 96       	adiw	r26, 0x09	; 9
    1e90:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1e92:	a6 e4       	ldi	r26, 0x46	; 70
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e6 e4       	ldi	r30, 0x46	; 70
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	81 85       	ldd	r24, Z+9	; 0x09
    1e9c:	82 60       	ori	r24, 0x02	; 2
    1e9e:	19 96       	adiw	r26, 0x09	; 9
    1ea0:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1ea2:	a6 e4       	ldi	r26, 0x46	; 70
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e6 e4       	ldi	r30, 0x46	; 70
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	81 85       	ldd	r24, Z+9	; 0x09
    1eac:	87 7f       	andi	r24, 0xF7	; 247
    1eae:	19 96       	adiw	r26, 0x09	; 9
    1eb0:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1eb2:	a6 e4       	ldi	r26, 0x46	; 70
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e6 e4       	ldi	r30, 0x46	; 70
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	81 85       	ldd	r24, Z+9	; 0x09
    1ebc:	8f 7e       	andi	r24, 0xEF	; 239
    1ebe:	19 96       	adiw	r26, 0x09	; 9
    1ec0:	8c 93       	st	X, r24
    1ec2:	19 97       	sbiw	r26, 0x09	; 9
    1ec4:	87 c1       	rjmp	.+782    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC10:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1ec6:	a6 e4       	ldi	r26, 0x46	; 70
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e6 e4       	ldi	r30, 0x46	; 70
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	81 85       	ldd	r24, Z+9	; 0x09
    1ed0:	81 60       	ori	r24, 0x01	; 1
    1ed2:	19 96       	adiw	r26, 0x09	; 9
    1ed4:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1ed6:	a6 e4       	ldi	r26, 0x46	; 70
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e6 e4       	ldi	r30, 0x46	; 70
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	81 85       	ldd	r24, Z+9	; 0x09
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	19 96       	adiw	r26, 0x09	; 9
    1ee4:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1ee6:	a6 e4       	ldi	r26, 0x46	; 70
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e6 e4       	ldi	r30, 0x46	; 70
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	81 85       	ldd	r24, Z+9	; 0x09
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	19 96       	adiw	r26, 0x09	; 9
    1ef4:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1ef6:	a6 e4       	ldi	r26, 0x46	; 70
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e6 e4       	ldi	r30, 0x46	; 70
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	81 85       	ldd	r24, Z+9	; 0x09
    1f00:	8f 7e       	andi	r24, 0xEF	; 239
    1f02:	19 96       	adiw	r26, 0x09	; 9
    1f04:	8c 93       	st	X, r24
    1f06:	19 97       	sbiw	r26, 0x09	; 9
    1f08:	65 c1       	rjmp	.+714    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_CTC_OCR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1f0a:	a6 e4       	ldi	r26, 0x46	; 70
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e6 e4       	ldi	r30, 0x46	; 70
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	81 85       	ldd	r24, Z+9	; 0x09
    1f14:	8e 7f       	andi	r24, 0xFE	; 254
    1f16:	19 96       	adiw	r26, 0x09	; 9
    1f18:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1f1a:	a6 e4       	ldi	r26, 0x46	; 70
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e6 e4       	ldi	r30, 0x46	; 70
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	81 85       	ldd	r24, Z+9	; 0x09
    1f24:	8d 7f       	andi	r24, 0xFD	; 253
    1f26:	19 96       	adiw	r26, 0x09	; 9
    1f28:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1f2a:	a6 e4       	ldi	r26, 0x46	; 70
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e6 e4       	ldi	r30, 0x46	; 70
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	81 85       	ldd	r24, Z+9	; 0x09
    1f34:	88 60       	ori	r24, 0x08	; 8
    1f36:	19 96       	adiw	r26, 0x09	; 9
    1f38:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1f3a:	a6 e4       	ldi	r26, 0x46	; 70
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e6 e4       	ldi	r30, 0x46	; 70
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	81 85       	ldd	r24, Z+9	; 0x09
    1f44:	8f 7e       	andi	r24, 0xEF	; 239
    1f46:	19 96       	adiw	r26, 0x09	; 9
    1f48:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->compare;
    1f4a:	a6 e4       	ldi	r26, 0x46	; 70
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f50:	fa 81       	ldd	r31, Y+2	; 0x02
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	17 96       	adiw	r26, 0x07	; 7
    1f58:	9c 93       	st	X, r25
    1f5a:	8e 93       	st	-X, r24
    1f5c:	16 97       	sbiw	r26, 0x06	; 6
    1f5e:	3a c1       	rjmp	.+628    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_8:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1f60:	a6 e4       	ldi	r26, 0x46	; 70
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 e4       	ldi	r30, 0x46	; 70
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	81 85       	ldd	r24, Z+9	; 0x09
    1f6a:	81 60       	ori	r24, 0x01	; 1
    1f6c:	19 96       	adiw	r26, 0x09	; 9
    1f6e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1f70:	a6 e4       	ldi	r26, 0x46	; 70
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e6 e4       	ldi	r30, 0x46	; 70
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	81 85       	ldd	r24, Z+9	; 0x09
    1f7a:	8d 7f       	andi	r24, 0xFD	; 253
    1f7c:	19 96       	adiw	r26, 0x09	; 9
    1f7e:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1f80:	a6 e4       	ldi	r26, 0x46	; 70
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e4       	ldi	r30, 0x46	; 70
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	81 85       	ldd	r24, Z+9	; 0x09
    1f8a:	88 60       	ori	r24, 0x08	; 8
    1f8c:	19 96       	adiw	r26, 0x09	; 9
    1f8e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1f90:	a6 e4       	ldi	r26, 0x46	; 70
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e6 e4       	ldi	r30, 0x46	; 70
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	81 85       	ldd	r24, Z+9	; 0x09
    1f9a:	8f 7e       	andi	r24, 0xEF	; 239
    1f9c:	19 96       	adiw	r26, 0x09	; 9
    1f9e:	8c 93       	st	X, r24
    1fa0:	19 97       	sbiw	r26, 0x09	; 9
    1fa2:	18 c1       	rjmp	.+560    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_9:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1fa4:	a6 e4       	ldi	r26, 0x46	; 70
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e6 e4       	ldi	r30, 0x46	; 70
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	81 85       	ldd	r24, Z+9	; 0x09
    1fae:	8e 7f       	andi	r24, 0xFE	; 254
    1fb0:	19 96       	adiw	r26, 0x09	; 9
    1fb2:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1fb4:	a6 e4       	ldi	r26, 0x46	; 70
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e6 e4       	ldi	r30, 0x46	; 70
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	81 85       	ldd	r24, Z+9	; 0x09
    1fbe:	82 60       	ori	r24, 0x02	; 2
    1fc0:	19 96       	adiw	r26, 0x09	; 9
    1fc2:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    1fc4:	a6 e4       	ldi	r26, 0x46	; 70
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e6 e4       	ldi	r30, 0x46	; 70
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	81 85       	ldd	r24, Z+9	; 0x09
    1fce:	88 60       	ori	r24, 0x08	; 8
    1fd0:	19 96       	adiw	r26, 0x09	; 9
    1fd2:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    1fd4:	a6 e4       	ldi	r26, 0x46	; 70
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e6 e4       	ldi	r30, 0x46	; 70
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	81 85       	ldd	r24, Z+9	; 0x09
    1fde:	8f 7e       	andi	r24, 0xEF	; 239
    1fe0:	19 96       	adiw	r26, 0x09	; 9
    1fe2:	8c 93       	st	X, r24
    1fe4:	19 97       	sbiw	r26, 0x09	; 9
    1fe6:	f6 c0       	rjmp	.+492    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PFC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    1fe8:	a6 e4       	ldi	r26, 0x46	; 70
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e6 e4       	ldi	r30, 0x46	; 70
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	81 85       	ldd	r24, Z+9	; 0x09
    1ff2:	8e 7f       	andi	r24, 0xFE	; 254
    1ff4:	19 96       	adiw	r26, 0x09	; 9
    1ff6:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    1ff8:	a6 e4       	ldi	r26, 0x46	; 70
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e6 e4       	ldi	r30, 0x46	; 70
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	81 85       	ldd	r24, Z+9	; 0x09
    2002:	8d 7f       	andi	r24, 0xFD	; 253
    2004:	19 96       	adiw	r26, 0x09	; 9
    2006:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    2008:	a6 e4       	ldi	r26, 0x46	; 70
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e6 e4       	ldi	r30, 0x46	; 70
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	81 85       	ldd	r24, Z+9	; 0x09
    2012:	87 7f       	andi	r24, 0xF7	; 247
    2014:	19 96       	adiw	r26, 0x09	; 9
    2016:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    2018:	a6 e4       	ldi	r26, 0x46	; 70
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e6 e4       	ldi	r30, 0x46	; 70
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	81 85       	ldd	r24, Z+9	; 0x09
    2022:	80 61       	ori	r24, 0x10	; 16
    2024:	19 96       	adiw	r26, 0x09	; 9
    2026:	8c 93       	st	X, r24
    2028:	19 97       	sbiw	r26, 0x09	; 9
    202a:	d4 c0       	rjmp	.+424    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PFC_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    202c:	a6 e4       	ldi	r26, 0x46	; 70
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e6 e4       	ldi	r30, 0x46	; 70
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	81 85       	ldd	r24, Z+9	; 0x09
    2036:	81 60       	ori	r24, 0x01	; 1
    2038:	19 96       	adiw	r26, 0x09	; 9
    203a:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    203c:	a6 e4       	ldi	r26, 0x46	; 70
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e6 e4       	ldi	r30, 0x46	; 70
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	81 85       	ldd	r24, Z+9	; 0x09
    2046:	8d 7f       	andi	r24, 0xFD	; 253
    2048:	19 96       	adiw	r26, 0x09	; 9
    204a:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    204c:	a6 e4       	ldi	r26, 0x46	; 70
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e4       	ldi	r30, 0x46	; 70
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	81 85       	ldd	r24, Z+9	; 0x09
    2056:	87 7f       	andi	r24, 0xF7	; 247
    2058:	19 96       	adiw	r26, 0x09	; 9
    205a:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    205c:	a6 e4       	ldi	r26, 0x46	; 70
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e4       	ldi	r30, 0x46	; 70
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	81 85       	ldd	r24, Z+9	; 0x09
    2066:	80 61       	ori	r24, 0x10	; 16
    2068:	19 96       	adiw	r26, 0x09	; 9
    206a:	8c 93       	st	X, r24
    206c:	19 97       	sbiw	r26, 0x09	; 9
    206e:	b2 c0       	rjmp	.+356    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    2070:	a6 e4       	ldi	r26, 0x46	; 70
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e6 e4       	ldi	r30, 0x46	; 70
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	81 85       	ldd	r24, Z+9	; 0x09
    207a:	8e 7f       	andi	r24, 0xFE	; 254
    207c:	19 96       	adiw	r26, 0x09	; 9
    207e:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    2080:	a6 e4       	ldi	r26, 0x46	; 70
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e6 e4       	ldi	r30, 0x46	; 70
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	81 85       	ldd	r24, Z+9	; 0x09
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	19 96       	adiw	r26, 0x09	; 9
    208e:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    2090:	a6 e4       	ldi	r26, 0x46	; 70
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e6 e4       	ldi	r30, 0x46	; 70
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	81 85       	ldd	r24, Z+9	; 0x09
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	19 96       	adiw	r26, 0x09	; 9
    209e:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    20a0:	a6 e4       	ldi	r26, 0x46	; 70
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e4       	ldi	r30, 0x46	; 70
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	81 85       	ldd	r24, Z+9	; 0x09
    20aa:	80 61       	ori	r24, 0x10	; 16
    20ac:	19 96       	adiw	r26, 0x09	; 9
    20ae:	8c 93       	st	X, r24
    20b0:	19 97       	sbiw	r26, 0x09	; 9
    20b2:	90 c0       	rjmp	.+288    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_PWM_PC_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    20b4:	a6 e4       	ldi	r26, 0x46	; 70
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e6 e4       	ldi	r30, 0x46	; 70
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	81 85       	ldd	r24, Z+9	; 0x09
    20be:	81 60       	ori	r24, 0x01	; 1
    20c0:	19 96       	adiw	r26, 0x09	; 9
    20c2:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    20c4:	a6 e4       	ldi	r26, 0x46	; 70
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e6 e4       	ldi	r30, 0x46	; 70
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	81 85       	ldd	r24, Z+9	; 0x09
    20ce:	82 60       	ori	r24, 0x02	; 2
    20d0:	19 96       	adiw	r26, 0x09	; 9
    20d2:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    20d4:	a6 e4       	ldi	r26, 0x46	; 70
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e6 e4       	ldi	r30, 0x46	; 70
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	81 85       	ldd	r24, Z+9	; 0x09
    20de:	87 7f       	andi	r24, 0xF7	; 247
    20e0:	19 96       	adiw	r26, 0x09	; 9
    20e2:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    20e4:	a6 e4       	ldi	r26, 0x46	; 70
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e6 e4       	ldi	r30, 0x46	; 70
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	81 85       	ldd	r24, Z+9	; 0x09
    20ee:	80 61       	ori	r24, 0x10	; 16
    20f0:	19 96       	adiw	r26, 0x09	; 9
    20f2:	8c 93       	st	X, r24
    20f4:	19 97       	sbiw	r26, 0x09	; 9
    20f6:	6e c0       	rjmp	.+220    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_CTC_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    20f8:	a6 e4       	ldi	r26, 0x46	; 70
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e6 e4       	ldi	r30, 0x46	; 70
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	81 85       	ldd	r24, Z+9	; 0x09
    2102:	8e 7f       	andi	r24, 0xFE	; 254
    2104:	19 96       	adiw	r26, 0x09	; 9
    2106:	8c 93       	st	X, r24
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    2108:	a6 e4       	ldi	r26, 0x46	; 70
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e6 e4       	ldi	r30, 0x46	; 70
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	81 85       	ldd	r24, Z+9	; 0x09
    2112:	8d 7f       	andi	r24, 0xFD	; 253
    2114:	19 96       	adiw	r26, 0x09	; 9
    2116:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    2118:	a6 e4       	ldi	r26, 0x46	; 70
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e6 e4       	ldi	r30, 0x46	; 70
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	81 85       	ldd	r24, Z+9	; 0x09
    2122:	88 60       	ori	r24, 0x08	; 8
    2124:	19 96       	adiw	r26, 0x09	; 9
    2126:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    2128:	a6 e4       	ldi	r26, 0x46	; 70
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e6 e4       	ldi	r30, 0x46	; 70
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	81 85       	ldd	r24, Z+9	; 0x09
    2132:	80 61       	ori	r24, 0x10	; 16
    2134:	19 96       	adiw	r26, 0x09	; 9
    2136:	8c 93       	st	X, r24
		TIM1_BASE->TCNT1_t = TIM1_config->compare;
    2138:	a6 e4       	ldi	r26, 0x46	; 70
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 81       	ldd	r30, Y+1	; 0x01
    213e:	fa 81       	ldd	r31, Y+2	; 0x02
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	17 96       	adiw	r26, 0x07	; 7
    2146:	9c 93       	st	X, r25
    2148:	8e 93       	st	-X, r24
    214a:	16 97       	sbiw	r26, 0x06	; 6
    214c:	43 c0       	rjmp	.+134    	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_ICR:
		CLEAR_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    214e:	a6 e4       	ldi	r26, 0x46	; 70
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e6 e4       	ldi	r30, 0x46	; 70
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	81 85       	ldd	r24, Z+9	; 0x09
    2158:	8e 7f       	andi	r24, 0xFE	; 254
    215a:	19 96       	adiw	r26, 0x09	; 9
    215c:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    215e:	a6 e4       	ldi	r26, 0x46	; 70
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e6 e4       	ldi	r30, 0x46	; 70
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	81 85       	ldd	r24, Z+9	; 0x09
    2168:	82 60       	ori	r24, 0x02	; 2
    216a:	19 96       	adiw	r26, 0x09	; 9
    216c:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    216e:	a6 e4       	ldi	r26, 0x46	; 70
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e6 e4       	ldi	r30, 0x46	; 70
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	81 85       	ldd	r24, Z+9	; 0x09
    2178:	88 60       	ori	r24, 0x08	; 8
    217a:	19 96       	adiw	r26, 0x09	; 9
    217c:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    217e:	a6 e4       	ldi	r26, 0x46	; 70
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e4       	ldi	r30, 0x46	; 70
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	81 85       	ldd	r24, Z+9	; 0x09
    2188:	80 61       	ori	r24, 0x10	; 16
    218a:	19 96       	adiw	r26, 0x09	; 9
    218c:	8c 93       	st	X, r24
    218e:	19 97       	sbiw	r26, 0x09	; 9
    2190:	21 c0       	rjmp	.+66     	; 0x21d4 <Timer1_Init+0x4ca>
		break;
	case TIM1_FAST_PWM_OCR:
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM10);
    2192:	a6 e4       	ldi	r26, 0x46	; 70
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e6 e4       	ldi	r30, 0x46	; 70
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	81 85       	ldd	r24, Z+9	; 0x09
    219c:	81 60       	ori	r24, 0x01	; 1
    219e:	19 96       	adiw	r26, 0x09	; 9
    21a0:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM11);
    21a2:	a6 e4       	ldi	r26, 0x46	; 70
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e6 e4       	ldi	r30, 0x46	; 70
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	81 85       	ldd	r24, Z+9	; 0x09
    21ac:	82 60       	ori	r24, 0x02	; 2
    21ae:	19 96       	adiw	r26, 0x09	; 9
    21b0:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM12);
    21b2:	a6 e4       	ldi	r26, 0x46	; 70
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e6 e4       	ldi	r30, 0x46	; 70
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	81 85       	ldd	r24, Z+9	; 0x09
    21bc:	88 60       	ori	r24, 0x08	; 8
    21be:	19 96       	adiw	r26, 0x09	; 9
    21c0:	8c 93       	st	X, r24
		SET_BIT(TIM1_BASE->TCCR1A_t.Reg,WGM13);
    21c2:	a6 e4       	ldi	r26, 0x46	; 70
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e6 e4       	ldi	r30, 0x46	; 70
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	81 85       	ldd	r24, Z+9	; 0x09
    21cc:	80 61       	ori	r24, 0x10	; 16
    21ce:	19 96       	adiw	r26, 0x09	; 9
    21d0:	8c 93       	st	X, r24
    21d2:	19 97       	sbiw	r26, 0x09	; 9
		break;
	}

	if(TIM1_config->channel == Channel_A)
    21d4:	e9 81       	ldd	r30, Y+1	; 0x01
    21d6:	fa 81       	ldd	r31, Y+2	; 0x02
    21d8:	87 81       	ldd	r24, Z+7	; 0x07
    21da:	88 23       	and	r24, r24
    21dc:	d1 f4       	brne	.+52     	; 0x2212 <Timer1_Init+0x508>
	{
		TIM1_BASE->TCCR1A_t.Reg = ((TIM1_BASE->TCCR1A_t.Reg & 0x3F) | TIM1_config->COM << COM1A0);
    21de:	a6 e4       	ldi	r26, 0x46	; 70
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e4       	ldi	r30, 0x46	; 70
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	81 85       	ldd	r24, Z+9	; 0x09
    21e8:	28 2f       	mov	r18, r24
    21ea:	2f 73       	andi	r18, 0x3F	; 63
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	81 81       	ldd	r24, Z+1	; 0x01
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	00 24       	eor	r0, r0
    21f8:	96 95       	lsr	r25
    21fa:	87 95       	ror	r24
    21fc:	07 94       	ror	r0
    21fe:	96 95       	lsr	r25
    2200:	87 95       	ror	r24
    2202:	07 94       	ror	r0
    2204:	98 2f       	mov	r25, r24
    2206:	80 2d       	mov	r24, r0
    2208:	82 2b       	or	r24, r18
    220a:	19 96       	adiw	r26, 0x09	; 9
    220c:	8c 93       	st	X, r24
    220e:	19 97       	sbiw	r26, 0x09	; 9
    2210:	15 c0       	rjmp	.+42     	; 0x223c <Timer1_Init+0x532>
	}
	else
	{
		TIM1_BASE->TCCR1A_t.Reg = ((TIM1_BASE->TCCR1A_t.Reg & 0xCF) | TIM1_config->COM << COM1B0);
    2212:	a6 e4       	ldi	r26, 0x46	; 70
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e6 e4       	ldi	r30, 0x46	; 70
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	81 85       	ldd	r24, Z+9	; 0x09
    221c:	28 2f       	mov	r18, r24
    221e:	2f 7c       	andi	r18, 0xCF	; 207
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	81 81       	ldd	r24, Z+1	; 0x01
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	82 95       	swap	r24
    222c:	92 95       	swap	r25
    222e:	90 7f       	andi	r25, 0xF0	; 240
    2230:	98 27       	eor	r25, r24
    2232:	80 7f       	andi	r24, 0xF0	; 240
    2234:	98 27       	eor	r25, r24
    2236:	82 2b       	or	r24, r18
    2238:	19 96       	adiw	r26, 0x09	; 9
    223a:	8c 93       	st	X, r24
	}
	TIM1_BASE->TCCR1B_t.Reg = ((TIM1_BASE->TCCR1B_t.Reg & 0xF8) | TIM1_config->prescalar);
    223c:	a6 e4       	ldi	r26, 0x46	; 70
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e6 e4       	ldi	r30, 0x46	; 70
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 85       	ldd	r24, Z+8	; 0x08
    2246:	98 2f       	mov	r25, r24
    2248:	98 7f       	andi	r25, 0xF8	; 248
    224a:	e9 81       	ldd	r30, Y+1	; 0x01
    224c:	fa 81       	ldd	r31, Y+2	; 0x02
    224e:	86 81       	ldd	r24, Z+6	; 0x06
    2250:	89 2b       	or	r24, r25
    2252:	18 96       	adiw	r26, 0x08	; 8
    2254:	8c 93       	st	X, r24
    2256:	18 97       	sbiw	r26, 0x08	; 8

	return NO_ERROR;
    2258:	82 e0       	ldi	r24, 0x02	; 2
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <Timer1_EnableInt>:


void Timer1_EnableInt(TIM1_ConfigType *TIM1_config,void(*Ptr2Func)(void))
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <Timer1_EnableInt+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <Timer1_EnableInt+0x8>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <Timer1_EnableInt+0xa>
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	7c 83       	std	Y+4, r23	; 0x04
    227c:	6b 83       	std	Y+3, r22	; 0x03
	SREG &=  ~(1<<7);
    227e:	af e5       	ldi	r26, 0x5F	; 95
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	ef e5       	ldi	r30, 0x5F	; 95
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8f 77       	andi	r24, 0x7F	; 127
    228a:	8c 93       	st	X, r24
	switch(TIM1_config->mode)
    228c:	e9 81       	ldd	r30, Y+1	; 0x01
    228e:	fa 81       	ldd	r31, Y+2	; 0x02
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3e 83       	std	Y+6, r19	; 0x06
    2298:	2d 83       	std	Y+5, r18	; 0x05
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	84 30       	cpi	r24, 0x04	; 4
    22a0:	91 05       	cpc	r25, r1
    22a2:	31 f1       	breq	.+76     	; 0x22f0 <Timer1_EnableInt+0x88>
    22a4:	2d 81       	ldd	r18, Y+5	; 0x05
    22a6:	3e 81       	ldd	r19, Y+6	; 0x06
    22a8:	2c 30       	cpi	r18, 0x0C	; 12
    22aa:	31 05       	cpc	r19, r1
    22ac:	61 f0       	breq	.+24     	; 0x22c6 <Timer1_EnableInt+0x5e>
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	89 f5       	brne	.+98     	; 0x2318 <Timer1_EnableInt+0xb0>
	{
	case TIM1_NORMAL:
		SET_BIT(TIMSK,T0IE1);
    22b6:	a9 e5       	ldi	r26, 0x59	; 89
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e9 e5       	ldi	r30, 0x59	; 89
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	84 60       	ori	r24, 0x04	; 4
    22c2:	8c 93       	st	X, r24
    22c4:	29 c0       	rjmp	.+82     	; 0x2318 <Timer1_EnableInt+0xb0>
		break;
	case TIM1_CTC_ICR:
		if(TIM1_config->channel == Channel_A)
    22c6:	e9 81       	ldd	r30, Y+1	; 0x01
    22c8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ca:	87 81       	ldd	r24, Z+7	; 0x07
    22cc:	88 23       	and	r24, r24
    22ce:	41 f4       	brne	.+16     	; 0x22e0 <Timer1_EnableInt+0x78>
		{
			SET_BIT(TIMSK,OCIE1A);
    22d0:	a9 e5       	ldi	r26, 0x59	; 89
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e9 e5       	ldi	r30, 0x59	; 89
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 61       	ori	r24, 0x10	; 16
    22dc:	8c 93       	st	X, r24
    22de:	1c c0       	rjmp	.+56     	; 0x2318 <Timer1_EnableInt+0xb0>
		}
		else
		{
			SET_BIT(TIMSK,OCIE1B);
    22e0:	a9 e5       	ldi	r26, 0x59	; 89
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e9 e5       	ldi	r30, 0x59	; 89
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	88 60       	ori	r24, 0x08	; 8
    22ec:	8c 93       	st	X, r24
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <Timer1_EnableInt+0xb0>
		}
		break;
	case TIM1_CTC_OCR:
		if(TIM1_config->channel == Channel_A)
    22f0:	e9 81       	ldd	r30, Y+1	; 0x01
    22f2:	fa 81       	ldd	r31, Y+2	; 0x02
    22f4:	87 81       	ldd	r24, Z+7	; 0x07
    22f6:	88 23       	and	r24, r24
    22f8:	41 f4       	brne	.+16     	; 0x230a <Timer1_EnableInt+0xa2>
		{
			SET_BIT(TIMSK,OCIE1A);
    22fa:	a9 e5       	ldi	r26, 0x59	; 89
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e9 e5       	ldi	r30, 0x59	; 89
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	80 61       	ori	r24, 0x10	; 16
    2306:	8c 93       	st	X, r24
    2308:	07 c0       	rjmp	.+14     	; 0x2318 <Timer1_EnableInt+0xb0>
		}
		else
		{
			SET_BIT(TIMSK,OCIE1B);
    230a:	a9 e5       	ldi	r26, 0x59	; 89
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e9 e5       	ldi	r30, 0x59	; 89
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	88 60       	ori	r24, 0x08	; 8
    2316:	8c 93       	st	X, r24
		}
		break;
	}
	TIM1_SetCallBack(*Ptr2Func);
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <TIM1_SetCallBack>
	SREG |= (1<<7);
    2320:	af e5       	ldi	r26, 0x5F	; 95
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ef e5       	ldi	r30, 0x5F	; 95
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	80 68       	ori	r24, 0x80	; 128
    232c:	8c 93       	st	X, r24
}
    232e:	26 96       	adiw	r28, 0x06	; 6
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <Timer1_ICU_EnableInt>:


void Timer1_ICU_EnableInt(void(*Ptr2Func)(void))
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <Timer1_ICU_EnableInt+0x6>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
	SREG &=  ~(1<<7);
    234e:	af e5       	ldi	r26, 0x5F	; 95
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	ef e5       	ldi	r30, 0x5F	; 95
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8f 77       	andi	r24, 0x7F	; 127
    235a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TICIE1);
    235c:	a9 e5       	ldi	r26, 0x59	; 89
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e9 e5       	ldi	r30, 0x59	; 89
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 62       	ori	r24, 0x20	; 32
    2368:	8c 93       	st	X, r24
	TIM1_ICU_SetCallBack(*Ptr2Func);
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <TIM1_ICU_SetCallBack>
	SREG |= (1<<7);
    2372:	af e5       	ldi	r26, 0x5F	; 95
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	ef e5       	ldi	r30, 0x5F	; 95
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	80 68       	ori	r24, 0x80	; 128
    237e:	8c 93       	st	X, r24
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <Timer1_ICU_DisableInt>:

void Timer1_ICU_DisableInt()
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	SREG &=  ~(1<<7);
    2392:	af e5       	ldi	r26, 0x5F	; 95
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ef e5       	ldi	r30, 0x5F	; 95
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8f 77       	andi	r24, 0x7F	; 127
    239e:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TICIE1);
    23a0:	a9 e5       	ldi	r26, 0x59	; 89
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e9 e5       	ldi	r30, 0x59	; 89
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	8f 7d       	andi	r24, 0xDF	; 223
    23ac:	8c 93       	st	X, r24
	SREG |= (1<<7);
    23ae:	af e5       	ldi	r26, 0x5F	; 95
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	ef e5       	ldi	r30, 0x5F	; 95
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	80 68       	ori	r24, 0x80	; 128
    23ba:	8c 93       	st	X, r24
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <Timer1_Icu_clearTimerValue>:

void Timer1_Icu_clearTimerValue()
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	TIM1_BASE->ICR1_t =0;
    23ca:	e6 e4       	ldi	r30, 0x46	; 70
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	11 82       	std	Z+1, r1	; 0x01
    23d0:	10 82       	st	Z, r1
}
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <Timer1_ICU_SetTrig>:

void Timer1_ICU_SetTrig(uint8 Copy_u8Trig)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	89 83       	std	Y+1, r24	; 0x01
	TIM1_BASE->TCCR1B_t.Reg = (TIM1_BASE->TCCR1B_t.Reg & 0xBF) | (Copy_u8Trig<<ICES1);
    23e4:	a6 e4       	ldi	r26, 0x46	; 70
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e6 e4       	ldi	r30, 0x46	; 70
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 85       	ldd	r24, Z+8	; 0x08
    23ee:	28 2f       	mov	r18, r24
    23f0:	2f 7b       	andi	r18, 0xBF	; 191
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	00 24       	eor	r0, r0
    23fa:	96 95       	lsr	r25
    23fc:	87 95       	ror	r24
    23fe:	07 94       	ror	r0
    2400:	96 95       	lsr	r25
    2402:	87 95       	ror	r24
    2404:	07 94       	ror	r0
    2406:	98 2f       	mov	r25, r24
    2408:	80 2d       	mov	r24, r0
    240a:	82 2b       	or	r24, r18
    240c:	18 96       	adiw	r26, 0x08	; 8
    240e:	8c 93       	st	X, r24
    2410:	18 97       	sbiw	r26, 0x08	; 8
	TIM1_BASE->ICR1_t =0;
    2412:	e6 e4       	ldi	r30, 0x46	; 70
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	11 82       	std	Z+1, r1	; 0x01
    2418:	10 82       	st	Z, r1
}
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <Timer1_ICU_takeReading>:

uint16 Timer1_ICU_takeReading(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
	return TIM1_BASE->ICR1_t;
    242a:	e6 e4       	ldi	r30, 0x46	; 70
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
}
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <H_LCD_void_Init>:
#include "INC/LCD.h"
#include "util/delay.h"


void H_LCD_void_Init(void)
{
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	c4 55       	subi	r28, 0x54	; 84
    2446:	d0 40       	sbci	r29, 0x00	; 0
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2452:	89 e3       	ldi	r24, 0x39	; 57
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	63 e0       	ldi	r22, 0x03	; 3
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    245e:	89 e3       	ldi	r24, 0x39	; 57
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN0,OUTPUT);
    246a:	86 e3       	ldi	r24, 0x36	; 54
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN1,OUTPUT);
    2476:	86 e3       	ldi	r24, 0x36	; 54
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN2,OUTPUT);
    2482:	86 e3       	ldi	r24, 0x36	; 54
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN4,OUTPUT);
    248e:	86 e3       	ldi	r24, 0x36	; 54
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	41 e0       	ldi	r20, 0x01	; 1
    2496:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
    249a:	fe 01       	movw	r30, r28
    249c:	ef 5a       	subi	r30, 0xAF	; 175
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	a0 ef       	ldi	r26, 0xF0	; 240
    24a6:	b1 e4       	ldi	r27, 0x41	; 65
    24a8:	80 83       	st	Z, r24
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	a2 83       	std	Z+2, r26	; 0x02
    24ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b0:	8e 01       	movw	r16, r28
    24b2:	03 5b       	subi	r16, 0xB3	; 179
    24b4:	1f 4f       	sbci	r17, 0xFF	; 255
    24b6:	fe 01       	movw	r30, r28
    24b8:	ef 5a       	subi	r30, 0xAF	; 175
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a e7       	ldi	r20, 0x7A	; 122
    24ca:	55 e4       	ldi	r21, 0x45	; 69
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	f8 01       	movw	r30, r16
    24d6:	80 83       	st	Z, r24
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	a2 83       	std	Z+2, r26	; 0x02
    24dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24de:	fe 01       	movw	r30, r28
    24e0:	e3 5b       	subi	r30, 0xB3	; 179
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	60 81       	ld	r22, Z
    24e6:	71 81       	ldd	r23, Z+1	; 0x01
    24e8:	82 81       	ldd	r24, Z+2	; 0x02
    24ea:	93 81       	ldd	r25, Z+3	; 0x03
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	44 f4       	brge	.+16     	; 0x250c <H_LCD_void_Init+0xd4>
		__ticks = 1;
    24fc:	fe 01       	movw	r30, r28
    24fe:	e5 5b       	subi	r30, 0xB5	; 181
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	64 c0       	rjmp	.+200    	; 0x25d4 <H_LCD_void_Init+0x19c>
	else if (__tmp > 65535)
    250c:	fe 01       	movw	r30, r28
    250e:	e3 5b       	subi	r30, 0xB3	; 179
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	0c f0       	brlt	.+2      	; 0x252c <H_LCD_void_Init+0xf4>
    252a:	43 c0       	rjmp	.+134    	; 0x25b2 <H_LCD_void_Init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252c:	fe 01       	movw	r30, r28
    252e:	ef 5a       	subi	r30, 0xAF	; 175
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	8e 01       	movw	r16, r28
    254c:	05 5b       	subi	r16, 0xB5	; 181
    254e:	1f 4f       	sbci	r17, 0xFF	; 255
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	f8 01       	movw	r30, r16
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	1f c0       	rjmp	.+62     	; 0x25a2 <H_LCD_void_Init+0x16a>
    2564:	fe 01       	movw	r30, r28
    2566:	e7 5b       	subi	r30, 0xB7	; 183
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 e9       	ldi	r24, 0x90	; 144
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2572:	fe 01       	movw	r30, r28
    2574:	e7 5b       	subi	r30, 0xB7	; 183
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <H_LCD_void_Init+0x144>
    2580:	fe 01       	movw	r30, r28
    2582:	e7 5b       	subi	r30, 0xB7	; 183
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	91 83       	std	Z+1, r25	; 0x01
    2588:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	de 01       	movw	r26, r28
    258c:	a5 5b       	subi	r26, 0xB5	; 181
    258e:	bf 4f       	sbci	r27, 0xFF	; 255
    2590:	fe 01       	movw	r30, r28
    2592:	e5 5b       	subi	r30, 0xB5	; 181
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	9c 93       	st	X, r25
    25a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	fe 01       	movw	r30, r28
    25a4:	e5 5b       	subi	r30, 0xB5	; 181
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	91 81       	ldd	r25, Z+1	; 0x01
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	d1 f6       	brne	.-76     	; 0x2564 <H_LCD_void_Init+0x12c>
    25b0:	27 c0       	rjmp	.+78     	; 0x2600 <H_LCD_void_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	8e 01       	movw	r16, r28
    25b4:	05 5b       	subi	r16, 0xB5	; 181
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	fe 01       	movw	r30, r28
    25ba:	e3 5b       	subi	r30, 0xB3	; 179
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	de 01       	movw	r26, r28
    25d6:	a9 5b       	subi	r26, 0xB9	; 185
    25d8:	bf 4f       	sbci	r27, 0xFF	; 255
    25da:	fe 01       	movw	r30, r28
    25dc:	e5 5b       	subi	r30, 0xB5	; 181
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	8d 93       	st	X+, r24
    25e6:	9c 93       	st	X, r25
    25e8:	fe 01       	movw	r30, r28
    25ea:	e9 5b       	subi	r30, 0xB9	; 185
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <H_LCD_void_Init+0x1ba>
    25f6:	fe 01       	movw	r30, r28
    25f8:	e9 5b       	subi	r30, 0xB9	; 185
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
	_delay_ms(30);

	/********************* function set command ***********************/

#if(LCD_DATA_BIT_MODE == 4)
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2600:	89 e3       	ldi	r24, 0x39	; 57
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	63 e0       	ldi	r22, 0x03	; 3
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN0,LOGIC_LOW);
    260c:	86 e3       	ldi	r24, 0x36	; 54
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN1,LOGIC_HIGH);
    2618:	86 e3       	ldi	r24, 0x36	; 54
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN2,LOGIC_LOW);
    2624:	86 e3       	ldi	r24, 0x36	; 54
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN4,LOGIC_LOW);
    2630:	86 e3       	ldi	r24, 0x36	; 54
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	64 e0       	ldi	r22, 0x04	; 4
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    263c:	fe 01       	movw	r30, r28
    263e:	ed 5b       	subi	r30, 0xBD	; 189
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e8       	ldi	r26, 0x80	; 128
    2648:	bf e3       	ldi	r27, 0x3F	; 63
    264a:	80 83       	st	Z, r24
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	a2 83       	std	Z+2, r26	; 0x02
    2650:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	8e 01       	movw	r16, r28
    2654:	01 5c       	subi	r16, 0xC1	; 193
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	ed 5b       	subi	r30, 0xBD	; 189
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	55 e4       	ldi	r21, 0x45	; 69
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	80 83       	st	Z, r24
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	a2 83       	std	Z+2, r26	; 0x02
    267e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2680:	fe 01       	movw	r30, r28
    2682:	ff 96       	adiw	r30, 0x3f	; 63
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	9e af       	std	Y+62, r25	; 0x3e
    26a2:	8d af       	std	Y+61, r24	; 0x3d
    26a4:	46 c0       	rjmp	.+140    	; 0x2732 <H_LCD_void_Init+0x2fa>
	else if (__tmp > 65535)
    26a6:	fe 01       	movw	r30, r28
    26a8:	ff 96       	adiw	r30, 0x3f	; 63
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	64 f5       	brge	.+88     	; 0x271a <H_LCD_void_Init+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	fe 01       	movw	r30, r28
    26c4:	ed 5b       	subi	r30, 0xBD	; 189
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e af       	std	Y+62, r25	; 0x3e
    26ee:	8d af       	std	Y+61, r24	; 0x3d
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <H_LCD_void_Init+0x2d8>
    26f2:	80 e9       	ldi	r24, 0x90	; 144
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	9c af       	std	Y+60, r25	; 0x3c
    26f8:	8b af       	std	Y+59, r24	; 0x3b
    26fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    26fc:	9c ad       	ldd	r25, Y+60	; 0x3c
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <H_LCD_void_Init+0x2c6>
    2702:	9c af       	std	Y+60, r25	; 0x3c
    2704:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	8d ad       	ldd	r24, Y+61	; 0x3d
    2708:	9e ad       	ldd	r25, Y+62	; 0x3e
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9e af       	std	Y+62, r25	; 0x3e
    270e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	8d ad       	ldd	r24, Y+61	; 0x3d
    2712:	9e ad       	ldd	r25, Y+62	; 0x3e
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	69 f7       	brne	.-38     	; 0x26f2 <H_LCD_void_Init+0x2ba>
    2718:	16 c0       	rjmp	.+44     	; 0x2746 <H_LCD_void_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	fe 01       	movw	r30, r28
    271c:	ff 96       	adiw	r30, 0x3f	; 63
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9e af       	std	Y+62, r25	; 0x3e
    2730:	8d af       	std	Y+61, r24	; 0x3d
    2732:	8d ad       	ldd	r24, Y+61	; 0x3d
    2734:	9e ad       	ldd	r25, Y+62	; 0x3e
    2736:	9a af       	std	Y+58, r25	; 0x3a
    2738:	89 af       	std	Y+57, r24	; 0x39
    273a:	89 ad       	ldd	r24, Y+57	; 0x39
    273c:	9a ad       	ldd	r25, Y+58	; 0x3a
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <H_LCD_void_Init+0x306>
    2742:	9a af       	std	Y+58, r25	; 0x3a
    2744:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2746:	88 e2       	ldi	r24, 0x28	; 40
    2748:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	a0 e8       	ldi	r26, 0x80	; 128
    2752:	bf e3       	ldi	r27, 0x3F	; 63
    2754:	8d ab       	std	Y+53, r24	; 0x35
    2756:	9e ab       	std	Y+54, r25	; 0x36
    2758:	af ab       	std	Y+55, r26	; 0x37
    275a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275c:	6d a9       	ldd	r22, Y+53	; 0x35
    275e:	7e a9       	ldd	r23, Y+54	; 0x36
    2760:	8f a9       	ldd	r24, Y+55	; 0x37
    2762:	98 ad       	ldd	r25, Y+56	; 0x38
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	4a e7       	ldi	r20, 0x7A	; 122
    276a:	55 e4       	ldi	r21, 0x45	; 69
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	89 ab       	std	Y+49, r24	; 0x31
    2776:	9a ab       	std	Y+50, r25	; 0x32
    2778:	ab ab       	std	Y+51, r26	; 0x33
    277a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    277c:	69 a9       	ldd	r22, Y+49	; 0x31
    277e:	7a a9       	ldd	r23, Y+50	; 0x32
    2780:	8b a9       	ldd	r24, Y+51	; 0x33
    2782:	9c a9       	ldd	r25, Y+52	; 0x34
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e8       	ldi	r20, 0x80	; 128
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2790:	88 23       	and	r24, r24
    2792:	2c f4       	brge	.+10     	; 0x279e <H_LCD_void_Init+0x366>
		__ticks = 1;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	98 ab       	std	Y+48, r25	; 0x30
    279a:	8f a7       	std	Y+47, r24	; 0x2f
    279c:	3f c0       	rjmp	.+126    	; 0x281c <H_LCD_void_Init+0x3e4>
	else if (__tmp > 65535)
    279e:	69 a9       	ldd	r22, Y+49	; 0x31
    27a0:	7a a9       	ldd	r23, Y+50	; 0x32
    27a2:	8b a9       	ldd	r24, Y+51	; 0x33
    27a4:	9c a9       	ldd	r25, Y+52	; 0x34
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	3f ef       	ldi	r19, 0xFF	; 255
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	57 e4       	ldi	r21, 0x47	; 71
    27ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	4c f5       	brge	.+82     	; 0x2808 <H_LCD_void_Init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b6:	6d a9       	ldd	r22, Y+53	; 0x35
    27b8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ba:	8f a9       	ldd	r24, Y+55	; 0x37
    27bc:	98 ad       	ldd	r25, Y+56	; 0x38
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	98 ab       	std	Y+48, r25	; 0x30
    27dc:	8f a7       	std	Y+47, r24	; 0x2f
    27de:	0f c0       	rjmp	.+30     	; 0x27fe <H_LCD_void_Init+0x3c6>
    27e0:	80 e9       	ldi	r24, 0x90	; 144
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	9e a7       	std	Y+46, r25	; 0x2e
    27e6:	8d a7       	std	Y+45, r24	; 0x2d
    27e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <H_LCD_void_Init+0x3b4>
    27f0:	9e a7       	std	Y+46, r25	; 0x2e
    27f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f6:	98 a9       	ldd	r25, Y+48	; 0x30
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	98 ab       	std	Y+48, r25	; 0x30
    27fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2800:	98 a9       	ldd	r25, Y+48	; 0x30
    2802:	00 97       	sbiw	r24, 0x00	; 0
    2804:	69 f7       	brne	.-38     	; 0x27e0 <H_LCD_void_Init+0x3a8>
    2806:	14 c0       	rjmp	.+40     	; 0x2830 <H_LCD_void_Init+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2808:	69 a9       	ldd	r22, Y+49	; 0x31
    280a:	7a a9       	ldd	r23, Y+50	; 0x32
    280c:	8b a9       	ldd	r24, Y+51	; 0x33
    280e:	9c a9       	ldd	r25, Y+52	; 0x34
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	98 ab       	std	Y+48, r25	; 0x30
    281a:	8f a7       	std	Y+47, r24	; 0x2f
    281c:	8f a5       	ldd	r24, Y+47	; 0x2f
    281e:	98 a9       	ldd	r25, Y+48	; 0x30
    2820:	9c a7       	std	Y+44, r25	; 0x2c
    2822:	8b a7       	std	Y+43, r24	; 0x2b
    2824:	8b a5       	ldd	r24, Y+43	; 0x2b
    2826:	9c a5       	ldd	r25, Y+44	; 0x2c
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <H_LCD_void_Init+0x3f0>
    282c:	9c a7       	std	Y+44, r25	; 0x2c
    282e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CURSOR_OFF);
    2830:	8c e0       	ldi	r24, 0x0C	; 12
    2832:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e8       	ldi	r26, 0x80	; 128
    283c:	bf e3       	ldi	r27, 0x3F	; 63
    283e:	8f a3       	std	Y+39, r24	; 0x27
    2840:	98 a7       	std	Y+40, r25	; 0x28
    2842:	a9 a7       	std	Y+41, r26	; 0x29
    2844:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	6f a1       	ldd	r22, Y+39	; 0x27
    2848:	78 a5       	ldd	r23, Y+40	; 0x28
    284a:	89 a5       	ldd	r24, Y+41	; 0x29
    284c:	9a a5       	ldd	r25, Y+42	; 0x2a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a e7       	ldi	r20, 0x7A	; 122
    2854:	55 e4       	ldi	r21, 0x45	; 69
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8b a3       	std	Y+35, r24	; 0x23
    2860:	9c a3       	std	Y+36, r25	; 0x24
    2862:	ad a3       	std	Y+37, r26	; 0x25
    2864:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2866:	6b a1       	ldd	r22, Y+35	; 0x23
    2868:	7c a1       	ldd	r23, Y+36	; 0x24
    286a:	8d a1       	ldd	r24, Y+37	; 0x25
    286c:	9e a1       	ldd	r25, Y+38	; 0x26
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <H_LCD_void_Init+0x450>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9a a3       	std	Y+34, r25	; 0x22
    2884:	89 a3       	std	Y+33, r24	; 0x21
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <H_LCD_void_Init+0x4ce>
	else if (__tmp > 65535)
    2888:	6b a1       	ldd	r22, Y+35	; 0x23
    288a:	7c a1       	ldd	r23, Y+36	; 0x24
    288c:	8d a1       	ldd	r24, Y+37	; 0x25
    288e:	9e a1       	ldd	r25, Y+38	; 0x26
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <H_LCD_void_Init+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	6f a1       	ldd	r22, Y+39	; 0x27
    28a2:	78 a5       	ldd	r23, Y+40	; 0x28
    28a4:	89 a5       	ldd	r24, Y+41	; 0x29
    28a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9a a3       	std	Y+34, r25	; 0x22
    28c6:	89 a3       	std	Y+33, r24	; 0x21
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <H_LCD_void_Init+0x4b0>
    28ca:	80 e9       	ldi	r24, 0x90	; 144
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	98 a3       	std	Y+32, r25	; 0x20
    28d0:	8f 8f       	std	Y+31, r24	; 0x1f
    28d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28d4:	98 a1       	ldd	r25, Y+32	; 0x20
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <H_LCD_void_Init+0x49e>
    28da:	98 a3       	std	Y+32, r25	; 0x20
    28dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	89 a1       	ldd	r24, Y+33	; 0x21
    28e0:	9a a1       	ldd	r25, Y+34	; 0x22
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ea:	9a a1       	ldd	r25, Y+34	; 0x22
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <H_LCD_void_Init+0x492>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <H_LCD_void_Init+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6b a1       	ldd	r22, Y+35	; 0x23
    28f4:	7c a1       	ldd	r23, Y+36	; 0x24
    28f6:	8d a1       	ldd	r24, Y+37	; 0x25
    28f8:	9e a1       	ldd	r25, Y+38	; 0x26
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9a a3       	std	Y+34, r25	; 0x22
    2904:	89 a3       	std	Y+33, r24	; 0x21
    2906:	89 a1       	ldd	r24, Y+33	; 0x21
    2908:	9a a1       	ldd	r25, Y+34	; 0x22
    290a:	9e 8f       	std	Y+30, r25	; 0x1e
    290c:	8d 8f       	std	Y+29, r24	; 0x1d
    290e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2910:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <H_LCD_void_Init+0x4da>
    2916:	9e 8f       	std	Y+30, r25	; 0x1e
    2918:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 e8       	ldi	r26, 0x80	; 128
    2926:	bf e3       	ldi	r27, 0x3F	; 63
    2928:	89 8f       	std	Y+25, r24	; 0x19
    292a:	9a 8f       	std	Y+26, r25	; 0x1a
    292c:	ab 8f       	std	Y+27, r26	; 0x1b
    292e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	69 8d       	ldd	r22, Y+25	; 0x19
    2932:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2934:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2936:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	55 e4       	ldi	r21, 0x45	; 69
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8d 8b       	std	Y+21, r24	; 0x15
    294a:	9e 8b       	std	Y+22, r25	; 0x16
    294c:	af 8b       	std	Y+23, r26	; 0x17
    294e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2950:	6d 89       	ldd	r22, Y+21	; 0x15
    2952:	7e 89       	ldd	r23, Y+22	; 0x16
    2954:	8f 89       	ldd	r24, Y+23	; 0x17
    2956:	98 8d       	ldd	r25, Y+24	; 0x18
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <H_LCD_void_Init+0x53a>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 8b       	std	Y+20, r25	; 0x14
    296e:	8b 8b       	std	Y+19, r24	; 0x13
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <H_LCD_void_Init+0x5b8>
	else if (__tmp > 65535)
    2972:	6d 89       	ldd	r22, Y+21	; 0x15
    2974:	7e 89       	ldd	r23, Y+22	; 0x16
    2976:	8f 89       	ldd	r24, Y+23	; 0x17
    2978:	98 8d       	ldd	r25, Y+24	; 0x18
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <H_LCD_void_Init+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	69 8d       	ldd	r22, Y+25	; 0x19
    298c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    298e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <H_LCD_void_Init+0x59a>
    29b4:	80 e9       	ldi	r24, 0x90	; 144
    29b6:	91 e0       	ldi	r25, 0x01	; 1
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
    29ba:	89 8b       	std	Y+17, r24	; 0x11
    29bc:	89 89       	ldd	r24, Y+17	; 0x11
    29be:	9a 89       	ldd	r25, Y+18	; 0x12
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <H_LCD_void_Init+0x588>
    29c4:	9a 8b       	std	Y+18, r25	; 0x12
    29c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ca:	9c 89       	ldd	r25, Y+20	; 0x14
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9c 8b       	std	Y+20, r25	; 0x14
    29d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8b 89       	ldd	r24, Y+19	; 0x13
    29d4:	9c 89       	ldd	r25, Y+20	; 0x14
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <H_LCD_void_Init+0x57c>
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <H_LCD_void_Init+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6d 89       	ldd	r22, Y+21	; 0x15
    29de:	7e 89       	ldd	r23, Y+22	; 0x16
    29e0:	8f 89       	ldd	r24, Y+23	; 0x17
    29e2:	98 8d       	ldd	r25, Y+24	; 0x18
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
    29f0:	8b 89       	ldd	r24, Y+19	; 0x13
    29f2:	9c 89       	ldd	r25, Y+20	; 0x14
    29f4:	98 8b       	std	Y+16, r25	; 0x10
    29f6:	8f 87       	std	Y+15, r24	; 0x0f
    29f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fa:	98 89       	ldd	r25, Y+16	; 0x10
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <H_LCD_void_Init+0x5c4>
    2a00:	98 8b       	std	Y+16, r25	; 0x10
    2a02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
    2a04:	82 e0       	ldi	r24, 0x02	; 2
    2a06:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e8       	ldi	r26, 0x80	; 128
    2a10:	bf e3       	ldi	r27, 0x3F	; 63
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	ad 87       	std	Y+13, r26	; 0x0d
    2a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4a e7       	ldi	r20, 0x7A	; 122
    2a28:	55 e4       	ldi	r21, 0x45	; 69
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8f 83       	std	Y+7, r24	; 0x07
    2a34:	98 87       	std	Y+8, r25	; 0x08
    2a36:	a9 87       	std	Y+9, r26	; 0x09
    2a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <H_LCD_void_Init+0x624>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <H_LCD_void_Init+0x6a2>
	else if (__tmp > 65535)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	4c f5       	brge	.+82     	; 0x2ac6 <H_LCD_void_Init+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	0f c0       	rjmp	.+30     	; 0x2abc <H_LCD_void_Init+0x684>
    2a9e:	80 e9       	ldi	r24, 0x90	; 144
    2aa0:	91 e0       	ldi	r25, 0x01	; 1
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <H_LCD_void_Init+0x672>
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <H_LCD_void_Init+0x666>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <H_LCD_void_Init+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <H_LCD_void_Init+0x6ae>
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01

#else if(LCD_DATA_BIT_MODE == 8)
	DIO_voidSetPortDirection(LCD_DATA_PORT_ID,LOGIC_HIGH);
#endif

}
    2aee:	cc 5a       	subi	r28, 0xAC	; 172
    2af0:	df 4f       	sbci	r29, 0xFF	; 255
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	08 95       	ret

00002b06 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(uint8 copy_u8Byte)
{
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	c7 54       	subi	r28, 0x47	; 71
    2b14:	d0 40       	sbci	r29, 0x00	; 0
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	fe 01       	movw	r30, r28
    2b22:	e9 5b       	subi	r30, 0xB9	; 185
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 83       	st	Z, r24
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    2b28:	89 e3       	ldi	r24, 0x39	; 57
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ed 5b       	subi	r30, 0xBD	; 189
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e8       	ldi	r26, 0x80	; 128
    2b40:	bf e3       	ldi	r27, 0x3F	; 63
    2b42:	80 83       	st	Z, r24
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	a2 83       	std	Z+2, r26	; 0x02
    2b48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	01 5c       	subi	r16, 0xC1	; 193
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	fe 01       	movw	r30, r28
    2b52:	ed 5b       	subi	r30, 0xBD	; 189
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	4a e7       	ldi	r20, 0x7A	; 122
    2b64:	55 e4       	ldi	r21, 0x45	; 69
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	f8 01       	movw	r30, r16
    2b70:	80 83       	st	Z, r24
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	a2 83       	std	Z+2, r26	; 0x02
    2b76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ff 96       	adiw	r30, 0x3f	; 63
    2b7c:	60 81       	ld	r22, Z
    2b7e:	71 81       	ldd	r23, Z+1	; 0x01
    2b80:	82 81       	ldd	r24, Z+2	; 0x02
    2b82:	93 81       	ldd	r25, Z+3	; 0x03
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <H_LCD_void_latchByte+0x98>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9e af       	std	Y+62, r25	; 0x3e
    2b9a:	8d af       	std	Y+61, r24	; 0x3d
    2b9c:	46 c0       	rjmp	.+140    	; 0x2c2a <H_LCD_void_latchByte+0x124>
	else if (__tmp > 65535)
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ff 96       	adiw	r30, 0x3f	; 63
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	64 f5       	brge	.+88     	; 0x2c12 <H_LCD_void_latchByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ed 5b       	subi	r30, 0xBD	; 189
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	60 81       	ld	r22, Z
    2bc2:	71 81       	ldd	r23, Z+1	; 0x01
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9e af       	std	Y+62, r25	; 0x3e
    2be6:	8d af       	std	Y+61, r24	; 0x3d
    2be8:	0f c0       	rjmp	.+30     	; 0x2c08 <H_LCD_void_latchByte+0x102>
    2bea:	80 e9       	ldi	r24, 0x90	; 144
    2bec:	91 e0       	ldi	r25, 0x01	; 1
    2bee:	9c af       	std	Y+60, r25	; 0x3c
    2bf0:	8b af       	std	Y+59, r24	; 0x3b
    2bf2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bf4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <H_LCD_void_latchByte+0xf0>
    2bfa:	9c af       	std	Y+60, r25	; 0x3c
    2bfc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9e af       	std	Y+62, r25	; 0x3e
    2c06:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	69 f7       	brne	.-38     	; 0x2bea <H_LCD_void_latchByte+0xe4>
    2c10:	16 c0       	rjmp	.+44     	; 0x2c3e <H_LCD_void_latchByte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c12:	fe 01       	movw	r30, r28
    2c14:	ff 96       	adiw	r30, 0x3f	; 63
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	9e af       	std	Y+62, r25	; 0x3e
    2c28:	8d af       	std	Y+61, r24	; 0x3d
    2c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2e:	9a af       	std	Y+58, r25	; 0x3a
    2c30:	89 af       	std	Y+57, r24	; 0x39
    2c32:	89 ad       	ldd	r24, Y+57	; 0x39
    2c34:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <H_LCD_void_latchByte+0x130>
    2c3a:	9a af       	std	Y+58, r25	; 0x3a
    2c3c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,4));
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e9 5b       	subi	r30, 0xB9	; 185
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	80 71       	andi	r24, 0x10	; 16
    2c4c:	90 70       	andi	r25, 0x00	; 0
    2c4e:	95 95       	asr	r25
    2c50:	87 95       	ror	r24
    2c52:	95 95       	asr	r25
    2c54:	87 95       	ror	r24
    2c56:	95 95       	asr	r25
    2c58:	87 95       	ror	r24
    2c5a:	95 95       	asr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	28 2f       	mov	r18, r24
    2c60:	86 e3       	ldi	r24, 0x36	; 54
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	42 2f       	mov	r20, r18
    2c68:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,5));
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e9 5b       	subi	r30, 0xB9	; 185
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	88 2f       	mov	r24, r24
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	80 72       	andi	r24, 0x20	; 32
    2c7a:	90 70       	andi	r25, 0x00	; 0
    2c7c:	95 95       	asr	r25
    2c7e:	87 95       	ror	r24
    2c80:	95 95       	asr	r25
    2c82:	87 95       	ror	r24
    2c84:	95 95       	asr	r25
    2c86:	87 95       	ror	r24
    2c88:	95 95       	asr	r25
    2c8a:	87 95       	ror	r24
    2c8c:	95 95       	asr	r25
    2c8e:	87 95       	ror	r24
    2c90:	28 2f       	mov	r18, r24
    2c92:	86 e3       	ldi	r24, 0x36	; 54
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	61 e0       	ldi	r22, 0x01	; 1
    2c98:	42 2f       	mov	r20, r18
    2c9a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,6));
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e9 5b       	subi	r30, 0xB9	; 185
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 81       	ld	r24, Z
    2ca6:	88 2f       	mov	r24, r24
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	80 74       	andi	r24, 0x40	; 64
    2cac:	90 70       	andi	r25, 0x00	; 0
    2cae:	08 2e       	mov	r0, r24
    2cb0:	89 2f       	mov	r24, r25
    2cb2:	00 0c       	add	r0, r0
    2cb4:	88 1f       	adc	r24, r24
    2cb6:	99 0b       	sbc	r25, r25
    2cb8:	00 0c       	add	r0, r0
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	86 e3       	ldi	r24, 0x36	; 54
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	62 e0       	ldi	r22, 0x02	; 2
    2cc6:	42 2f       	mov	r20, r18
    2cc8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,7));
    2ccc:	fe 01       	movw	r30, r28
    2cce:	e9 5b       	subi	r30, 0xB9	; 185
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	22 1f       	adc	r18, r18
    2cd8:	22 27       	eor	r18, r18
    2cda:	22 1f       	adc	r18, r18
    2cdc:	86 e3       	ldi	r24, 0x36	; 54
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	64 e0       	ldi	r22, 0x04	; 4
    2ce2:	42 2f       	mov	r20, r18
    2ce4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    2ce8:	89 e3       	ldi	r24, 0x39	; 57
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	62 e0       	ldi	r22, 0x02	; 2
    2cee:	41 e0       	ldi	r20, 0x01	; 1
    2cf0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e8       	ldi	r26, 0x80	; 128
    2cfa:	bf e3       	ldi	r27, 0x3F	; 63
    2cfc:	8d ab       	std	Y+53, r24	; 0x35
    2cfe:	9e ab       	std	Y+54, r25	; 0x36
    2d00:	af ab       	std	Y+55, r26	; 0x37
    2d02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	6d a9       	ldd	r22, Y+53	; 0x35
    2d06:	7e a9       	ldd	r23, Y+54	; 0x36
    2d08:	8f a9       	ldd	r24, Y+55	; 0x37
    2d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a e7       	ldi	r20, 0x7A	; 122
    2d12:	55 e4       	ldi	r21, 0x45	; 69
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	89 ab       	std	Y+49, r24	; 0x31
    2d1e:	9a ab       	std	Y+50, r25	; 0x32
    2d20:	ab ab       	std	Y+51, r26	; 0x33
    2d22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d24:	69 a9       	ldd	r22, Y+49	; 0x31
    2d26:	7a a9       	ldd	r23, Y+50	; 0x32
    2d28:	8b a9       	ldd	r24, Y+51	; 0x33
    2d2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <H_LCD_void_latchByte+0x240>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	98 ab       	std	Y+48, r25	; 0x30
    2d42:	8f a7       	std	Y+47, r24	; 0x2f
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <H_LCD_void_latchByte+0x2be>
	else if (__tmp > 65535)
    2d46:	69 a9       	ldd	r22, Y+49	; 0x31
    2d48:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <H_LCD_void_latchByte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d60:	7e a9       	ldd	r23, Y+54	; 0x36
    2d62:	8f a9       	ldd	r24, Y+55	; 0x37
    2d64:	98 ad       	ldd	r25, Y+56	; 0x38
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	98 ab       	std	Y+48, r25	; 0x30
    2d84:	8f a7       	std	Y+47, r24	; 0x2f
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <H_LCD_void_latchByte+0x2a0>
    2d88:	80 e9       	ldi	r24, 0x90	; 144
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	9e a7       	std	Y+46, r25	; 0x2e
    2d8e:	8d a7       	std	Y+45, r24	; 0x2d
    2d90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <H_LCD_void_latchByte+0x28e>
    2d98:	9e a7       	std	Y+46, r25	; 0x2e
    2d9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	98 ab       	std	Y+48, r25	; 0x30
    2da4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da8:	98 a9       	ldd	r25, Y+48	; 0x30
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <H_LCD_void_latchByte+0x282>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <H_LCD_void_latchByte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	69 a9       	ldd	r22, Y+49	; 0x31
    2db2:	7a a9       	ldd	r23, Y+50	; 0x32
    2db4:	8b a9       	ldd	r24, Y+51	; 0x33
    2db6:	9c a9       	ldd	r25, Y+52	; 0x34
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	98 ab       	std	Y+48, r25	; 0x30
    2dc2:	8f a7       	std	Y+47, r24	; 0x2f
    2dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc8:	9c a7       	std	Y+44, r25	; 0x2c
    2dca:	8b a7       	std	Y+43, r24	; 0x2b
    2dcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dce:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <H_LCD_void_latchByte+0x2ca>
    2dd4:	9c a7       	std	Y+44, r25	; 0x2c
    2dd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    2dd8:	89 e3       	ldi	r24, 0x39	; 57
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	62 e0       	ldi	r22, 0x02	; 2
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a0 e8       	ldi	r26, 0x80	; 128
    2dea:	bf e3       	ldi	r27, 0x3F	; 63
    2dec:	8f a3       	std	Y+39, r24	; 0x27
    2dee:	98 a7       	std	Y+40, r25	; 0x28
    2df0:	a9 a7       	std	Y+41, r26	; 0x29
    2df2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df4:	6f a1       	ldd	r22, Y+39	; 0x27
    2df6:	78 a5       	ldd	r23, Y+40	; 0x28
    2df8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a e7       	ldi	r20, 0x7A	; 122
    2e02:	55 e4       	ldi	r21, 0x45	; 69
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8b a3       	std	Y+35, r24	; 0x23
    2e0e:	9c a3       	std	Y+36, r25	; 0x24
    2e10:	ad a3       	std	Y+37, r26	; 0x25
    2e12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e14:	6b a1       	ldd	r22, Y+35	; 0x23
    2e16:	7c a1       	ldd	r23, Y+36	; 0x24
    2e18:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e8       	ldi	r20, 0x80	; 128
    2e22:	5f e3       	ldi	r21, 0x3F	; 63
    2e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <H_LCD_void_latchByte+0x330>
		__ticks = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9a a3       	std	Y+34, r25	; 0x22
    2e32:	89 a3       	std	Y+33, r24	; 0x21
    2e34:	3f c0       	rjmp	.+126    	; 0x2eb4 <H_LCD_void_latchByte+0x3ae>
	else if (__tmp > 65535)
    2e36:	6b a1       	ldd	r22, Y+35	; 0x23
    2e38:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4a:	18 16       	cp	r1, r24
    2e4c:	4c f5       	brge	.+82     	; 0x2ea0 <H_LCD_void_latchByte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2e50:	78 a5       	ldd	r23, Y+40	; 0x28
    2e52:	89 a5       	ldd	r24, Y+41	; 0x29
    2e54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e2       	ldi	r20, 0x20	; 32
    2e5c:	51 e4       	ldi	r21, 0x41	; 65
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9a a3       	std	Y+34, r25	; 0x22
    2e74:	89 a3       	std	Y+33, r24	; 0x21
    2e76:	0f c0       	rjmp	.+30     	; 0x2e96 <H_LCD_void_latchByte+0x390>
    2e78:	80 e9       	ldi	r24, 0x90	; 144
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	98 a3       	std	Y+32, r25	; 0x20
    2e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e82:	98 a1       	ldd	r25, Y+32	; 0x20
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <H_LCD_void_latchByte+0x37e>
    2e88:	98 a3       	std	Y+32, r25	; 0x20
    2e8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	9a a3       	std	Y+34, r25	; 0x22
    2e94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	89 a1       	ldd	r24, Y+33	; 0x21
    2e98:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	69 f7       	brne	.-38     	; 0x2e78 <H_LCD_void_latchByte+0x372>
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <H_LCD_void_latchByte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9a a3       	std	Y+34, r25	; 0x22
    2eb2:	89 a3       	std	Y+33, r24	; 0x21
    2eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eba:	8d 8f       	std	Y+29, r24	; 0x1d
    2ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <H_LCD_void_latchByte+0x3ba>
    2ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,0));
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e9 5b       	subi	r30, 0xB9	; 185
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	21 70       	andi	r18, 0x01	; 1
    2ed4:	86 e3       	ldi	r24, 0x36	; 54
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	42 2f       	mov	r20, r18
    2edc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,1));
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e9 5b       	subi	r30, 0xB9	; 185
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 2f       	mov	r24, r24
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	82 70       	andi	r24, 0x02	; 2
    2eee:	90 70       	andi	r25, 0x00	; 0
    2ef0:	95 95       	asr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	86 e3       	ldi	r24, 0x36	; 54
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	42 2f       	mov	r20, r18
    2efe:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,2));
    2f02:	fe 01       	movw	r30, r28
    2f04:	e9 5b       	subi	r30, 0xB9	; 185
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	84 70       	andi	r24, 0x04	; 4
    2f10:	90 70       	andi	r25, 0x00	; 0
    2f12:	95 95       	asr	r25
    2f14:	87 95       	ror	r24
    2f16:	95 95       	asr	r25
    2f18:	87 95       	ror	r24
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	86 e3       	ldi	r24, 0x36	; 54
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	62 e0       	ldi	r22, 0x02	; 2
    2f22:	42 2f       	mov	r20, r18
    2f24:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,3));
    2f28:	fe 01       	movw	r30, r28
    2f2a:	e9 5b       	subi	r30, 0xB9	; 185
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	80 81       	ld	r24, Z
    2f30:	88 2f       	mov	r24, r24
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	88 70       	andi	r24, 0x08	; 8
    2f36:	90 70       	andi	r25, 0x00	; 0
    2f38:	95 95       	asr	r25
    2f3a:	87 95       	ror	r24
    2f3c:	95 95       	asr	r25
    2f3e:	87 95       	ror	r24
    2f40:	95 95       	asr	r25
    2f42:	87 95       	ror	r24
    2f44:	28 2f       	mov	r18, r24
    2f46:	86 e3       	ldi	r24, 0x36	; 54
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	64 e0       	ldi	r22, 0x04	; 4
    2f4c:	42 2f       	mov	r20, r18
    2f4e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    2f52:	89 e3       	ldi	r24, 0x39	; 57
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 e8       	ldi	r26, 0x80	; 128
    2f64:	bf e3       	ldi	r27, 0x3F	; 63
    2f66:	89 8f       	std	Y+25, r24	; 0x19
    2f68:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a e7       	ldi	r20, 0x7A	; 122
    2f7c:	55 e4       	ldi	r21, 0x45	; 69
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	8d 8b       	std	Y+21, r24	; 0x15
    2f88:	9e 8b       	std	Y+22, r25	; 0x16
    2f8a:	af 8b       	std	Y+23, r26	; 0x17
    2f8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f90:	7e 89       	ldd	r23, Y+22	; 0x16
    2f92:	8f 89       	ldd	r24, Y+23	; 0x17
    2f94:	98 8d       	ldd	r25, Y+24	; 0x18
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	2c f4       	brge	.+10     	; 0x2fb0 <H_LCD_void_latchByte+0x4aa>
		__ticks = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9c 8b       	std	Y+20, r25	; 0x14
    2fac:	8b 8b       	std	Y+19, r24	; 0x13
    2fae:	3f c0       	rjmp	.+126    	; 0x302e <H_LCD_void_latchByte+0x528>
	else if (__tmp > 65535)
    2fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	4c f5       	brge	.+82     	; 0x301a <H_LCD_void_latchByte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9c 8b       	std	Y+20, r25	; 0x14
    2fee:	8b 8b       	std	Y+19, r24	; 0x13
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <H_LCD_void_latchByte+0x50a>
    2ff2:	80 e9       	ldi	r24, 0x90	; 144
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	9a 8b       	std	Y+18, r25	; 0x12
    2ff8:	89 8b       	std	Y+17, r24	; 0x11
    2ffa:	89 89       	ldd	r24, Y+17	; 0x11
    2ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <H_LCD_void_latchByte+0x4f8>
    3002:	9a 8b       	std	Y+18, r25	; 0x12
    3004:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	9c 89       	ldd	r25, Y+20	; 0x14
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	9c 8b       	std	Y+20, r25	; 0x14
    300e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3010:	8b 89       	ldd	r24, Y+19	; 0x13
    3012:	9c 89       	ldd	r25, Y+20	; 0x14
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <H_LCD_void_latchByte+0x4ec>
    3018:	14 c0       	rjmp	.+40     	; 0x3042 <H_LCD_void_latchByte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	6d 89       	ldd	r22, Y+21	; 0x15
    301c:	7e 89       	ldd	r23, Y+22	; 0x16
    301e:	8f 89       	ldd	r24, Y+23	; 0x17
    3020:	98 8d       	ldd	r25, Y+24	; 0x18
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	8b 89       	ldd	r24, Y+19	; 0x13
    3030:	9c 89       	ldd	r25, Y+20	; 0x14
    3032:	98 8b       	std	Y+16, r25	; 0x10
    3034:	8f 87       	std	Y+15, r24	; 0x0f
    3036:	8f 85       	ldd	r24, Y+15	; 0x0f
    3038:	98 89       	ldd	r25, Y+16	; 0x10
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <H_LCD_void_latchByte+0x534>
    303e:	98 8b       	std	Y+16, r25	; 0x10
    3040:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    3042:	89 e3       	ldi	r24, 0x39	; 57
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a0 ea       	ldi	r26, 0xA0	; 160
    3054:	b0 e4       	ldi	r27, 0x40	; 64
    3056:	8b 87       	std	Y+11, r24	; 0x0b
    3058:	9c 87       	std	Y+12, r25	; 0x0c
    305a:	ad 87       	std	Y+13, r26	; 0x0d
    305c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3060:	7c 85       	ldd	r23, Y+12	; 0x0c
    3062:	8d 85       	ldd	r24, Y+13	; 0x0d
    3064:	9e 85       	ldd	r25, Y+14	; 0x0e
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	4a e7       	ldi	r20, 0x7A	; 122
    306c:	55 e4       	ldi	r21, 0x45	; 69
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8f 83       	std	Y+7, r24	; 0x07
    3078:	98 87       	std	Y+8, r25	; 0x08
    307a:	a9 87       	std	Y+9, r26	; 0x09
    307c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e8       	ldi	r20, 0x80	; 128
    308c:	5f e3       	ldi	r21, 0x3F	; 63
    308e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	2c f4       	brge	.+10     	; 0x30a0 <H_LCD_void_latchByte+0x59a>
		__ticks = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	3f c0       	rjmp	.+126    	; 0x311e <H_LCD_void_latchByte+0x618>
	else if (__tmp > 65535)
    30a0:	6f 81       	ldd	r22, Y+7	; 0x07
    30a2:	78 85       	ldd	r23, Y+8	; 0x08
    30a4:	89 85       	ldd	r24, Y+9	; 0x09
    30a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b4:	18 16       	cp	r1, r24
    30b6:	4c f5       	brge	.+82     	; 0x310a <H_LCD_void_latchByte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    30bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30be:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e2       	ldi	r20, 0x20	; 32
    30c6:	51 e4       	ldi	r21, 0x41	; 65
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
    30e0:	0f c0       	rjmp	.+30     	; 0x3100 <H_LCD_void_latchByte+0x5fa>
    30e2:	80 e9       	ldi	r24, 0x90	; 144
    30e4:	91 e0       	ldi	r25, 0x01	; 1
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	8b 83       	std	Y+3, r24	; 0x03
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	f1 f7       	brne	.-4      	; 0x30ee <H_LCD_void_latchByte+0x5e8>
    30f2:	9c 83       	std	Y+4, r25	; 0x04
    30f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	9e 83       	std	Y+6, r25	; 0x06
    30fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	9e 81       	ldd	r25, Y+6	; 0x06
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	69 f7       	brne	.-38     	; 0x30e2 <H_LCD_void_latchByte+0x5dc>
    3108:	14 c0       	rjmp	.+40     	; 0x3132 <H_LCD_void_latchByte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310a:	6f 81       	ldd	r22, Y+7	; 0x07
    310c:	78 85       	ldd	r23, Y+8	; 0x08
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	9e 83       	std	Y+6, r25	; 0x06
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	8d 81       	ldd	r24, Y+5	; 0x05
    3120:	9e 81       	ldd	r25, Y+6	; 0x06
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <H_LCD_void_latchByte+0x624>
    312e:	9a 83       	std	Y+2, r25	; 0x02
    3130:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3132:	c9 5b       	subi	r28, 0xB9	; 185
    3134:	df 4f       	sbci	r29, 0xFF	; 255
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	08 95       	ret

0000314a <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(uint8 copy_u8command)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	0f 92       	push	r0
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    3156:	89 e3       	ldi	r24, 0x39	; 57
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	63 e0       	ldi	r22, 0x03	; 3
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	0e 94 83 15 	call	0x2b06	; 0x2b06 <H_LCD_void_latchByte>
}
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <H_LCD_void_sendData>:

void H_LCD_void_sendData(uint8 copy_u8data )
{
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    317c:	89 e3       	ldi	r24, 0x39	; 57
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	63 e0       	ldi	r22, 0x03	; 3
    3182:	41 e0       	ldi	r20, 0x01	; 1
    3184:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <H_LCD_void_latchByte>
}
    318e:	0f 90       	pop	r0
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const sint8 * pstr)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <H_LCD_void_sendString+0x6>
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	9b 83       	std	Y+3, r25	; 0x03
    31a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    31a6:	19 82       	std	Y+1, r1	; 0x01
    31a8:	0e c0       	rjmp	.+28     	; 0x31c6 <H_LCD_void_sendString+0x30>
	for(;pstr[i]!='\0';i++)
	{
		H_LCD_void_sendData(pstr[i]);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	fc 01       	movw	r30, r24
    31b6:	e2 0f       	add	r30, r18
    31b8:	f3 1f       	adc	r31, r19
    31ba:	80 81       	ld	r24, Z
    31bc:	0e 94 b8 18 	call	0x3170	; 0x3170 <H_LCD_void_sendData>
}

void H_LCD_void_sendString(const sint8 * pstr)
{
	uint8 i=0;
	for(;pstr[i]!='\0';i++)
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	fc 01       	movw	r30, r24
    31d2:	e2 0f       	add	r30, r18
    31d4:	f3 1f       	adc	r31, r19
    31d6:	80 81       	ld	r24, Z
    31d8:	88 23       	and	r24, r24
    31da:	39 f7       	brne	.-50     	; 0x31aa <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[i]);
	}
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <H_LCD_void_sendIntNum>:


char buff[16]; /* String to hold the ascii result */

void H_LCD_void_sendIntNum(sint32 copy_s32Num)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	64 97       	sbiw	r28, 0x14	; 20
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61
    31fc:	69 8b       	std	Y+17, r22	; 0x11
    31fe:	7a 8b       	std	Y+18, r23	; 0x12
    3200:	8b 8b       	std	Y+19, r24	; 0x13
    3202:	9c 8b       	std	Y+20, r25	; 0x14
	sint8 buff[16];
	itoa(copy_s32Num,buff,10);
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	9a 89       	ldd	r25, Y+18	; 0x12
    3208:	9e 01       	movw	r18, r28
    320a:	2f 5f       	subi	r18, 0xFF	; 255
    320c:	3f 4f       	sbci	r19, 0xFF	; 255
    320e:	b9 01       	movw	r22, r18
    3210:	4a e0       	ldi	r20, 0x0A	; 10
    3212:	50 e0       	ldi	r21, 0x00	; 0
    3214:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <itoa>
	H_LCD_void_sendString(buff);
    3218:	ce 01       	movw	r24, r28
    321a:	01 96       	adiw	r24, 0x01	; 1
    321c:	0e 94 cb 18 	call	0x3196	; 0x3196 <H_LCD_void_sendString>
}
    3220:	64 96       	adiw	r28, 0x14	; 20
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <H_LCD_void_Clear>:

void H_LCD_void_Clear()
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <H_LCD_CreateCustomChar>:


void H_LCD_CreateCustomChar(const uint8 *ArrPattern, uint8 charCode) {
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	00 d0       	rcall	.+0      	; 0x324c <H_LCD_CreateCustomChar+0x6>
    324c:	00 d0       	rcall	.+0      	; 0x324e <H_LCD_CreateCustomChar+0x8>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	8a 83       	std	Y+2, r24	; 0x02
    3256:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	charCode &= 0x07;  // Make sure the charCode is in the range 0-7
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	87 70       	andi	r24, 0x07	; 7
    325c:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(0x40 + (charCode * 8));  // Set CGRAM address for the custom character
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	08 96       	adiw	r24, 0x08	; 8
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>

	for (i = 0; i < 8; i++) {
    3276:	19 82       	std	Y+1, r1	; 0x01
    3278:	0e c0       	rjmp	.+28     	; 0x3296 <H_LCD_CreateCustomChar+0x50>
		H_LCD_void_sendCommand(ArrPattern[i]);  // Send the custom character pattern to CGRAM
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	fc 01       	movw	r30, r24
    3286:	e2 0f       	add	r30, r18
    3288:	f3 1f       	adc	r31, r19
    328a:	80 81       	ld	r24, Z
    328c:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
void H_LCD_CreateCustomChar(const uint8 *ArrPattern, uint8 charCode) {
	uint8 i;
	charCode &= 0x07;  // Make sure the charCode is in the range 0-7
	H_LCD_void_sendCommand(0x40 + (charCode * 8));  // Set CGRAM address for the custom character

	for (i = 0; i < 8; i++) {
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	8f 5f       	subi	r24, 0xFF	; 255
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	88 30       	cpi	r24, 0x08	; 8
    329a:	78 f3       	brcs	.-34     	; 0x327a <H_LCD_CreateCustomChar+0x34>
		H_LCD_void_sendCommand(ArrPattern[i]);  // Send the custom character pattern to CGRAM
	}
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <H_LCD_DisplayCustomChar>:

void H_LCD_DisplayCustomChar(uint8 charCode) {
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	0f 92       	push	r0
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	89 83       	std	Y+1, r24	; 0x01
	charCode &= 0x07;  // Make sure the charCode is in the range 0-7
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	87 70       	andi	r24, 0x07	; 7
    32ba:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_sendData(charCode);  // Display the custom character on the LCD
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	0e 94 b8 18 	call	0x3170	; 0x3170 <H_LCD_void_sendData>
}
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(uint8 copy_u8Row, uint8 copy_u8Col)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <H_LCD_void_gotoXY+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <H_LCD_void_gotoXY+0x8>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <H_LCD_void_gotoXY+0xa>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	8d 83       	std	Y+5, r24	; 0x05
    32da:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    32dc:	80 e8       	ldi	r24, 0x80	; 128
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	80 ec       	ldi	r24, 0xC0	; 192
    32e2:	8a 83       	std	Y+2, r24	; 0x02
    32e4:	84 e9       	ldi	r24, 0x94	; 148
    32e6:	8b 83       	std	Y+3, r24	; 0x03
    32e8:	84 ed       	ldi	r24, 0xD4	; 212
    32ea:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(Local_U8_Arr[copy_u8Row] + copy_u8Col);
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	ce 01       	movw	r24, r28
    32f4:	01 96       	adiw	r24, 0x01	; 1
    32f6:	fc 01       	movw	r30, r24
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	90 81       	ld	r25, Z
    32fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3300:	89 0f       	add	r24, r25
    3302:	0e 94 a5 18 	call	0x314a	; 0x314a <H_LCD_void_sendCommand>
}
    3306:	26 96       	adiw	r28, 0x06	; 6
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <Keypad_adjustKeyNum>:
 */

#include "inc/keypad.h"

uint8 Keypad_adjustKeyNum(uint8 buttonNum)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <Keypad_adjustKeyNum+0x6>
    331e:	00 d0       	rcall	.+0      	; 0x3320 <Keypad_adjustKeyNum+0x8>
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	8a 83       	std	Y+2, r24	; 0x02
	uint8 button=0;
    3326:	19 82       	std	Y+1, r1	; 0x01
	switch(buttonNum)
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	28 2f       	mov	r18, r24
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	3c 83       	std	Y+4, r19	; 0x04
    3330:	2b 83       	std	Y+3, r18	; 0x03
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	88 30       	cpi	r24, 0x08	; 8
    3338:	91 05       	cpc	r25, r1
    333a:	09 f4       	brne	.+2      	; 0x333e <Keypad_adjustKeyNum+0x26>
    333c:	70 c0       	rjmp	.+224    	; 0x341e <Keypad_adjustKeyNum+0x106>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	29 30       	cpi	r18, 0x09	; 9
    3344:	31 05       	cpc	r19, r1
    3346:	5c f5       	brge	.+86     	; 0x339e <Keypad_adjustKeyNum+0x86>
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	84 30       	cpi	r24, 0x04	; 4
    334e:	91 05       	cpc	r25, r1
    3350:	09 f4       	brne	.+2      	; 0x3354 <Keypad_adjustKeyNum+0x3c>
    3352:	59 c0       	rjmp	.+178    	; 0x3406 <Keypad_adjustKeyNum+0xee>
    3354:	2b 81       	ldd	r18, Y+3	; 0x03
    3356:	3c 81       	ldd	r19, Y+4	; 0x04
    3358:	25 30       	cpi	r18, 0x05	; 5
    335a:	31 05       	cpc	r19, r1
    335c:	9c f4       	brge	.+38     	; 0x3384 <Keypad_adjustKeyNum+0x6c>
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	9c 81       	ldd	r25, Y+4	; 0x04
    3362:	82 30       	cpi	r24, 0x02	; 2
    3364:	91 05       	cpc	r25, r1
    3366:	09 f4       	brne	.+2      	; 0x336a <Keypad_adjustKeyNum+0x52>
    3368:	48 c0       	rjmp	.+144    	; 0x33fa <Keypad_adjustKeyNum+0xe2>
    336a:	2b 81       	ldd	r18, Y+3	; 0x03
    336c:	3c 81       	ldd	r19, Y+4	; 0x04
    336e:	23 30       	cpi	r18, 0x03	; 3
    3370:	31 05       	cpc	r19, r1
    3372:	0c f0       	brlt	.+2      	; 0x3376 <Keypad_adjustKeyNum+0x5e>
    3374:	45 c0       	rjmp	.+138    	; 0x3400 <Keypad_adjustKeyNum+0xe8>
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	81 30       	cpi	r24, 0x01	; 1
    337c:	91 05       	cpc	r25, r1
    337e:	09 f4       	brne	.+2      	; 0x3382 <Keypad_adjustKeyNum+0x6a>
    3380:	39 c0       	rjmp	.+114    	; 0x33f4 <Keypad_adjustKeyNum+0xdc>
    3382:	67 c0       	rjmp	.+206    	; 0x3452 <Keypad_adjustKeyNum+0x13a>
    3384:	2b 81       	ldd	r18, Y+3	; 0x03
    3386:	3c 81       	ldd	r19, Y+4	; 0x04
    3388:	26 30       	cpi	r18, 0x06	; 6
    338a:	31 05       	cpc	r19, r1
    338c:	09 f4       	brne	.+2      	; 0x3390 <Keypad_adjustKeyNum+0x78>
    338e:	41 c0       	rjmp	.+130    	; 0x3412 <Keypad_adjustKeyNum+0xfa>
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	9c 81       	ldd	r25, Y+4	; 0x04
    3394:	87 30       	cpi	r24, 0x07	; 7
    3396:	91 05       	cpc	r25, r1
    3398:	0c f0       	brlt	.+2      	; 0x339c <Keypad_adjustKeyNum+0x84>
    339a:	3e c0       	rjmp	.+124    	; 0x3418 <Keypad_adjustKeyNum+0x100>
    339c:	37 c0       	rjmp	.+110    	; 0x340c <Keypad_adjustKeyNum+0xf4>
    339e:	2b 81       	ldd	r18, Y+3	; 0x03
    33a0:	3c 81       	ldd	r19, Y+4	; 0x04
    33a2:	2c 30       	cpi	r18, 0x0C	; 12
    33a4:	31 05       	cpc	r19, r1
    33a6:	09 f4       	brne	.+2      	; 0x33aa <Keypad_adjustKeyNum+0x92>
    33a8:	46 c0       	rjmp	.+140    	; 0x3436 <Keypad_adjustKeyNum+0x11e>
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	8d 30       	cpi	r24, 0x0D	; 13
    33b0:	91 05       	cpc	r25, r1
    33b2:	5c f4       	brge	.+22     	; 0x33ca <Keypad_adjustKeyNum+0xb2>
    33b4:	2b 81       	ldd	r18, Y+3	; 0x03
    33b6:	3c 81       	ldd	r19, Y+4	; 0x04
    33b8:	2a 30       	cpi	r18, 0x0A	; 10
    33ba:	31 05       	cpc	r19, r1
    33bc:	b1 f1       	breq	.+108    	; 0x342a <Keypad_adjustKeyNum+0x112>
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	8b 30       	cpi	r24, 0x0B	; 11
    33c4:	91 05       	cpc	r25, r1
    33c6:	a4 f5       	brge	.+104    	; 0x3430 <Keypad_adjustKeyNum+0x118>
    33c8:	2d c0       	rjmp	.+90     	; 0x3424 <Keypad_adjustKeyNum+0x10c>
    33ca:	2b 81       	ldd	r18, Y+3	; 0x03
    33cc:	3c 81       	ldd	r19, Y+4	; 0x04
    33ce:	2e 30       	cpi	r18, 0x0E	; 14
    33d0:	31 05       	cpc	r19, r1
    33d2:	b9 f1       	breq	.+110    	; 0x3442 <Keypad_adjustKeyNum+0x12a>
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	8e 30       	cpi	r24, 0x0E	; 14
    33da:	91 05       	cpc	r25, r1
    33dc:	7c f1       	brlt	.+94     	; 0x343c <Keypad_adjustKeyNum+0x124>
    33de:	2b 81       	ldd	r18, Y+3	; 0x03
    33e0:	3c 81       	ldd	r19, Y+4	; 0x04
    33e2:	2f 30       	cpi	r18, 0x0F	; 15
    33e4:	31 05       	cpc	r19, r1
    33e6:	79 f1       	breq	.+94     	; 0x3446 <Keypad_adjustKeyNum+0x12e>
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	80 31       	cpi	r24, 0x10	; 16
    33ee:	91 05       	cpc	r25, r1
    33f0:	69 f1       	breq	.+90     	; 0x344c <Keypad_adjustKeyNum+0x134>
    33f2:	2f c0       	rjmp	.+94     	; 0x3452 <Keypad_adjustKeyNum+0x13a>
	{
	case 1:
		button=7;
    33f4:	87 e0       	ldi	r24, 0x07	; 7
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	2e c0       	rjmp	.+92     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 2:
		button=8;
    33fa:	88 e0       	ldi	r24, 0x08	; 8
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	2b c0       	rjmp	.+86     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 3:
		button=9;
    3400:	89 e0       	ldi	r24, 0x09	; 9
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	28 c0       	rjmp	.+80     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 4:
		button='%';
    3406:	85 e2       	ldi	r24, 0x25	; 37
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	25 c0       	rjmp	.+74     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 5:
		button=4;
    340c:	84 e0       	ldi	r24, 0x04	; 4
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	22 c0       	rjmp	.+68     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 6:
		button=5;
    3412:	85 e0       	ldi	r24, 0x05	; 5
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	1f c0       	rjmp	.+62     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 7:
		button=6;
    3418:	86 e0       	ldi	r24, 0x06	; 6
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	1c c0       	rjmp	.+56     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 8:
		button='*';
    341e:	8a e2       	ldi	r24, 0x2A	; 42
    3420:	89 83       	std	Y+1, r24	; 0x01
    3422:	19 c0       	rjmp	.+50     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 9:
		button=1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	89 83       	std	Y+1, r24	; 0x01
    3428:	16 c0       	rjmp	.+44     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 10:
		button=2;
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	89 83       	std	Y+1, r24	; 0x01
    342e:	13 c0       	rjmp	.+38     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 11:
		button=3;
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	10 c0       	rjmp	.+32     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 12:
		button='-';
    3436:	8d e2       	ldi	r24, 0x2D	; 45
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	0d c0       	rjmp	.+26     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 13:
		button=13;
    343c:	8d e0       	ldi	r24, 0x0D	; 13
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	0a c0       	rjmp	.+20     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 14:
		button=0;
    3442:	19 82       	std	Y+1, r1	; 0x01
    3444:	08 c0       	rjmp	.+16     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 15:
		button='=';
    3446:	8d e3       	ldi	r24, 0x3D	; 61
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	case 16:
		button='+';
    344c:	8b e2       	ldi	r24, 0x2B	; 43
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <Keypad_adjustKeyNum+0x13e>
		break;
	default :
		button=buttonNum;
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey(void)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	00 d0       	rcall	.+0      	; 0x346c <Keypad_getPressedKey+0x6>
    346c:	00 d0       	rcall	.+0      	; 0x346e <Keypad_getPressedKey+0x8>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <Keypad_getPressedKey+0xa>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 key=0;
    3474:	1a 82       	std	Y+2, r1	; 0x02
	uint8 keypad_port_value=0;
    3476:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		for(col=0;col<4;col++)
    3478:	1b 82       	std	Y+3, r1	; 0x03
    347a:	7a c0       	rjmp	.+244    	; 0x3570 <Keypad_getPressedKey+0x10a>
		{
			DIO_voidSetPortDirection(PORTD_BASE,INPUT);
    347c:	80 e3       	ldi	r24, 0x30	; 48
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	60 e0       	ldi	r22, 0x00	; 0
    3482:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_voidSetPortDirection>
			switch(col)
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	3e 83       	std	Y+6, r19	; 0x06
    348e:	2d 83       	std	Y+5, r18	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	81 30       	cpi	r24, 0x01	; 1
    3496:	91 05       	cpc	r25, r1
    3498:	f1 f0       	breq	.+60     	; 0x34d6 <Keypad_getPressedKey+0x70>
    349a:	2d 81       	ldd	r18, Y+5	; 0x05
    349c:	3e 81       	ldd	r19, Y+6	; 0x06
    349e:	22 30       	cpi	r18, 0x02	; 2
    34a0:	31 05       	cpc	r19, r1
    34a2:	2c f4       	brge	.+10     	; 0x34ae <Keypad_getPressedKey+0x48>
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	61 f0       	breq	.+24     	; 0x34c4 <Keypad_getPressedKey+0x5e>
    34ac:	2e c0       	rjmp	.+92     	; 0x350a <Keypad_getPressedKey+0xa4>
    34ae:	2d 81       	ldd	r18, Y+5	; 0x05
    34b0:	3e 81       	ldd	r19, Y+6	; 0x06
    34b2:	22 30       	cpi	r18, 0x02	; 2
    34b4:	31 05       	cpc	r19, r1
    34b6:	c1 f0       	breq	.+48     	; 0x34e8 <Keypad_getPressedKey+0x82>
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	9e 81       	ldd	r25, Y+6	; 0x06
    34bc:	83 30       	cpi	r24, 0x03	; 3
    34be:	91 05       	cpc	r25, r1
    34c0:	e1 f0       	breq	.+56     	; 0x34fa <Keypad_getPressedKey+0x94>
    34c2:	23 c0       	rjmp	.+70     	; 0x350a <Keypad_getPressedKey+0xa4>
			{
			case 0:
				DIO_voidSetPinDirection(PORTD_BASE,PIN7,OUTPUT);
    34c4:	80 e3       	ldi	r24, 0x30	; 48
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	67 e0       	ldi	r22, 0x07	; 7
    34ca:	41 e0       	ldi	r20, 0x01	; 1
    34cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN7);
    34d0:	8f e7       	ldi	r24, 0x7F	; 127
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	1a c0       	rjmp	.+52     	; 0x350a <Keypad_getPressedKey+0xa4>
				break;
			case 1:
				DIO_voidSetPinDirection(PORTD_BASE,PIN6,OUTPUT);
    34d6:	80 e3       	ldi	r24, 0x30	; 48
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	66 e0       	ldi	r22, 0x06	; 6
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN6);
    34e2:	8f eb       	ldi	r24, 0xBF	; 191
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	11 c0       	rjmp	.+34     	; 0x350a <Keypad_getPressedKey+0xa4>
				break;
			case 2:
				DIO_voidSetPinDirection(PORTD_BASE,PIN5,OUTPUT);
    34e8:	80 e3       	ldi	r24, 0x30	; 48
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	65 e0       	ldi	r22, 0x05	; 5
    34ee:	41 e0       	ldi	r20, 0x01	; 1
    34f0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN5);
    34f4:	8f ed       	ldi	r24, 0xDF	; 223
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	08 c0       	rjmp	.+16     	; 0x350a <Keypad_getPressedKey+0xa4>
				break;
			case 3:
				DIO_voidSetPinDirection(PORTD_BASE,PIN3,OUTPUT);
    34fa:	80 e3       	ldi	r24, 0x30	; 48
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	63 e0       	ldi	r22, 0x03	; 3
    3500:	41 e0       	ldi	r20, 0x01	; 1
    3502:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN3);
    3506:	87 ef       	ldi	r24, 0xF7	; 247
    3508:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);
    350a:	80 e3       	ldi	r24, 0x30	; 48
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	69 81       	ldd	r22, Y+1	; 0x01
    3510:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_voidSetPortValue>

			for(row=0;row<4;row++)
    3514:	1c 82       	std	Y+4, r1	; 0x04
    3516:	26 c0       	rjmp	.+76     	; 0x3564 <Keypad_getPressedKey+0xfe>
			{
				if(DIO_voidGetPinValue(PORTC_BASE,PIN5-row)==LOGIC_LOW)
    3518:	95 e0       	ldi	r25, 0x05	; 5
    351a:	8c 81       	ldd	r24, Y+4	; 0x04
    351c:	29 2f       	mov	r18, r25
    351e:	28 1b       	sub	r18, r24
    3520:	83 e3       	ldi	r24, 0x33	; 51
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	62 2f       	mov	r22, r18
    3526:	0e 94 ef 07 	call	0xfde	; 0xfde <DIO_voidGetPinValue>
    352a:	88 23       	and	r24, r24
    352c:	c1 f4       	brne	.+48     	; 0x355e <Keypad_getPressedKey+0xf8>
				{
					key=Keypad_adjustKeyNum((row*4)+col+1);
    352e:	8c 81       	ldd	r24, Y+4	; 0x04
    3530:	88 2f       	mov	r24, r24
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	98 2f       	mov	r25, r24
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	89 0f       	add	r24, r25
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	0e 94 8c 19 	call	0x3318	; 0x3318 <Keypad_adjustKeyNum>
    3548:	8a 83       	std	Y+2, r24	; 0x02
					return key;
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
				}
			}
		}

	}
}
    354c:	26 96       	adiw	r28, 0x06	; 6
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret
				keypad_port_value = ~(1<<PIN3);
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);

			for(row=0;row<4;row++)
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	8c 83       	std	Y+4, r24	; 0x04
    3564:	8c 81       	ldd	r24, Y+4	; 0x04
    3566:	84 30       	cpi	r24, 0x04	; 4
    3568:	b8 f2       	brcs	.-82     	; 0x3518 <Keypad_getPressedKey+0xb2>
	uint8 key=0;
	uint8 keypad_port_value=0;

	while(1)
	{
		for(col=0;col<4;col++)
    356a:	8b 81       	ldd	r24, Y+3	; 0x03
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	8b 83       	std	Y+3, r24	; 0x03
    3570:	8b 81       	ldd	r24, Y+3	; 0x03
    3572:	84 30       	cpi	r24, 0x04	; 4
    3574:	08 f4       	brcc	.+2      	; 0x3578 <Keypad_getPressedKey+0x112>
    3576:	82 cf       	rjmp	.-252    	; 0x347c <Keypad_getPressedKey+0x16>
    3578:	7f cf       	rjmp	.-258    	; 0x3478 <Keypad_getPressedKey+0x12>

0000357a <SevenSeg_Init>:
 */

#include "inc\segment7_driver.h"

void SevenSeg_Init()
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTB_BASE,PIN0,OUTPUT);
    3582:	86 e3       	ldi	r24, 0x36	; 54
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN1,OUTPUT);
    358e:	86 e3       	ldi	r24, 0x36	; 54
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	41 e0       	ldi	r20, 0x01	; 1
    3596:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN2,OUTPUT);
    359a:	86 e3       	ldi	r24, 0x36	; 54
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	62 e0       	ldi	r22, 0x02	; 2
    35a0:	41 e0       	ldi	r20, 0x01	; 1
    35a2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN4,OUTPUT);
    35a6:	86 e3       	ldi	r24, 0x36	; 54
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	64 e0       	ldi	r22, 0x04	; 4
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PORTB_BASE,PIN0,INPUT);
    35b2:	86 e3       	ldi	r24, 0x36	; 54
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	60 e0       	ldi	r22, 0x00	; 0
    35b8:	40 e0       	ldi	r20, 0x00	; 0
    35ba:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN1,INPUT);
    35be:	86 e3       	ldi	r24, 0x36	; 54
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	61 e0       	ldi	r22, 0x01	; 1
    35c4:	40 e0       	ldi	r20, 0x00	; 0
    35c6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN2,INPUT);
    35ca:	86 e3       	ldi	r24, 0x36	; 54
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	62 e0       	ldi	r22, 0x02	; 2
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN4,INPUT);
    35d6:	86 e3       	ldi	r24, 0x36	; 54
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	64 e0       	ldi	r22, 0x04	; 4
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORTA_BASE,PIN3,OUTPUT);
    35e2:	89 e3       	ldi	r24, 0x39	; 57
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	63 e0       	ldi	r22, 0x03	; 3
    35e8:	41 e0       	ldi	r20, 0x01	; 1
    35ea:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN3,LOGIC_LOW);
    35ee:	89 e3       	ldi	r24, 0x39	; 57
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	63 e0       	ldi	r22, 0x03	; 3
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTA_BASE,PIN2,OUTPUT);
    35fa:	89 e3       	ldi	r24, 0x39	; 57
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	62 e0       	ldi	r22, 0x02	; 2
    3600:	41 e0       	ldi	r20, 0x01	; 1
    3602:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN2,LOGIC_LOW);
    3606:	89 e3       	ldi	r24, 0x39	; 57
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	62 e0       	ldi	r22, 0x02	; 2
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN5,OUTPUT);
    3612:	86 e3       	ldi	r24, 0x36	; 54
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	65 e0       	ldi	r22, 0x05	; 5
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN5,LOGIC_LOW);
    361e:	86 e3       	ldi	r24, 0x36	; 54
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	65 e0       	ldi	r22, 0x05	; 5
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN6,OUTPUT);
    362a:	86 e3       	ldi	r24, 0x36	; 54
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	66 e0       	ldi	r22, 0x06	; 6
    3630:	41 e0       	ldi	r20, 0x01	; 1
    3632:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN6,LOGIC_LOW);
    3636:	86 e3       	ldi	r24, 0x36	; 54
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	66 e0       	ldi	r22, 0x06	; 6
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
}
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <SevenSeg_Num>:


void SevenSeg_Num(uint8 num)
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	00 d0       	rcall	.+0      	; 0x364e <SevenSeg_Num+0x6>
    364e:	0f 92       	push	r0
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	3b 83       	std	Y+3, r19	; 0x03
    365e:	2a 83       	std	Y+2, r18	; 0x02
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	9b 81       	ldd	r25, Y+3	; 0x03
    3664:	84 30       	cpi	r24, 0x04	; 4
    3666:	91 05       	cpc	r25, r1
    3668:	09 f4       	brne	.+2      	; 0x366c <SevenSeg_Num+0x24>
    366a:	ab c0       	rjmp	.+342    	; 0x37c2 <SevenSeg_Num+0x17a>
    366c:	2a 81       	ldd	r18, Y+2	; 0x02
    366e:	3b 81       	ldd	r19, Y+3	; 0x03
    3670:	25 30       	cpi	r18, 0x05	; 5
    3672:	31 05       	cpc	r19, r1
    3674:	ec f4       	brge	.+58     	; 0x36b0 <SevenSeg_Num+0x68>
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	9b 81       	ldd	r25, Y+3	; 0x03
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	91 05       	cpc	r25, r1
    367e:	09 f4       	brne	.+2      	; 0x3682 <SevenSeg_Num+0x3a>
    3680:	55 c0       	rjmp	.+170    	; 0x372c <SevenSeg_Num+0xe4>
    3682:	2a 81       	ldd	r18, Y+2	; 0x02
    3684:	3b 81       	ldd	r19, Y+3	; 0x03
    3686:	22 30       	cpi	r18, 0x02	; 2
    3688:	31 05       	cpc	r19, r1
    368a:	2c f4       	brge	.+10     	; 0x3696 <SevenSeg_Num+0x4e>
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	9b 81       	ldd	r25, Y+3	; 0x03
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	99 f1       	breq	.+102    	; 0x36fa <SevenSeg_Num+0xb2>
    3694:	2b c1       	rjmp	.+598    	; 0x38ec <SevenSeg_Num+0x2a4>
    3696:	2a 81       	ldd	r18, Y+2	; 0x02
    3698:	3b 81       	ldd	r19, Y+3	; 0x03
    369a:	22 30       	cpi	r18, 0x02	; 2
    369c:	31 05       	cpc	r19, r1
    369e:	09 f4       	brne	.+2      	; 0x36a2 <SevenSeg_Num+0x5a>
    36a0:	5e c0       	rjmp	.+188    	; 0x375e <SevenSeg_Num+0x116>
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	83 30       	cpi	r24, 0x03	; 3
    36a8:	91 05       	cpc	r25, r1
    36aa:	09 f4       	brne	.+2      	; 0x36ae <SevenSeg_Num+0x66>
    36ac:	71 c0       	rjmp	.+226    	; 0x3790 <SevenSeg_Num+0x148>
    36ae:	1e c1       	rjmp	.+572    	; 0x38ec <SevenSeg_Num+0x2a4>
    36b0:	2a 81       	ldd	r18, Y+2	; 0x02
    36b2:	3b 81       	ldd	r19, Y+3	; 0x03
    36b4:	27 30       	cpi	r18, 0x07	; 7
    36b6:	31 05       	cpc	r19, r1
    36b8:	09 f4       	brne	.+2      	; 0x36bc <SevenSeg_Num+0x74>
    36ba:	ce c0       	rjmp	.+412    	; 0x3858 <SevenSeg_Num+0x210>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	9b 81       	ldd	r25, Y+3	; 0x03
    36c0:	88 30       	cpi	r24, 0x08	; 8
    36c2:	91 05       	cpc	r25, r1
    36c4:	6c f4       	brge	.+26     	; 0x36e0 <SevenSeg_Num+0x98>
    36c6:	2a 81       	ldd	r18, Y+2	; 0x02
    36c8:	3b 81       	ldd	r19, Y+3	; 0x03
    36ca:	25 30       	cpi	r18, 0x05	; 5
    36cc:	31 05       	cpc	r19, r1
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <SevenSeg_Num+0x8a>
    36d0:	91 c0       	rjmp	.+290    	; 0x37f4 <SevenSeg_Num+0x1ac>
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	9b 81       	ldd	r25, Y+3	; 0x03
    36d6:	86 30       	cpi	r24, 0x06	; 6
    36d8:	91 05       	cpc	r25, r1
    36da:	09 f4       	brne	.+2      	; 0x36de <SevenSeg_Num+0x96>
    36dc:	a4 c0       	rjmp	.+328    	; 0x3826 <SevenSeg_Num+0x1de>
    36de:	06 c1       	rjmp	.+524    	; 0x38ec <SevenSeg_Num+0x2a4>
    36e0:	2a 81       	ldd	r18, Y+2	; 0x02
    36e2:	3b 81       	ldd	r19, Y+3	; 0x03
    36e4:	28 30       	cpi	r18, 0x08	; 8
    36e6:	31 05       	cpc	r19, r1
    36e8:	09 f4       	brne	.+2      	; 0x36ec <SevenSeg_Num+0xa4>
    36ea:	cf c0       	rjmp	.+414    	; 0x388a <SevenSeg_Num+0x242>
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	9b 81       	ldd	r25, Y+3	; 0x03
    36f0:	89 30       	cpi	r24, 0x09	; 9
    36f2:	91 05       	cpc	r25, r1
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <SevenSeg_Num+0xb0>
    36f6:	e2 c0       	rjmp	.+452    	; 0x38bc <SevenSeg_Num+0x274>
    36f8:	f9 c0       	rjmp	.+498    	; 0x38ec <SevenSeg_Num+0x2a4>
	{
	case 0 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    36fa:	86 e3       	ldi	r24, 0x36	; 54
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    3706:	86 e3       	ldi	r24, 0x36	; 54
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    3712:	86 e3       	ldi	r24, 0x36	; 54
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	62 e0       	ldi	r22, 0x02	; 2
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    371e:	86 e3       	ldi	r24, 0x36	; 54
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	64 e0       	ldi	r22, 0x04	; 4
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    372a:	e0 c0       	rjmp	.+448    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    372c:	86 e3       	ldi	r24, 0x36	; 54
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	41 e0       	ldi	r20, 0x01	; 1
    3734:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    3738:	86 e3       	ldi	r24, 0x36	; 54
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    3744:	86 e3       	ldi	r24, 0x36	; 54
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	62 e0       	ldi	r22, 0x02	; 2
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    3750:	86 e3       	ldi	r24, 0x36	; 54
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	64 e0       	ldi	r22, 0x04	; 4
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    375c:	c7 c0       	rjmp	.+398    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    375e:	86 e3       	ldi	r24, 0x36	; 54
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	40 e0       	ldi	r20, 0x00	; 0
    3766:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    376a:	86 e3       	ldi	r24, 0x36	; 54
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	61 e0       	ldi	r22, 0x01	; 1
    3770:	41 e0       	ldi	r20, 0x01	; 1
    3772:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    3776:	86 e3       	ldi	r24, 0x36	; 54
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	62 e0       	ldi	r22, 0x02	; 2
    377c:	40 e0       	ldi	r20, 0x00	; 0
    377e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    3782:	86 e3       	ldi	r24, 0x36	; 54
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	64 e0       	ldi	r22, 0x04	; 4
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    378e:	ae c0       	rjmp	.+348    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    3790:	86 e3       	ldi	r24, 0x36	; 54
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    379c:	86 e3       	ldi	r24, 0x36	; 54
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    37a8:	86 e3       	ldi	r24, 0x36	; 54
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	62 e0       	ldi	r22, 0x02	; 2
    37ae:	40 e0       	ldi	r20, 0x00	; 0
    37b0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    37b4:	86 e3       	ldi	r24, 0x36	; 54
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	64 e0       	ldi	r22, 0x04	; 4
    37ba:	40 e0       	ldi	r20, 0x00	; 0
    37bc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    37c0:	95 c0       	rjmp	.+298    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    37c2:	86 e3       	ldi	r24, 0x36	; 54
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	40 e0       	ldi	r20, 0x00	; 0
    37ca:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    37ce:	86 e3       	ldi	r24, 0x36	; 54
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    37da:	86 e3       	ldi	r24, 0x36	; 54
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	62 e0       	ldi	r22, 0x02	; 2
    37e0:	41 e0       	ldi	r20, 0x01	; 1
    37e2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    37e6:	86 e3       	ldi	r24, 0x36	; 54
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	64 e0       	ldi	r22, 0x04	; 4
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    37f2:	7c c0       	rjmp	.+248    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    37f4:	86 e3       	ldi	r24, 0x36	; 54
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    3800:	86 e3       	ldi	r24, 0x36	; 54
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	61 e0       	ldi	r22, 0x01	; 1
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    380c:	86 e3       	ldi	r24, 0x36	; 54
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	62 e0       	ldi	r22, 0x02	; 2
    3812:	41 e0       	ldi	r20, 0x01	; 1
    3814:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    3818:	86 e3       	ldi	r24, 0x36	; 54
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	64 e0       	ldi	r22, 0x04	; 4
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    3824:	63 c0       	rjmp	.+198    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    3826:	86 e3       	ldi	r24, 0x36	; 54
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    3832:	86 e3       	ldi	r24, 0x36	; 54
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	61 e0       	ldi	r22, 0x01	; 1
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    383e:	86 e3       	ldi	r24, 0x36	; 54
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	62 e0       	ldi	r22, 0x02	; 2
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    384a:	86 e3       	ldi	r24, 0x36	; 54
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	64 e0       	ldi	r22, 0x04	; 4
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    3856:	4a c0       	rjmp	.+148    	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    3858:	86 e3       	ldi	r24, 0x36	; 54
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    3864:	86 e3       	ldi	r24, 0x36	; 54
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    3870:	86 e3       	ldi	r24, 0x36	; 54
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	62 e0       	ldi	r22, 0x02	; 2
    3876:	41 e0       	ldi	r20, 0x01	; 1
    3878:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    387c:	86 e3       	ldi	r24, 0x36	; 54
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	64 e0       	ldi	r22, 0x04	; 4
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    3888:	31 c0       	rjmp	.+98     	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    388a:	86 e3       	ldi	r24, 0x36	; 54
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	40 e0       	ldi	r20, 0x00	; 0
    3892:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    3896:	86 e3       	ldi	r24, 0x36	; 54
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    38a2:	86 e3       	ldi	r24, 0x36	; 54
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	62 e0       	ldi	r22, 0x02	; 2
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    38ae:	86 e3       	ldi	r24, 0x36	; 54
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	64 e0       	ldi	r22, 0x04	; 4
    38b4:	41 e0       	ldi	r20, 0x01	; 1
    38b6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    38ba:	18 c0       	rjmp	.+48     	; 0x38ec <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    38bc:	86 e3       	ldi	r24, 0x36	; 54
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	41 e0       	ldi	r20, 0x01	; 1
    38c4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    38c8:	86 e3       	ldi	r24, 0x36	; 54
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    38d4:	86 e3       	ldi	r24, 0x36	; 54
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	62 e0       	ldi	r22, 0x02	; 2
    38da:	40 e0       	ldi	r20, 0x00	; 0
    38dc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    38e0:	86 e3       	ldi	r24, 0x36	; 54
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	64 e0       	ldi	r22, 0x04	; 4
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		break;
	}

}
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <main>:
	}
}*/


void main()
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTB_BASE,PIN4,INPUT);
    3902:	86 e3       	ldi	r24, 0x36	; 54
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	64 e0       	ldi	r22, 0x04	; 4
    3908:	40 e0       	ldi	r20, 0x00	; 0
    390a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN5,INPUT);
    390e:	86 e3       	ldi	r24, 0x36	; 54
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	65 e0       	ldi	r22, 0x05	; 5
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN6,OUTPUT);
    391a:	86 e3       	ldi	r24, 0x36	; 54
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	66 e0       	ldi	r22, 0x06	; 6
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN7,INPUT);
    3926:	86 e3       	ldi	r24, 0x36	; 54
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	67 e0       	ldi	r22, 0x07	; 7
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	SevenSeg_Init();
    3932:	0e 94 bd 1a 	call	0x357a	; 0x357a <SevenSeg_Init>


	uint8 data;

	SPI_Init(&SPI_config);
    3936:	8e e6       	ldi	r24, 0x6E	; 110
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	0e 94 ad 08 	call	0x115a	; 0x115a <SPI_Init>

	while(1)
	{
		data = SPI_sendReceiveByte(2);
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	0e 94 0d 09 	call	0x121a	; 0x121a <SPI_sendReceiveByte>
    3944:	89 83       	std	Y+1, r24	; 0x01
		SevenSeg_Num(data);
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	0e 94 24 1b 	call	0x3648	; 0x3648 <SevenSeg_Num>
    394c:	f8 cf       	rjmp	.-16     	; 0x393e <main+0x46>

0000394e <__divmodhi4>:
    394e:	97 fb       	bst	r25, 7
    3950:	09 2e       	mov	r0, r25
    3952:	07 26       	eor	r0, r23
    3954:	0a d0       	rcall	.+20     	; 0x396a <__divmodhi4_neg1>
    3956:	77 fd       	sbrc	r23, 7
    3958:	04 d0       	rcall	.+8      	; 0x3962 <__divmodhi4_neg2>
    395a:	0c d0       	rcall	.+24     	; 0x3974 <__udivmodhi4>
    395c:	06 d0       	rcall	.+12     	; 0x396a <__divmodhi4_neg1>
    395e:	00 20       	and	r0, r0
    3960:	1a f4       	brpl	.+6      	; 0x3968 <__divmodhi4_exit>

00003962 <__divmodhi4_neg2>:
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255

00003968 <__divmodhi4_exit>:
    3968:	08 95       	ret

0000396a <__divmodhi4_neg1>:
    396a:	f6 f7       	brtc	.-4      	; 0x3968 <__divmodhi4_exit>
    396c:	90 95       	com	r25
    396e:	81 95       	neg	r24
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	08 95       	ret

00003974 <__udivmodhi4>:
    3974:	aa 1b       	sub	r26, r26
    3976:	bb 1b       	sub	r27, r27
    3978:	51 e1       	ldi	r21, 0x11	; 17
    397a:	07 c0       	rjmp	.+14     	; 0x398a <__udivmodhi4_ep>

0000397c <__udivmodhi4_loop>:
    397c:	aa 1f       	adc	r26, r26
    397e:	bb 1f       	adc	r27, r27
    3980:	a6 17       	cp	r26, r22
    3982:	b7 07       	cpc	r27, r23
    3984:	10 f0       	brcs	.+4      	; 0x398a <__udivmodhi4_ep>
    3986:	a6 1b       	sub	r26, r22
    3988:	b7 0b       	sbc	r27, r23

0000398a <__udivmodhi4_ep>:
    398a:	88 1f       	adc	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	5a 95       	dec	r21
    3990:	a9 f7       	brne	.-22     	; 0x397c <__udivmodhi4_loop>
    3992:	80 95       	com	r24
    3994:	90 95       	com	r25
    3996:	bc 01       	movw	r22, r24
    3998:	cd 01       	movw	r24, r26
    399a:	08 95       	ret

0000399c <__prologue_saves__>:
    399c:	2f 92       	push	r2
    399e:	3f 92       	push	r3
    39a0:	4f 92       	push	r4
    39a2:	5f 92       	push	r5
    39a4:	6f 92       	push	r6
    39a6:	7f 92       	push	r7
    39a8:	8f 92       	push	r8
    39aa:	9f 92       	push	r9
    39ac:	af 92       	push	r10
    39ae:	bf 92       	push	r11
    39b0:	cf 92       	push	r12
    39b2:	df 92       	push	r13
    39b4:	ef 92       	push	r14
    39b6:	ff 92       	push	r15
    39b8:	0f 93       	push	r16
    39ba:	1f 93       	push	r17
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	ca 1b       	sub	r28, r26
    39c6:	db 0b       	sbc	r29, r27
    39c8:	0f b6       	in	r0, 0x3f	; 63
    39ca:	f8 94       	cli
    39cc:	de bf       	out	0x3e, r29	; 62
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	cd bf       	out	0x3d, r28	; 61
    39d2:	09 94       	ijmp

000039d4 <__epilogue_restores__>:
    39d4:	2a 88       	ldd	r2, Y+18	; 0x12
    39d6:	39 88       	ldd	r3, Y+17	; 0x11
    39d8:	48 88       	ldd	r4, Y+16	; 0x10
    39da:	5f 84       	ldd	r5, Y+15	; 0x0f
    39dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    39de:	7d 84       	ldd	r7, Y+13	; 0x0d
    39e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    39e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    39e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    39e6:	b9 84       	ldd	r11, Y+9	; 0x09
    39e8:	c8 84       	ldd	r12, Y+8	; 0x08
    39ea:	df 80       	ldd	r13, Y+7	; 0x07
    39ec:	ee 80       	ldd	r14, Y+6	; 0x06
    39ee:	fd 80       	ldd	r15, Y+5	; 0x05
    39f0:	0c 81       	ldd	r16, Y+4	; 0x04
    39f2:	1b 81       	ldd	r17, Y+3	; 0x03
    39f4:	aa 81       	ldd	r26, Y+2	; 0x02
    39f6:	b9 81       	ldd	r27, Y+1	; 0x01
    39f8:	ce 0f       	add	r28, r30
    39fa:	d1 1d       	adc	r29, r1
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	ed 01       	movw	r28, r26
    3a08:	08 95       	ret

00003a0a <itoa>:
    3a0a:	fb 01       	movw	r30, r22
    3a0c:	9f 01       	movw	r18, r30
    3a0e:	e8 94       	clt
    3a10:	42 30       	cpi	r20, 0x02	; 2
    3a12:	c4 f0       	brlt	.+48     	; 0x3a44 <itoa+0x3a>
    3a14:	45 32       	cpi	r20, 0x25	; 37
    3a16:	b4 f4       	brge	.+44     	; 0x3a44 <itoa+0x3a>
    3a18:	4a 30       	cpi	r20, 0x0A	; 10
    3a1a:	29 f4       	brne	.+10     	; 0x3a26 <itoa+0x1c>
    3a1c:	97 fb       	bst	r25, 7
    3a1e:	1e f4       	brtc	.+6      	; 0x3a26 <itoa+0x1c>
    3a20:	90 95       	com	r25
    3a22:	81 95       	neg	r24
    3a24:	9f 4f       	sbci	r25, 0xFF	; 255
    3a26:	64 2f       	mov	r22, r20
    3a28:	77 27       	eor	r23, r23
    3a2a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <__udivmodhi4>
    3a2e:	80 5d       	subi	r24, 0xD0	; 208
    3a30:	8a 33       	cpi	r24, 0x3A	; 58
    3a32:	0c f0       	brlt	.+2      	; 0x3a36 <itoa+0x2c>
    3a34:	89 5d       	subi	r24, 0xD9	; 217
    3a36:	81 93       	st	Z+, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	a1 f7       	brne	.-24     	; 0x3a26 <itoa+0x1c>
    3a3e:	16 f4       	brtc	.+4      	; 0x3a44 <itoa+0x3a>
    3a40:	5d e2       	ldi	r21, 0x2D	; 45
    3a42:	51 93       	st	Z+, r21
    3a44:	10 82       	st	Z, r1
    3a46:	c9 01       	movw	r24, r18
    3a48:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <strrev>

00003a4c <strrev>:
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	fc 01       	movw	r30, r24
    3a50:	67 2f       	mov	r22, r23
    3a52:	71 91       	ld	r23, Z+
    3a54:	77 23       	and	r23, r23
    3a56:	e1 f7       	brne	.-8      	; 0x3a50 <strrev+0x4>
    3a58:	32 97       	sbiw	r30, 0x02	; 2
    3a5a:	04 c0       	rjmp	.+8      	; 0x3a64 <strrev+0x18>
    3a5c:	7c 91       	ld	r23, X
    3a5e:	6d 93       	st	X+, r22
    3a60:	70 83       	st	Z, r23
    3a62:	62 91       	ld	r22, -Z
    3a64:	ae 17       	cp	r26, r30
    3a66:	bf 07       	cpc	r27, r31
    3a68:	c8 f3       	brcs	.-14     	; 0x3a5c <strrev+0x10>
    3a6a:	08 95       	ret

00003a6c <_exit>:
    3a6c:	f8 94       	cli

00003a6e <__stop_program>:
    3a6e:	ff cf       	rjmp	.-2      	; 0x3a6e <__stop_program>
