
NTI_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002b9e  00002c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800072  00800072  00002c44  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001da9  00000000  00000000  000058e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000768d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000077cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000793d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009586  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a471  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b220  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 15 	call	0x2a44	; 0x2a44 <main>
      8a:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "inc/ADC.h"
#include "inc/ADC_priv.h"


void ADC_Init(ADC_ConfigType *ADC_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg =0;
     b54:	e4 e2       	ldi	r30, 0x24	; 36
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	13 82       	std	Z+3, r1	; 0x03
	CLEAR_BIT(ADC_BASE->ADCSRA.Reg,ADIE); /*clear the interrupt enable bit 3 in ADCSRA REG to disable the ADC interrupt*/
     b5a:	a4 e2       	ldi	r26, 0x24	; 36
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e4 e2       	ldi	r30, 0x24	; 36
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	87 7f       	andi	r24, 0xF7	; 247
     b66:	12 96       	adiw	r26, 0x02	; 2
     b68:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xF8) | (ADC_config->Prescalar);
     b6a:	a4 e2       	ldi	r26, 0x24	; 36
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e4 e2       	ldi	r30, 0x24	; 36
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	98 2f       	mov	r25, r24
     b76:	98 7f       	andi	r25, 0xF8	; 248
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	89 2b       	or	r24, r25
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0x3F) | (ADC_config->V_ref<<REFS0);
     b84:	a4 e2       	ldi	r26, 0x24	; 36
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e4 e2       	ldi	r30, 0x24	; 36
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	28 2f       	mov	r18, r24
     b90:	2f 73       	andi	r18, 0x3F	; 63
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	81 81       	ldd	r24, Z+1	; 0x01
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	00 24       	eor	r0, r0
     b9e:	96 95       	lsr	r25
     ba0:	87 95       	ror	r24
     ba2:	07 94       	ror	r0
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	07 94       	ror	r0
     baa:	98 2f       	mov	r25, r24
     bac:	80 2d       	mov	r24, r0
     bae:	82 2b       	or	r24, r18
     bb0:	13 96       	adiw	r26, 0x03	; 3
     bb2:	8c 93       	st	X, r24
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xDF) | (ADC_config->Adj<<ADLAR);
     bb4:	a4 e2       	ldi	r26, 0x24	; 36
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e4 e2       	ldi	r30, 0x24	; 36
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	2f 7d       	andi	r18, 0xDF	; 223
     bc2:	e9 81       	ldd	r30, Y+1	; 0x01
     bc4:	fa 81       	ldd	r31, Y+2	; 0x02
     bc6:	82 81       	ldd	r24, Z+2	; 0x02
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 95       	swap	r24
     bd2:	92 95       	swap	r25
     bd4:	90 7f       	andi	r25, 0xF0	; 240
     bd6:	98 27       	eor	r25, r24
     bd8:	80 7f       	andi	r24, 0xF0	; 240
     bda:	98 27       	eor	r25, r24
     bdc:	82 2b       	or	r24, r18
     bde:	13 96       	adiw	r26, 0x03	; 3
     be0:	8c 93       	st	X, r24
	ADC_BASE->ADCSRA.Reg = (ADC_BASE->ADCSRA.Reg & 0xDF) | (ADC_config->trig_switch);
     be2:	a4 e2       	ldi	r26, 0x24	; 36
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e4 e2       	ldi	r30, 0x24	; 36
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	98 2f       	mov	r25, r24
     bee:	9f 7d       	andi	r25, 0xDF	; 223
     bf0:	e9 81       	ldd	r30, Y+1	; 0x01
     bf2:	fa 81       	ldd	r31, Y+2	; 0x02
     bf4:	84 81       	ldd	r24, Z+4	; 0x04
     bf6:	89 2b       	or	r24, r25
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADEN); /*set the enable bit 7 in ADCSRA REG*/
     bfc:	a4 e2       	ldi	r26, 0x24	; 36
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e2       	ldi	r30, 0x24	; 36
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	8c 93       	st	X, r24
     c0c:	12 97       	sbiw	r26, 0x02	; 2
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <ADC_getDigitalValueSynchNonBlocking>:

uint16 ADC_getDigitalValueSynchNonBlocking(ADC_ConfigType *ADC_config)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <ADC_getDigitalValueSynchNonBlocking+0x6>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c26:	a4 e2       	ldi	r26, 0x24	; 36
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e4 e2       	ldi	r30, 0x24	; 36
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	83 81       	ldd	r24, Z+3	; 0x03
     c30:	98 2f       	mov	r25, r24
     c32:	90 7e       	andi	r25, 0xE0	; 224
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	80 81       	ld	r24, Z
     c3a:	87 70       	andi	r24, 0x07	; 7
     c3c:	89 2b       	or	r24, r25
     c3e:	13 96       	adiw	r26, 0x03	; 3
     c40:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADSC);
     c42:	a4 e2       	ldi	r26, 0x24	; 36
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e4 e2       	ldi	r30, 0x24	; 36
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 93       	st	X, r24
     c52:	12 97       	sbiw	r26, 0x02	; 2
	while(BIT_IS_CLEAR(ADC_BASE->ADCSRA.Reg,ADIF))
     c54:	e4 e2       	ldi	r30, 0x24	; 36
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 71       	andi	r24, 0x10	; 16
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <ADC_getDigitalValueSynchNonBlocking+0x3c>
	{

	}
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     c66:	a4 e2       	ldi	r26, 0x24	; 36
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e4 e2       	ldi	r30, 0x24	; 36
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	80 61       	ori	r24, 0x10	; 16
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	8c 93       	st	X, r24
     c76:	12 97       	sbiw	r26, 0x02	; 2
	return ADC_BASE->ADCL.Reg;
     c78:	e4 e2       	ldi	r30, 0x24	; 36
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	88 2f       	mov	r24, r24
     c80:	90 e0       	ldi	r25, 0x00	; 0
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <ADC_getDigitalValueAsynchCallBack>:

void ADC_getDigitalValueAsynchCallBack(ADC_ConfigType *ADC_config)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <ADC_getDigitalValueAsynchCallBack+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9a 83       	std	Y+2, r25	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
	ADC_BASE->ADMUX.Reg = (ADC_BASE->ADMUX.Reg & 0xE0)|(ADC_config->Channel & 0x07);
     c9a:	a4 e2       	ldi	r26, 0x24	; 36
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e4 e2       	ldi	r30, 0x24	; 36
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	98 2f       	mov	r25, r24
     ca6:	90 7e       	andi	r25, 0xE0	; 224
     ca8:	e9 81       	ldd	r30, Y+1	; 0x01
     caa:	fa 81       	ldd	r31, Y+2	; 0x02
     cac:	80 81       	ld	r24, Z
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	89 2b       	or	r24, r25
     cb2:	13 96       	adiw	r26, 0x03	; 3
     cb4:	8c 93       	st	X, r24
	SFIOR = (SFIOR & 0x1F) | (ADC_config->Trigger <<ADTS0);
     cb6:	a0 e5       	ldi	r26, 0x50	; 80
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e0 e5       	ldi	r30, 0x50	; 80
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	28 2f       	mov	r18, r24
     cc2:	2f 71       	andi	r18, 0x1F	; 31
     cc4:	e9 81       	ldd	r30, Y+1	; 0x01
     cc6:	fa 81       	ldd	r31, Y+2	; 0x02
     cc8:	85 81       	ldd	r24, Z+5	; 0x05
     cca:	88 2f       	mov	r24, r24
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	82 95       	swap	r24
     cd4:	92 95       	swap	r25
     cd6:	90 7f       	andi	r25, 0xF0	; 240
     cd8:	98 27       	eor	r25, r24
     cda:	80 7f       	andi	r24, 0xF0	; 240
     cdc:	98 27       	eor	r25, r24
     cde:	82 2b       	or	r24, r18
     ce0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIE);
     ce2:	a4 e2       	ldi	r26, 0x24	; 36
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e2       	ldi	r30, 0x24	; 36
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	12 96       	adiw	r26, 0x02	; 2
     cf0:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA.Reg,ADIF);
     cf2:	a4 e2       	ldi	r26, 0x24	; 36
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e2       	ldi	r30, 0x24	; 36
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	8c 93       	st	X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Direction)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_voidSetPinDirection+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_voidSetPinDirection+0x8>
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_voidSetPinDirection+0xa>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	6b 83       	std	Y+3, r22	; 0x03
     d22:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	2d 83       	std	Y+5, r18	; 0x05
     d2e:	8d 81       	ldd	r24, Y+5	; 0x05
     d30:	9e 81       	ldd	r25, Y+6	; 0x06
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <DIO_voidSetPinDirection+0x2c>
     d38:	51 c0       	rjmp	.+162    	; 0xddc <DIO_voidSetPinDirection+0xce>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	24 30       	cpi	r18, 0x04	; 4
     d40:	31 05       	cpc	r19, r1
     d42:	7c f4       	brge	.+30     	; 0xd62 <DIO_voidSetPinDirection+0x54>
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	71 f1       	breq	.+92     	; 0xdaa <DIO_voidSetPinDirection+0x9c>
     d4e:	2d 81       	ldd	r18, Y+5	; 0x05
     d50:	3e 81       	ldd	r19, Y+6	; 0x06
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	ac f5       	brge	.+106    	; 0xdc2 <DIO_voidSetPinDirection+0xb4>
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	d1 f0       	breq	.+52     	; 0xd94 <DIO_voidSetPinDirection+0x86>
     d60:	81 c0       	rjmp	.+258    	; 0xe64 <DIO_voidSetPinDirection+0x156>
     d62:	2d 81       	ldd	r18, Y+5	; 0x05
     d64:	3e 81       	ldd	r19, Y+6	; 0x06
     d66:	25 30       	cpi	r18, 0x05	; 5
     d68:	31 05       	cpc	r19, r1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <DIO_voidSetPinDirection+0x60>
     d6c:	52 c0       	rjmp	.+164    	; 0xe12 <DIO_voidSetPinDirection+0x104>
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
     d70:	9e 81       	ldd	r25, Y+6	; 0x06
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	91 05       	cpc	r25, r1
     d76:	0c f4       	brge	.+2      	; 0xd7a <DIO_voidSetPinDirection+0x6c>
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <DIO_voidSetPinDirection+0xea>
     d7a:	2d 81       	ldd	r18, Y+5	; 0x05
     d7c:	3e 81       	ldd	r19, Y+6	; 0x06
     d7e:	26 30       	cpi	r18, 0x06	; 6
     d80:	31 05       	cpc	r19, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <DIO_voidSetPinDirection+0x78>
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <DIO_voidSetPinDirection+0x120>
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	91 05       	cpc	r25, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <DIO_voidSetPinDirection+0x84>
     d90:	5d c0       	rjmp	.+186    	; 0xe4c <DIO_voidSetPinDirection+0x13e>
     d92:	68 c0       	rjmp	.+208    	; 0xe64 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	98 2f       	mov	r25, r24
     d9e:	91 70       	andi	r25, 0x01	; 1
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	8e 7f       	andi	r24, 0xFE	; 254
     da4:	89 2b       	or	r24, r25
     da6:	81 83       	std	Z+1, r24	; 0x01
     da8:	5d c0       	rjmp	.+186    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	81 70       	andi	r24, 0x01	; 1
     dae:	e9 81       	ldd	r30, Y+1	; 0x01
     db0:	fa 81       	ldd	r31, Y+2	; 0x02
     db2:	81 70       	andi	r24, 0x01	; 1
     db4:	98 2f       	mov	r25, r24
     db6:	99 0f       	add	r25, r25
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	8d 7f       	andi	r24, 0xFD	; 253
     dbc:	89 2b       	or	r24, r25
     dbe:	81 83       	std	Z+1, r24	; 0x01
     dc0:	51 c0       	rjmp	.+162    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 70       	andi	r24, 0x01	; 1
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	81 70       	andi	r24, 0x01	; 1
     dcc:	98 2f       	mov	r25, r24
     dce:	99 0f       	add	r25, r25
     dd0:	99 0f       	add	r25, r25
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	8b 7f       	andi	r24, 0xFB	; 251
     dd6:	89 2b       	or	r24, r25
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	44 c0       	rjmp	.+136    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	98 2f       	mov	r25, r24
     de8:	99 0f       	add	r25, r25
     dea:	99 0f       	add	r25, r25
     dec:	99 0f       	add	r25, r25
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	87 7f       	andi	r24, 0xF7	; 247
     df2:	89 2b       	or	r24, r25
     df4:	81 83       	std	Z+1, r24	; 0x01
     df6:	36 c0       	rjmp	.+108    	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	e9 81       	ldd	r30, Y+1	; 0x01
     dfe:	fa 81       	ldd	r31, Y+2	; 0x02
     e00:	81 70       	andi	r24, 0x01	; 1
     e02:	98 2f       	mov	r25, r24
     e04:	92 95       	swap	r25
     e06:	90 7f       	andi	r25, 0xF0	; 240
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	8f 7e       	andi	r24, 0xEF	; 239
     e0c:	89 2b       	or	r24, r25
     e0e:	81 83       	std	Z+1, r24	; 0x01
     e10:	29 c0       	rjmp	.+82     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	e9 81       	ldd	r30, Y+1	; 0x01
     e18:	fa 81       	ldd	r31, Y+2	; 0x02
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	98 2f       	mov	r25, r24
     e1e:	92 95       	swap	r25
     e20:	99 0f       	add	r25, r25
     e22:	90 7e       	andi	r25, 0xE0	; 224
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	8f 7d       	andi	r24, 0xDF	; 223
     e28:	89 2b       	or	r24, r25
     e2a:	81 83       	std	Z+1, r24	; 0x01
     e2c:	1b c0       	rjmp	.+54     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
     e2e:	8c 81       	ldd	r24, Y+4	; 0x04
     e30:	81 70       	andi	r24, 0x01	; 1
     e32:	e9 81       	ldd	r30, Y+1	; 0x01
     e34:	fa 81       	ldd	r31, Y+2	; 0x02
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	98 2f       	mov	r25, r24
     e3a:	92 95       	swap	r25
     e3c:	99 0f       	add	r25, r25
     e3e:	99 0f       	add	r25, r25
     e40:	90 7c       	andi	r25, 0xC0	; 192
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	8f 7b       	andi	r24, 0xBF	; 191
     e46:	89 2b       	or	r24, r25
     e48:	81 83       	std	Z+1, r24	; 0x01
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	81 70       	andi	r24, 0x01	; 1
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	98 2f       	mov	r25, r24
     e56:	97 95       	ror	r25
     e58:	99 27       	eor	r25, r25
     e5a:	97 95       	ror	r25
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	8f 77       	andi	r24, 0x7F	; 127
     e60:	89 2b       	or	r24, r25
     e62:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
     e64:	26 96       	adiw	r28, 0x06	; 6
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(Port_Def* ptr,uint8 Copy_u8PinId,uint8 Copy_u8Value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <DIO_voidSetPinValue+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_voidSetPinValue+0x8>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_voidSetPinValue+0xa>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3e 83       	std	Y+6, r19	; 0x06
     e94:	2d 83       	std	Y+5, r18	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <DIO_voidSetPinValue+0x2c>
     ea0:	51 c0       	rjmp	.+162    	; 0xf44 <DIO_voidSetPinValue+0xce>
     ea2:	2d 81       	ldd	r18, Y+5	; 0x05
     ea4:	3e 81       	ldd	r19, Y+6	; 0x06
     ea6:	24 30       	cpi	r18, 0x04	; 4
     ea8:	31 05       	cpc	r19, r1
     eaa:	7c f4       	brge	.+30     	; 0xeca <DIO_voidSetPinValue+0x54>
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <DIO_voidSetPinValue+0x9c>
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	ac f5       	brge	.+106    	; 0xf2a <DIO_voidSetPinValue+0xb4>
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	d1 f0       	breq	.+52     	; 0xefc <DIO_voidSetPinValue+0x86>
     ec8:	81 c0       	rjmp	.+258    	; 0xfcc <DIO_voidSetPinValue+0x156>
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	25 30       	cpi	r18, 0x05	; 5
     ed0:	31 05       	cpc	r19, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_voidSetPinValue+0x60>
     ed4:	52 c0       	rjmp	.+164    	; 0xf7a <DIO_voidSetPinValue+0x104>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	91 05       	cpc	r25, r1
     ede:	0c f4       	brge	.+2      	; 0xee2 <DIO_voidSetPinValue+0x6c>
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <DIO_voidSetPinValue+0xea>
     ee2:	2d 81       	ldd	r18, Y+5	; 0x05
     ee4:	3e 81       	ldd	r19, Y+6	; 0x06
     ee6:	26 30       	cpi	r18, 0x06	; 6
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_voidSetPinValue+0x78>
     eec:	54 c0       	rjmp	.+168    	; 0xf96 <DIO_voidSetPinValue+0x120>
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	87 30       	cpi	r24, 0x07	; 7
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_voidSetPinValue+0x84>
     ef8:	5d c0       	rjmp	.+186    	; 0xfb4 <DIO_voidSetPinValue+0x13e>
     efa:	68 c0       	rjmp	.+208    	; 0xfcc <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	e9 81       	ldd	r30, Y+1	; 0x01
     f02:	fa 81       	ldd	r31, Y+2	; 0x02
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
     f0c:	89 2b       	or	r24, r25
     f0e:	82 83       	std	Z+2, r24	; 0x02
     f10:	5d c0       	rjmp	.+186    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	98 2f       	mov	r25, r24
     f1e:	99 0f       	add	r25, r25
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	89 2b       	or	r24, r25
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	51 c0       	rjmp	.+162    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	81 70       	andi	r24, 0x01	; 1
     f2e:	e9 81       	ldd	r30, Y+1	; 0x01
     f30:	fa 81       	ldd	r31, Y+2	; 0x02
     f32:	81 70       	andi	r24, 0x01	; 1
     f34:	98 2f       	mov	r25, r24
     f36:	99 0f       	add	r25, r25
     f38:	99 0f       	add	r25, r25
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	89 2b       	or	r24, r25
     f40:	82 83       	std	Z+2, r24	; 0x02
     f42:	44 c0       	rjmp	.+136    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	e9 81       	ldd	r30, Y+1	; 0x01
     f4a:	fa 81       	ldd	r31, Y+2	; 0x02
     f4c:	81 70       	andi	r24, 0x01	; 1
     f4e:	98 2f       	mov	r25, r24
     f50:	99 0f       	add	r25, r25
     f52:	99 0f       	add	r25, r25
     f54:	99 0f       	add	r25, r25
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	89 2b       	or	r24, r25
     f5c:	82 83       	std	Z+2, r24	; 0x02
     f5e:	36 c0       	rjmp	.+108    	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	98 2f       	mov	r25, r24
     f6c:	92 95       	swap	r25
     f6e:	90 7f       	andi	r25, 0xF0	; 240
     f70:	82 81       	ldd	r24, Z+2	; 0x02
     f72:	8f 7e       	andi	r24, 0xEF	; 239
     f74:	89 2b       	or	r24, r25
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	29 c0       	rjmp	.+82     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	81 70       	andi	r24, 0x01	; 1
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	98 2f       	mov	r25, r24
     f86:	92 95       	swap	r25
     f88:	99 0f       	add	r25, r25
     f8a:	90 7e       	andi	r25, 0xE0	; 224
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	8f 7d       	andi	r24, 0xDF	; 223
     f90:	89 2b       	or	r24, r25
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	1b c0       	rjmp	.+54     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	81 70       	andi	r24, 0x01	; 1
     fa0:	98 2f       	mov	r25, r24
     fa2:	92 95       	swap	r25
     fa4:	99 0f       	add	r25, r25
     fa6:	99 0f       	add	r25, r25
     fa8:	90 7c       	andi	r25, 0xC0	; 192
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	89 2b       	or	r24, r25
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	98 2f       	mov	r25, r24
     fbe:	97 95       	ror	r25
     fc0:	99 27       	eor	r25, r25
     fc2:	97 95       	ror	r25
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	8f 77       	andi	r24, 0x7F	; 127
     fc8:	89 2b       	or	r24, r25
     fca:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
     fcc:	26 96       	adiw	r28, 0x06	; 6
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <DIO_voidGetPinValue>:

uint8 DIO_voidGetPinValue(Port_Def* ptr,uint8 Copy_u8PinId)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_voidGetPinValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_voidGetPinValue+0x8>
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_voidGetPinValue+0xa>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9b 83       	std	Y+3, r25	; 0x03
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3e 83       	std	Y+6, r19	; 0x06
     ffc:	2d 83       	std	Y+5, r18	; 0x05
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_voidGetPinValue+0x2c>
    1008:	3e c0       	rjmp	.+124    	; 0x1086 <DIO_voidGetPinValue+0xa8>
    100a:	2d 81       	ldd	r18, Y+5	; 0x05
    100c:	3e 81       	ldd	r19, Y+6	; 0x06
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	7c f4       	brge	.+30     	; 0x1032 <DIO_voidGetPinValue+0x54>
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	29 f1       	breq	.+74     	; 0x1068 <DIO_voidGetPinValue+0x8a>
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	3c f5       	brge	.+78     	; 0x1076 <DIO_voidGetPinValue+0x98>
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	b1 f0       	breq	.+44     	; 0x105c <DIO_voidGetPinValue+0x7e>
    1030:	55 c0       	rjmp	.+170    	; 0x10dc <DIO_voidGetPinValue+0xfe>
    1032:	2d 81       	ldd	r18, Y+5	; 0x05
    1034:	3e 81       	ldd	r19, Y+6	; 0x06
    1036:	25 30       	cpi	r18, 0x05	; 5
    1038:	31 05       	cpc	r19, r1
    103a:	b1 f1       	breq	.+108    	; 0x10a8 <DIO_voidGetPinValue+0xca>
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	85 30       	cpi	r24, 0x05	; 5
    1042:	91 05       	cpc	r25, r1
    1044:	4c f1       	brlt	.+82     	; 0x1098 <DIO_voidGetPinValue+0xba>
    1046:	2d 81       	ldd	r18, Y+5	; 0x05
    1048:	3e 81       	ldd	r19, Y+6	; 0x06
    104a:	26 30       	cpi	r18, 0x06	; 6
    104c:	31 05       	cpc	r19, r1
    104e:	a9 f1       	breq	.+106    	; 0x10ba <DIO_voidGetPinValue+0xdc>
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f1       	breq	.+116    	; 0x10ce <DIO_voidGetPinValue+0xf0>
    105a:	40 c0       	rjmp	.+128    	; 0x10dc <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    105c:	ea 81       	ldd	r30, Y+2	; 0x02
    105e:	fb 81       	ldd	r31, Y+3	; 0x03
    1060:	80 81       	ld	r24, Z
    1062:	81 70       	andi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	3a c0       	rjmp	.+116    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	80 81       	ld	r24, Z
    106e:	86 95       	lsr	r24
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	33 c0       	rjmp	.+102    	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    1076:	ea 81       	ldd	r30, Y+2	; 0x02
    1078:	fb 81       	ldd	r31, Y+3	; 0x03
    107a:	80 81       	ld	r24, Z
    107c:	86 95       	lsr	r24
    107e:	86 95       	lsr	r24
    1080:	81 70       	andi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	2b c0       	rjmp	.+86     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1086:	ea 81       	ldd	r30, Y+2	; 0x02
    1088:	fb 81       	ldd	r31, Y+3	; 0x03
    108a:	80 81       	ld	r24, Z
    108c:	86 95       	lsr	r24
    108e:	86 95       	lsr	r24
    1090:	86 95       	lsr	r24
    1092:	81 70       	andi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	22 c0       	rjmp	.+68     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 81       	ld	r24, Z
    109e:	82 95       	swap	r24
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	1a c0       	rjmp	.+52     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    10a8:	ea 81       	ldd	r30, Y+2	; 0x02
    10aa:	fb 81       	ldd	r31, Y+3	; 0x03
    10ac:	80 81       	ld	r24, Z
    10ae:	82 95       	swap	r24
    10b0:	86 95       	lsr	r24
    10b2:	87 70       	andi	r24, 0x07	; 7
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    10ba:	ea 81       	ldd	r30, Y+2	; 0x02
    10bc:	fb 81       	ldd	r31, Y+3	; 0x03
    10be:	80 81       	ld	r24, Z
    10c0:	82 95       	swap	r24
    10c2:	86 95       	lsr	r24
    10c4:	86 95       	lsr	r24
    10c6:	83 70       	andi	r24, 0x03	; 3
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	80 81       	ld	r24, Z
    10d4:	88 1f       	adc	r24, r24
    10d6:	88 27       	eor	r24, r24
    10d8:	88 1f       	adc	r24, r24
    10da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10de:	26 96       	adiw	r28, 0x06	; 6
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_voidSetPortDirection>:


void DIO_voidSetPortDirection(Port_Def* ptr,uint8 Copy_u8Direction)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <DIO_voidSetPortDirection+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1102:	e9 81       	ldd	r30, Y+1	; 0x01
    1104:	fa 81       	ldd	r31, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 83       	std	Z+1, r24	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(Port_Def* ptr,uint8 Copy_u8Value)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_voidSetPortValue+0x6>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	82 83       	std	Z+2, r24	; 0x02
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_voidGetPortValue>:

uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_voidGetPortValue+0x6>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	80 81       	ld	r24, Z
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <TIM0_SetCallBack>:

static void (*P_TIM0_CallBack)(void) = NULL_PTR;


void TIM0_SetCallBack(void(*Ptr2Func)(void))
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TIM0_SetCallBack+0x6>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
	P_TIM0_CallBack = Ptr2Func;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	90 93 73 00 	sts	0x0073, r25
    1170:	80 93 72 00 	sts	0x0072, r24
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	if(P_TIM0_CallBack != NULL_PTR)
    11a8:	80 91 72 00 	lds	r24, 0x0072
    11ac:	90 91 73 00 	lds	r25, 0x0073
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	61 f0       	breq	.+24     	; 0x11cc <__vector_11+0x4e>
	{
		SREG &= ~(1<<7);
    11b4:	af e5       	ldi	r26, 0x5F	; 95
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ef e5       	ldi	r30, 0x5F	; 95
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	8c 93       	st	X, r24
		P_TIM0_CallBack();
    11c2:	e0 91 72 00 	lds	r30, 0x0072
    11c6:	f0 91 73 00 	lds	r31, 0x0073
    11ca:	09 95       	icall
	}

}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <Timer0_Init>:


Error_Status Timer0_Init(TIM0_ConfigType *TIM0_config)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <Timer0_Init+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <Timer0_Init+0x8>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01

	switch(TIM0_config->mode)
    1204:	e9 81       	ldd	r30, Y+1	; 0x01
    1206:	fa 81       	ldd	r31, Y+2	; 0x02
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	2c 83       	std	Y+4, r18	; 0x04
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	81 f1       	breq	.+96     	; 0x127c <Timer0_Init+0x8a>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	2c f4       	brge	.+10     	; 0x1230 <Timer0_Init+0x3e>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	69 f0       	breq	.+26     	; 0x1248 <Timer0_Init+0x56>
    122e:	73 c0       	rjmp	.+230    	; 0x1316 <Timer0_Init+0x124>
    1230:	2c 81       	ldd	r18, Y+4	; 0x04
    1232:	3d 81       	ldd	r19, Y+5	; 0x05
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	d9 f1       	breq	.+118    	; 0x12b0 <Timer0_Init+0xbe>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <Timer0_Init+0x54>
    1244:	4f c0       	rjmp	.+158    	; 0x12e4 <Timer0_Init+0xf2>
    1246:	67 c0       	rjmp	.+206    	; 0x1316 <Timer0_Init+0x124>
	{
	case NORMAL:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    1248:	a2 e5       	ldi	r26, 0x52	; 82
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e2 e5       	ldi	r30, 0x52	; 82
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    1258:	a2 e5       	ldi	r26, 0x52	; 82
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e5       	ldi	r30, 0x52	; 82
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	81 81       	ldd	r24, Z+1	; 0x01
    1262:	87 7f       	andi	r24, 0xF7	; 247
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    1268:	a2 e5       	ldi	r26, 0x52	; 82
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e5       	ldi	r30, 0x52	; 82
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	81 81       	ldd	r24, Z+1	; 0x01
    1272:	8f 7b       	andi	r24, 0xBF	; 191
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	8c 93       	st	X, r24
    1278:	11 97       	sbiw	r26, 0x01	; 1
    127a:	4d c0       	rjmp	.+154    	; 0x1316 <Timer0_Init+0x124>
		break;
	case PHASE_CORRECT_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    127c:	a2 e5       	ldi	r26, 0x52	; 82
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e2 e5       	ldi	r30, 0x52	; 82
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	81 81       	ldd	r24, Z+1	; 0x01
    1286:	8f 77       	andi	r24, 0x7F	; 127
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    128c:	a2 e5       	ldi	r26, 0x52	; 82
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e2 e5       	ldi	r30, 0x52	; 82
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	81 81       	ldd	r24, Z+1	; 0x01
    1296:	87 7f       	andi	r24, 0xF7	; 247
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    129c:	a2 e5       	ldi	r26, 0x52	; 82
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e2 e5       	ldi	r30, 0x52	; 82
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	8c 93       	st	X, r24
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	33 c0       	rjmp	.+102    	; 0x1316 <Timer0_Init+0x124>
		break;
	case CTC:
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    12b0:	a2 e5       	ldi	r26, 0x52	; 82
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e5       	ldi	r30, 0x52	; 82
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	81 81       	ldd	r24, Z+1	; 0x01
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	11 96       	adiw	r26, 0x01	; 1
    12be:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    12c0:	a2 e5       	ldi	r26, 0x52	; 82
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e5       	ldi	r30, 0x52	; 82
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	88 60       	ori	r24, 0x08	; 8
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	8c 93       	st	X, r24
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    12d0:	a2 e5       	ldi	r26, 0x52	; 82
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e2 e5       	ldi	r30, 0x52	; 82
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	81 81       	ldd	r24, Z+1	; 0x01
    12da:	8f 7b       	andi	r24, 0xBF	; 191
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	8c 93       	st	X, r24
    12e0:	11 97       	sbiw	r26, 0x01	; 1
    12e2:	19 c0       	rjmp	.+50     	; 0x1316 <Timer0_Init+0x124>
		break;
	case FAST_PWM:
		CLEAR_BIT(TIM0_BASE->TCCR0_t.Reg,FOC0);
    12e4:	a2 e5       	ldi	r26, 0x52	; 82
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e2 e5       	ldi	r30, 0x52	; 82
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	8f 77       	andi	r24, 0x7F	; 127
    12f0:	11 96       	adiw	r26, 0x01	; 1
    12f2:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM01);
    12f4:	a2 e5       	ldi	r26, 0x52	; 82
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e5       	ldi	r30, 0x52	; 82
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	81 81       	ldd	r24, Z+1	; 0x01
    12fe:	88 60       	ori	r24, 0x08	; 8
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	8c 93       	st	X, r24
		SET_BIT(TIM0_BASE->TCCR0_t.Reg,WGM00);
    1304:	a2 e5       	ldi	r26, 0x52	; 82
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e5       	ldi	r30, 0x52	; 82
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	80 64       	ori	r24, 0x40	; 64
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	8c 93       	st	X, r24
    1314:	11 97       	sbiw	r26, 0x01	; 1
		break;
	}
	if(((TIM0_config->mode == PHASE_CORRECT_PWM) || (TIM0_config->mode == FAST_PWM)) && (TIM0_config->COM == NON_PWM_TOGGLE))
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	80 81       	ld	r24, Z
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	29 f0       	breq	.+10     	; 0x132a <Timer0_Init+0x138>
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	80 81       	ld	r24, Z
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	39 f4       	brne	.+14     	; 0x1338 <Timer0_Init+0x146>
    132a:	e9 81       	ldd	r30, Y+1	; 0x01
    132c:	fa 81       	ldd	r31, Y+2	; 0x02
    132e:	81 81       	ldd	r24, Z+1	; 0x01
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	11 f4       	brne	.+4      	; 0x1338 <Timer0_Init+0x146>
	{
		return OUT_OF_RANGE;
    1334:	1b 82       	std	Y+3, r1	; 0x03
    1336:	2a c0       	rjmp	.+84     	; 0x138c <Timer0_Init+0x19a>
	}
	else
	{
		TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xCF) | TIM0_config->COM << COM00);
    1338:	a2 e5       	ldi	r26, 0x52	; 82
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e5       	ldi	r30, 0x52	; 82
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	81 81       	ldd	r24, Z+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	2f 7c       	andi	r18, 0xCF	; 207
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	81 81       	ldd	r24, Z+1	; 0x01
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	82 95       	swap	r24
    1352:	92 95       	swap	r25
    1354:	90 7f       	andi	r25, 0xF0	; 240
    1356:	98 27       	eor	r25, r24
    1358:	80 7f       	andi	r24, 0xF0	; 240
    135a:	98 27       	eor	r25, r24
    135c:	82 2b       	or	r24, r18
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	8c 93       	st	X, r24
	}
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    1362:	a2 e5       	ldi	r26, 0x52	; 82
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e5       	ldi	r30, 0x52	; 82
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	81 81       	ldd	r24, Z+1	; 0x01
    136c:	98 2f       	mov	r25, r24
    136e:	98 7f       	andi	r25, 0xF8	; 248
    1370:	e9 81       	ldd	r30, Y+1	; 0x01
    1372:	fa 81       	ldd	r31, Y+2	; 0x02
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	89 2b       	or	r24, r25
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	8c 93       	st	X, r24

	TIM0_BASE->TCNT0_t.Reg = TIM0_config->value;
    137c:	a2 e5       	ldi	r26, 0x52	; 82
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	8c 93       	st	X, r24

	return NO_ERROR;
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <Timer0_start>:


void Timer0_start(TIM0_ConfigType *TIM0_config)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <Timer0_start+0x6>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
	TIM0_BASE->TCCR0_t.Reg = ((TIM0_BASE->TCCR0_t.Reg & 0xF8) | TIM0_config->prescalar);
    13ac:	a2 e5       	ldi	r26, 0x52	; 82
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e2 e5       	ldi	r30, 0x52	; 82
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	81 81       	ldd	r24, Z+1	; 0x01
    13b6:	98 2f       	mov	r25, r24
    13b8:	98 7f       	andi	r25, 0xF8	; 248
    13ba:	e9 81       	ldd	r30, Y+1	; 0x01
    13bc:	fa 81       	ldd	r31, Y+2	; 0x02
    13be:	83 81       	ldd	r24, Z+3	; 0x03
    13c0:	89 2b       	or	r24, r25
    13c2:	11 96       	adiw	r26, 0x01	; 1
    13c4:	8c 93       	st	X, r24
    13c6:	11 97       	sbiw	r26, 0x01	; 1
}
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Timer0_stop>:

void Timer0_stop()
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	TIM0_BASE->TCCR0_t.Reg &= 0xF8;
    13da:	a2 e5       	ldi	r26, 0x52	; 82
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e2 e5       	ldi	r30, 0x52	; 82
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	88 7f       	andi	r24, 0xF8	; 248
    13e6:	11 96       	adiw	r26, 0x01	; 1
    13e8:	8c 93       	st	X, r24
    13ea:	11 97       	sbiw	r26, 0x01	; 1
}
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <Timer0_GetCounts>:

void Timer0_GetCounts()
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <Timer0_SetDelayTimeMilliSecond>:

void Timer0_SetDelayTimeMilliSecond()
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <Timer0_EnableInt>:

void Timer0_EnableInt(TIM0_ConfigType *TIM0_config,void(*Ptr2Func)(void))
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	00 d0       	rcall	.+0      	; 0x1414 <Timer0_EnableInt+0x6>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <Timer0_EnableInt+0x8>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <Timer0_EnableInt+0xa>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	7c 83       	std	Y+4, r23	; 0x04
    1422:	6b 83       	std	Y+3, r22	; 0x03
	SREG &=  ~(1<<7);
    1424:	af e5       	ldi	r26, 0x5F	; 95
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ef e5       	ldi	r30, 0x5F	; 95
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	8c 93       	st	X, r24
	switch(TIM0_config->mode)
    1432:	e9 81       	ldd	r30, Y+1	; 0x01
    1434:	fa 81       	ldd	r31, Y+2	; 0x02
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3e 83       	std	Y+6, r19	; 0x06
    143e:	2d 83       	std	Y+5, r18	; 0x05
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	31 f0       	breq	.+12     	; 0x1454 <Timer0_EnableInt+0x46>
    1448:	2d 81       	ldd	r18, Y+5	; 0x05
    144a:	3e 81       	ldd	r19, Y+6	; 0x06
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	59 f0       	breq	.+22     	; 0x1468 <Timer0_EnableInt+0x5a>
    1452:	12 c0       	rjmp	.+36     	; 0x1478 <Timer0_EnableInt+0x6a>
	{
	case NORMAL:
		SET_BIT(TIM0_BASE->TIMSK_t.Reg,TOIE0);
    1454:	a2 e5       	ldi	r26, 0x52	; 82
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e2 e5       	ldi	r30, 0x52	; 82
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	87 81       	ldd	r24, Z+7	; 0x07
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	17 96       	adiw	r26, 0x07	; 7
    1462:	8c 93       	st	X, r24
    1464:	17 97       	sbiw	r26, 0x07	; 7
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <Timer0_EnableInt+0x6a>
		break;
	case CTC:
		SET_BIT(TIM0_BASE->TIMSK_t.Reg,OCIE0);
    1468:	a2 e5       	ldi	r26, 0x52	; 82
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e5       	ldi	r30, 0x52	; 82
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	87 81       	ldd	r24, Z+7	; 0x07
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	17 96       	adiw	r26, 0x07	; 7
    1476:	8c 93       	st	X, r24
		break;
	}
	TIM0_SetCallBack(*Ptr2Func);
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	0e 94 ad 08 	call	0x115a	; 0x115a <TIM0_SetCallBack>
	SREG |= (1<<7);
    1480:	af e5       	ldi	r26, 0x5F	; 95
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ef e5       	ldi	r30, 0x5F	; 95
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	8c 93       	st	X, r24
}
    148e:	26 96       	adiw	r28, 0x06	; 6
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <Timer0_DisableInt>:

void Timer0_DisableInt()
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIM0_BASE->TIMSK_t.Reg,TOIE0);
    14a8:	a2 e5       	ldi	r26, 0x52	; 82
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e2 e5       	ldi	r30, 0x52	; 82
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	87 81       	ldd	r24, Z+7	; 0x07
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	17 96       	adiw	r26, 0x07	; 7
    14b6:	8c 93       	st	X, r24
	CLEAR_BIT(TIM0_BASE->TIMSK_t.Reg,OCIE0);
    14b8:	a2 e5       	ldi	r26, 0x52	; 82
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e5       	ldi	r30, 0x52	; 82
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	87 81       	ldd	r24, Z+7	; 0x07
    14c2:	8d 7f       	andi	r24, 0xFD	; 253
    14c4:	17 96       	adiw	r26, 0x07	; 7
    14c6:	8c 93       	st	X, r24
    14c8:	17 97       	sbiw	r26, 0x07	; 7
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <setFastPWM>:

Error_Status setFastPWM(uint8 duty)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <setFastPWM+0x6>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	89 83       	std	Y+1, r24	; 0x01
	TIM0_BASE->OCR0_t.Reg = (255*duty)/100;
    14dc:	e2 e5       	ldi	r30, 0x52	; 82
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	48 2f       	mov	r20, r24
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	ca 01       	movw	r24, r20
    14e8:	9c 01       	movw	r18, r24
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	c9 01       	movw	r24, r18
    14f0:	96 95       	lsr	r25
    14f2:	98 2f       	mov	r25, r24
    14f4:	88 27       	eor	r24, r24
    14f6:	97 95       	ror	r25
    14f8:	87 95       	ror	r24
    14fa:	82 1b       	sub	r24, r18
    14fc:	93 0b       	sbc	r25, r19
    14fe:	84 0f       	add	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	24 e6       	ldi	r18, 0x64	; 100
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	b9 01       	movw	r22, r18
    1508:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <__divmodhi4>
    150c:	cb 01       	movw	r24, r22
    150e:	82 87       	std	Z+10, r24	; 0x0a
	if(duty<0 || duty >100)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	85 36       	cpi	r24, 0x65	; 101
    1514:	10 f0       	brcs	.+4      	; 0x151a <setFastPWM+0x4a>
	{
		return OUT_OF_RANGE;
    1516:	1a 82       	std	Y+2, r1	; 0x02
    1518:	02 c0       	rjmp	.+4      	; 0x151e <setFastPWM+0x4e>
	}
	return NO_ERROR;
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <H_LCD_void_Init>:
#include "INC/LCD.h"
#include "util/delay.h"


void H_LCD_void_Init(void)
{
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	c4 55       	subi	r28, 0x54	; 84
    1538:	d0 40       	sbci	r29, 0x00	; 0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1544:	89 e3       	ldi	r24, 0x39	; 57
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	63 e0       	ldi	r22, 0x03	; 3
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1550:	89 e3       	ldi	r24, 0x39	; 57
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN0,OUTPUT);
    155c:	86 e3       	ldi	r24, 0x36	; 54
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN1,OUTPUT);
    1568:	86 e3       	ldi	r24, 0x36	; 54
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN2,OUTPUT);
    1574:	86 e3       	ldi	r24, 0x36	; 54
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID,PIN4,OUTPUT);
    1580:	86 e3       	ldi	r24, 0x36	; 54
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	64 e0       	ldi	r22, 0x04	; 4
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
    158c:	fe 01       	movw	r30, r28
    158e:	ef 5a       	subi	r30, 0xAF	; 175
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 ef       	ldi	r26, 0xF0	; 240
    1598:	b1 e4       	ldi	r27, 0x41	; 65
    159a:	80 83       	st	Z, r24
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	a2 83       	std	Z+2, r26	; 0x02
    15a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	8e 01       	movw	r16, r28
    15a4:	03 5b       	subi	r16, 0xB3	; 179
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	fe 01       	movw	r30, r28
    15aa:	ef 5a       	subi	r30, 0xAF	; 175
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a e7       	ldi	r20, 0x7A	; 122
    15bc:	55 e4       	ldi	r21, 0x45	; 69
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	f8 01       	movw	r30, r16
    15c8:	80 83       	st	Z, r24
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	a2 83       	std	Z+2, r26	; 0x02
    15ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d0:	fe 01       	movw	r30, r28
    15d2:	e3 5b       	subi	r30, 0xB3	; 179
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	44 f4       	brge	.+16     	; 0x15fe <H_LCD_void_Init+0xd4>
		__ticks = 1;
    15ee:	fe 01       	movw	r30, r28
    15f0:	e5 5b       	subi	r30, 0xB5	; 181
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	64 c0       	rjmp	.+200    	; 0x16c6 <H_LCD_void_Init+0x19c>
	else if (__tmp > 65535)
    15fe:	fe 01       	movw	r30, r28
    1600:	e3 5b       	subi	r30, 0xB3	; 179
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	93 81       	ldd	r25, Z+3	; 0x03
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	0c f0       	brlt	.+2      	; 0x161e <H_LCD_void_Init+0xf4>
    161c:	43 c0       	rjmp	.+134    	; 0x16a4 <H_LCD_void_Init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	fe 01       	movw	r30, r28
    1620:	ef 5a       	subi	r30, 0xAF	; 175
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8e 01       	movw	r16, r28
    163e:	05 5b       	subi	r16, 0xB5	; 181
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	1f c0       	rjmp	.+62     	; 0x1694 <H_LCD_void_Init+0x16a>
    1656:	fe 01       	movw	r30, r28
    1658:	e7 5b       	subi	r30, 0xB7	; 183
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 e9       	ldi	r24, 0x90	; 144
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5b       	subi	r30, 0xB7	; 183
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <H_LCD_void_Init+0x144>
    1672:	fe 01       	movw	r30, r28
    1674:	e7 5b       	subi	r30, 0xB7	; 183
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	de 01       	movw	r26, r28
    167e:	a5 5b       	subi	r26, 0xB5	; 181
    1680:	bf 4f       	sbci	r27, 0xFF	; 255
    1682:	fe 01       	movw	r30, r28
    1684:	e5 5b       	subi	r30, 0xB5	; 181
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	11 96       	adiw	r26, 0x01	; 1
    1690:	9c 93       	st	X, r25
    1692:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1694:	fe 01       	movw	r30, r28
    1696:	e5 5b       	subi	r30, 0xB5	; 181
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	d1 f6       	brne	.-76     	; 0x1656 <H_LCD_void_Init+0x12c>
    16a2:	27 c0       	rjmp	.+78     	; 0x16f2 <H_LCD_void_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	8e 01       	movw	r16, r28
    16a6:	05 5b       	subi	r16, 0xB5	; 181
    16a8:	1f 4f       	sbci	r17, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	e3 5b       	subi	r30, 0xB3	; 179
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	f8 01       	movw	r30, r16
    16c2:	91 83       	std	Z+1, r25	; 0x01
    16c4:	80 83       	st	Z, r24
    16c6:	de 01       	movw	r26, r28
    16c8:	a9 5b       	subi	r26, 0xB9	; 185
    16ca:	bf 4f       	sbci	r27, 0xFF	; 255
    16cc:	fe 01       	movw	r30, r28
    16ce:	e5 5b       	subi	r30, 0xB5	; 181
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	8d 93       	st	X+, r24
    16d8:	9c 93       	st	X, r25
    16da:	fe 01       	movw	r30, r28
    16dc:	e9 5b       	subi	r30, 0xB9	; 185
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <H_LCD_void_Init+0x1ba>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e9 5b       	subi	r30, 0xB9	; 185
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
	_delay_ms(30);

	/********************* function set command ***********************/

#if(LCD_DATA_BIT_MODE == 4)
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    16f2:	89 e3       	ldi	r24, 0x39	; 57
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	63 e0       	ldi	r22, 0x03	; 3
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN0,LOGIC_LOW);
    16fe:	86 e3       	ldi	r24, 0x36	; 54
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN1,LOGIC_HIGH);
    170a:	86 e3       	ldi	r24, 0x36	; 54
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN2,LOGIC_LOW);
    1716:	86 e3       	ldi	r24, 0x36	; 54
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID,PIN4,LOGIC_LOW);
    1722:	86 e3       	ldi	r24, 0x36	; 54
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	64 e0       	ldi	r22, 0x04	; 4
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    172e:	fe 01       	movw	r30, r28
    1730:	ed 5b       	subi	r30, 0xBD	; 189
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e8       	ldi	r26, 0x80	; 128
    173a:	bf e3       	ldi	r27, 0x3F	; 63
    173c:	80 83       	st	Z, r24
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	a2 83       	std	Z+2, r26	; 0x02
    1742:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	8e 01       	movw	r16, r28
    1746:	01 5c       	subi	r16, 0xC1	; 193
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	fe 01       	movw	r30, r28
    174c:	ed 5b       	subi	r30, 0xBD	; 189
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a e7       	ldi	r20, 0x7A	; 122
    175e:	55 e4       	ldi	r21, 0x45	; 69
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	f8 01       	movw	r30, r16
    176a:	80 83       	st	Z, r24
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	a2 83       	std	Z+2, r26	; 0x02
    1770:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1772:	fe 01       	movw	r30, r28
    1774:	ff 96       	adiw	r30, 0x3f	; 63
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9e af       	std	Y+62, r25	; 0x3e
    1794:	8d af       	std	Y+61, r24	; 0x3d
    1796:	46 c0       	rjmp	.+140    	; 0x1824 <H_LCD_void_Init+0x2fa>
	else if (__tmp > 65535)
    1798:	fe 01       	movw	r30, r28
    179a:	ff 96       	adiw	r30, 0x3f	; 63
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	64 f5       	brge	.+88     	; 0x180c <H_LCD_void_Init+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b4:	fe 01       	movw	r30, r28
    17b6:	ed 5b       	subi	r30, 0xBD	; 189
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e af       	std	Y+62, r25	; 0x3e
    17e0:	8d af       	std	Y+61, r24	; 0x3d
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <H_LCD_void_Init+0x2d8>
    17e4:	80 e9       	ldi	r24, 0x90	; 144
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	9c af       	std	Y+60, r25	; 0x3c
    17ea:	8b af       	std	Y+59, r24	; 0x3b
    17ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    17ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <H_LCD_void_Init+0x2c6>
    17f4:	9c af       	std	Y+60, r25	; 0x3c
    17f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	9e af       	std	Y+62, r25	; 0x3e
    1800:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1802:	8d ad       	ldd	r24, Y+61	; 0x3d
    1804:	9e ad       	ldd	r25, Y+62	; 0x3e
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f7       	brne	.-38     	; 0x17e4 <H_LCD_void_Init+0x2ba>
    180a:	16 c0       	rjmp	.+44     	; 0x1838 <H_LCD_void_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180c:	fe 01       	movw	r30, r28
    180e:	ff 96       	adiw	r30, 0x3f	; 63
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9e af       	std	Y+62, r25	; 0x3e
    1822:	8d af       	std	Y+61, r24	; 0x3d
    1824:	8d ad       	ldd	r24, Y+61	; 0x3d
    1826:	9e ad       	ldd	r25, Y+62	; 0x3e
    1828:	9a af       	std	Y+58, r25	; 0x3a
    182a:	89 af       	std	Y+57, r24	; 0x39
    182c:	89 ad       	ldd	r24, Y+57	; 0x39
    182e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <H_LCD_void_Init+0x306>
    1834:	9a af       	std	Y+58, r25	; 0x3a
    1836:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1838:	88 e2       	ldi	r24, 0x28	; 40
    183a:	0e 94 1e 11 	call	0x223c	; 0x223c <H_LCD_void_sendCommand>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a0 e8       	ldi	r26, 0x80	; 128
    1844:	bf e3       	ldi	r27, 0x3F	; 63
    1846:	8d ab       	std	Y+53, r24	; 0x35
    1848:	9e ab       	std	Y+54, r25	; 0x36
    184a:	af ab       	std	Y+55, r26	; 0x37
    184c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184e:	6d a9       	ldd	r22, Y+53	; 0x35
    1850:	7e a9       	ldd	r23, Y+54	; 0x36
    1852:	8f a9       	ldd	r24, Y+55	; 0x37
    1854:	98 ad       	ldd	r25, Y+56	; 0x38
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	4a e7       	ldi	r20, 0x7A	; 122
    185c:	55 e4       	ldi	r21, 0x45	; 69
    185e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	89 ab       	std	Y+49, r24	; 0x31
    1868:	9a ab       	std	Y+50, r25	; 0x32
    186a:	ab ab       	std	Y+51, r26	; 0x33
    186c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    186e:	69 a9       	ldd	r22, Y+49	; 0x31
    1870:	7a a9       	ldd	r23, Y+50	; 0x32
    1872:	8b a9       	ldd	r24, Y+51	; 0x33
    1874:	9c a9       	ldd	r25, Y+52	; 0x34
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	2c f4       	brge	.+10     	; 0x1890 <H_LCD_void_Init+0x366>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	98 ab       	std	Y+48, r25	; 0x30
    188c:	8f a7       	std	Y+47, r24	; 0x2f
    188e:	3f c0       	rjmp	.+126    	; 0x190e <H_LCD_void_Init+0x3e4>
	else if (__tmp > 65535)
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	3f ef       	ldi	r19, 0xFF	; 255
    189c:	4f e7       	ldi	r20, 0x7F	; 127
    189e:	57 e4       	ldi	r21, 0x47	; 71
    18a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a4:	18 16       	cp	r1, r24
    18a6:	4c f5       	brge	.+82     	; 0x18fa <H_LCD_void_Init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a8:	6d a9       	ldd	r22, Y+53	; 0x35
    18aa:	7e a9       	ldd	r23, Y+54	; 0x36
    18ac:	8f a9       	ldd	r24, Y+55	; 0x37
    18ae:	98 ad       	ldd	r25, Y+56	; 0x38
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	98 ab       	std	Y+48, r25	; 0x30
    18ce:	8f a7       	std	Y+47, r24	; 0x2f
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <H_LCD_void_Init+0x3c6>
    18d2:	80 e9       	ldi	r24, 0x90	; 144
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	9e a7       	std	Y+46, r25	; 0x2e
    18d8:	8d a7       	std	Y+45, r24	; 0x2d
    18da:	8d a5       	ldd	r24, Y+45	; 0x2d
    18dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <H_LCD_void_Init+0x3b4>
    18e2:	9e a7       	std	Y+46, r25	; 0x2e
    18e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f2:	98 a9       	ldd	r25, Y+48	; 0x30
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <H_LCD_void_Init+0x3a8>
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <H_LCD_void_Init+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	69 a9       	ldd	r22, Y+49	; 0x31
    18fc:	7a a9       	ldd	r23, Y+50	; 0x32
    18fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1900:	9c a9       	ldd	r25, Y+52	; 0x34
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	98 ab       	std	Y+48, r25	; 0x30
    190c:	8f a7       	std	Y+47, r24	; 0x2f
    190e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1910:	98 a9       	ldd	r25, Y+48	; 0x30
    1912:	9c a7       	std	Y+44, r25	; 0x2c
    1914:	8b a7       	std	Y+43, r24	; 0x2b
    1916:	8b a5       	ldd	r24, Y+43	; 0x2b
    1918:	9c a5       	ldd	r25, Y+44	; 0x2c
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <H_LCD_void_Init+0x3f0>
    191e:	9c a7       	std	Y+44, r25	; 0x2c
    1920:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CURSOR_OFF);
    1922:	8c e0       	ldi	r24, 0x0C	; 12
    1924:	0e 94 1e 11 	call	0x223c	; 0x223c <H_LCD_void_sendCommand>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e8       	ldi	r26, 0x80	; 128
    192e:	bf e3       	ldi	r27, 0x3F	; 63
    1930:	8f a3       	std	Y+39, r24	; 0x27
    1932:	98 a7       	std	Y+40, r25	; 0x28
    1934:	a9 a7       	std	Y+41, r26	; 0x29
    1936:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	6f a1       	ldd	r22, Y+39	; 0x27
    193a:	78 a5       	ldd	r23, Y+40	; 0x28
    193c:	89 a5       	ldd	r24, Y+41	; 0x29
    193e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a e7       	ldi	r20, 0x7A	; 122
    1946:	55 e4       	ldi	r21, 0x45	; 69
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8b a3       	std	Y+35, r24	; 0x23
    1952:	9c a3       	std	Y+36, r25	; 0x24
    1954:	ad a3       	std	Y+37, r26	; 0x25
    1956:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1958:	6b a1       	ldd	r22, Y+35	; 0x23
    195a:	7c a1       	ldd	r23, Y+36	; 0x24
    195c:	8d a1       	ldd	r24, Y+37	; 0x25
    195e:	9e a1       	ldd	r25, Y+38	; 0x26
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <H_LCD_void_Init+0x450>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <H_LCD_void_Init+0x4ce>
	else if (__tmp > 65535)
    197a:	6b a1       	ldd	r22, Y+35	; 0x23
    197c:	7c a1       	ldd	r23, Y+36	; 0x24
    197e:	8d a1       	ldd	r24, Y+37	; 0x25
    1980:	9e a1       	ldd	r25, Y+38	; 0x26
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198e:	18 16       	cp	r1, r24
    1990:	4c f5       	brge	.+82     	; 0x19e4 <H_LCD_void_Init+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	6f a1       	ldd	r22, Y+39	; 0x27
    1994:	78 a5       	ldd	r23, Y+40	; 0x28
    1996:	89 a5       	ldd	r24, Y+41	; 0x29
    1998:	9a a5       	ldd	r25, Y+42	; 0x2a
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e2       	ldi	r20, 0x20	; 32
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <H_LCD_void_Init+0x4b0>
    19bc:	80 e9       	ldi	r24, 0x90	; 144
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	98 a3       	std	Y+32, r25	; 0x20
    19c2:	8f 8f       	std	Y+31, r24	; 0x1f
    19c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19c6:	98 a1       	ldd	r25, Y+32	; 0x20
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <H_LCD_void_Init+0x49e>
    19cc:	98 a3       	std	Y+32, r25	; 0x20
    19ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	89 a1       	ldd	r24, Y+33	; 0x21
    19d2:	9a a1       	ldd	r25, Y+34	; 0x22
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9a a3       	std	Y+34, r25	; 0x22
    19d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	69 f7       	brne	.-38     	; 0x19bc <H_LCD_void_Init+0x492>
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <H_LCD_void_Init+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	6b a1       	ldd	r22, Y+35	; 0x23
    19e6:	7c a1       	ldd	r23, Y+36	; 0x24
    19e8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ea:	9e a1       	ldd	r25, Y+38	; 0x26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9a a3       	std	Y+34, r25	; 0x22
    19f6:	89 a3       	std	Y+33, r24	; 0x21
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	9e 8f       	std	Y+30, r25	; 0x1e
    19fe:	8d 8f       	std	Y+29, r24	; 0x1d
    1a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <H_LCD_void_Init+0x4da>
    1a08:	9e 8f       	std	Y+30, r25	; 0x1e
    1a0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 1e 11 	call	0x223c	; 0x223c <H_LCD_void_sendCommand>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e8       	ldi	r26, 0x80	; 128
    1a18:	bf e3       	ldi	r27, 0x3F	; 63
    1a1a:	89 8f       	std	Y+25, r24	; 0x19
    1a1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	69 8d       	ldd	r22, Y+25	; 0x19
    1a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a e7       	ldi	r20, 0x7A	; 122
    1a30:	55 e4       	ldi	r21, 0x45	; 69
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8d 8b       	std	Y+21, r24	; 0x15
    1a3c:	9e 8b       	std	Y+22, r25	; 0x16
    1a3e:	af 8b       	std	Y+23, r26	; 0x17
    1a40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a42:	6d 89       	ldd	r22, Y+21	; 0x15
    1a44:	7e 89       	ldd	r23, Y+22	; 0x16
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <H_LCD_void_Init+0x53a>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <H_LCD_void_Init+0x5b8>
	else if (__tmp > 65535)
    1a64:	6d 89       	ldd	r22, Y+21	; 0x15
    1a66:	7e 89       	ldd	r23, Y+22	; 0x16
    1a68:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <H_LCD_void_Init+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	8b 8b       	std	Y+19, r24	; 0x13
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <H_LCD_void_Init+0x59a>
    1aa6:	80 e9       	ldi	r24, 0x90	; 144
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	9a 8b       	std	Y+18, r25	; 0x12
    1aac:	89 8b       	std	Y+17, r24	; 0x11
    1aae:	89 89       	ldd	r24, Y+17	; 0x11
    1ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <H_LCD_void_Init+0x588>
    1ab6:	9a 8b       	std	Y+18, r25	; 0x12
    1ab8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	8b 89       	ldd	r24, Y+19	; 0x13
    1abc:	9c 89       	ldd	r25, Y+20	; 0x14
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9c 8b       	std	Y+20, r25	; 0x14
    1ac2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <H_LCD_void_Init+0x57c>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <H_LCD_void_Init+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae6:	98 8b       	std	Y+16, r25	; 0x10
    1ae8:	8f 87       	std	Y+15, r24	; 0x0f
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	98 89       	ldd	r25, Y+16	; 0x10
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <H_LCD_void_Init+0x5c4>
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 1e 11 	call	0x223c	; 0x223c <H_LCD_void_sendCommand>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	8b 87       	std	Y+11, r24	; 0x0b
    1b06:	9c 87       	std	Y+12, r25	; 0x0c
    1b08:	ad 87       	std	Y+13, r26	; 0x0d
    1b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	55 e4       	ldi	r21, 0x45	; 69
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8f 83       	std	Y+7, r24	; 0x07
    1b26:	98 87       	std	Y+8, r25	; 0x08
    1b28:	a9 87       	std	Y+9, r26	; 0x09
    1b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <H_LCD_void_Init+0x624>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <H_LCD_void_Init+0x6a2>
	else if (__tmp > 65535)
    1b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b50:	78 85       	ldd	r23, Y+8	; 0x08
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <H_LCD_void_Init+0x68e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <H_LCD_void_Init+0x684>
    1b90:	80 e9       	ldi	r24, 0x90	; 144
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <H_LCD_void_Init+0x672>
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <H_LCD_void_Init+0x666>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <H_LCD_void_Init+0x6b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bba:	78 85       	ldd	r23, Y+8	; 0x08
    1bbc:	89 85       	ldd	r24, Y+9	; 0x09
    1bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <H_LCD_void_Init+0x6ae>
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01

#else if(LCD_DATA_BIT_MODE == 8)
	DIO_voidSetPortDirection(LCD_DATA_PORT_ID,LOGIC_HIGH);
#endif

}
    1be0:	cc 5a       	subi	r28, 0xAC	; 172
    1be2:	df 4f       	sbci	r29, 0xFF	; 255
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(uint8 copy_u8Byte)
{
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	c7 54       	subi	r28, 0x47	; 71
    1c06:	d0 40       	sbci	r29, 0x00	; 0
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	fe 01       	movw	r30, r28
    1c14:	e9 5b       	subi	r30, 0xB9	; 185
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 83       	st	Z, r24
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    1c1a:	89 e3       	ldi	r24, 0x39	; 57
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    1c26:	fe 01       	movw	r30, r28
    1c28:	ed 5b       	subi	r30, 0xBD	; 189
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	80 83       	st	Z, r24
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	a2 83       	std	Z+2, r26	; 0x02
    1c3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	8e 01       	movw	r16, r28
    1c3e:	01 5c       	subi	r16, 0xC1	; 193
    1c40:	1f 4f       	sbci	r17, 0xFF	; 255
    1c42:	fe 01       	movw	r30, r28
    1c44:	ed 5b       	subi	r30, 0xBD	; 189
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a e7       	ldi	r20, 0x7A	; 122
    1c56:	55 e4       	ldi	r21, 0x45	; 69
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	f8 01       	movw	r30, r16
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ff 96       	adiw	r30, 0x3f	; 63
    1c6e:	60 81       	ld	r22, Z
    1c70:	71 81       	ldd	r23, Z+1	; 0x01
    1c72:	82 81       	ldd	r24, Z+2	; 0x02
    1c74:	93 81       	ldd	r25, Z+3	; 0x03
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <H_LCD_void_latchByte+0x98>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9e af       	std	Y+62, r25	; 0x3e
    1c8c:	8d af       	std	Y+61, r24	; 0x3d
    1c8e:	46 c0       	rjmp	.+140    	; 0x1d1c <H_LCD_void_latchByte+0x124>
	else if (__tmp > 65535)
    1c90:	fe 01       	movw	r30, r28
    1c92:	ff 96       	adiw	r30, 0x3f	; 63
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	64 f5       	brge	.+88     	; 0x1d04 <H_LCD_void_latchByte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	fe 01       	movw	r30, r28
    1cae:	ed 5b       	subi	r30, 0xBD	; 189
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e2       	ldi	r20, 0x20	; 32
    1cc0:	51 e4       	ldi	r21, 0x41	; 65
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9e af       	std	Y+62, r25	; 0x3e
    1cd8:	8d af       	std	Y+61, r24	; 0x3d
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <H_LCD_void_latchByte+0x102>
    1cdc:	80 e9       	ldi	r24, 0x90	; 144
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	9c af       	std	Y+60, r25	; 0x3c
    1ce2:	8b af       	std	Y+59, r24	; 0x3b
    1ce4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ce6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <H_LCD_void_latchByte+0xf0>
    1cec:	9c af       	std	Y+60, r25	; 0x3c
    1cee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	9e af       	std	Y+62, r25	; 0x3e
    1cf8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <H_LCD_void_latchByte+0xe4>
    1d02:	16 c0       	rjmp	.+44     	; 0x1d30 <H_LCD_void_latchByte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d04:	fe 01       	movw	r30, r28
    1d06:	ff 96       	adiw	r30, 0x3f	; 63
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9e af       	std	Y+62, r25	; 0x3e
    1d1a:	8d af       	std	Y+61, r24	; 0x3d
    1d1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d20:	9a af       	std	Y+58, r25	; 0x3a
    1d22:	89 af       	std	Y+57, r24	; 0x39
    1d24:	89 ad       	ldd	r24, Y+57	; 0x39
    1d26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <H_LCD_void_latchByte+0x130>
    1d2c:	9a af       	std	Y+58, r25	; 0x3a
    1d2e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,4));
    1d30:	fe 01       	movw	r30, r28
    1d32:	e9 5b       	subi	r30, 0xB9	; 185
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 81       	ld	r24, Z
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	80 71       	andi	r24, 0x10	; 16
    1d3e:	90 70       	andi	r25, 0x00	; 0
    1d40:	95 95       	asr	r25
    1d42:	87 95       	ror	r24
    1d44:	95 95       	asr	r25
    1d46:	87 95       	ror	r24
    1d48:	95 95       	asr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	95 95       	asr	r25
    1d4e:	87 95       	ror	r24
    1d50:	28 2f       	mov	r18, r24
    1d52:	86 e3       	ldi	r24, 0x36	; 54
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	42 2f       	mov	r20, r18
    1d5a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,5));
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e9 5b       	subi	r30, 0xB9	; 185
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	80 72       	andi	r24, 0x20	; 32
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	95 95       	asr	r25
    1d70:	87 95       	ror	r24
    1d72:	95 95       	asr	r25
    1d74:	87 95       	ror	r24
    1d76:	95 95       	asr	r25
    1d78:	87 95       	ror	r24
    1d7a:	95 95       	asr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	95 95       	asr	r25
    1d80:	87 95       	ror	r24
    1d82:	28 2f       	mov	r18, r24
    1d84:	86 e3       	ldi	r24, 0x36	; 54
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	42 2f       	mov	r20, r18
    1d8c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,6));
    1d90:	fe 01       	movw	r30, r28
    1d92:	e9 5b       	subi	r30, 0xB9	; 185
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	80 74       	andi	r24, 0x40	; 64
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	08 2e       	mov	r0, r24
    1da2:	89 2f       	mov	r24, r25
    1da4:	00 0c       	add	r0, r0
    1da6:	88 1f       	adc	r24, r24
    1da8:	99 0b       	sbc	r25, r25
    1daa:	00 0c       	add	r0, r0
    1dac:	88 1f       	adc	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	28 2f       	mov	r18, r24
    1db2:	86 e3       	ldi	r24, 0x36	; 54
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	42 2f       	mov	r20, r18
    1dba:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,7));
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e9 5b       	subi	r30, 0xB9	; 185
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	22 1f       	adc	r18, r18
    1dca:	22 27       	eor	r18, r18
    1dcc:	22 1f       	adc	r18, r18
    1dce:	86 e3       	ldi	r24, 0x36	; 54
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	64 e0       	ldi	r22, 0x04	; 4
    1dd4:	42 2f       	mov	r20, r18
    1dd6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    1dda:	89 e3       	ldi	r24, 0x39	; 57
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8d ab       	std	Y+53, r24	; 0x35
    1df0:	9e ab       	std	Y+54, r25	; 0x36
    1df2:	af ab       	std	Y+55, r26	; 0x37
    1df4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6d a9       	ldd	r22, Y+53	; 0x35
    1df8:	7e a9       	ldd	r23, Y+54	; 0x36
    1dfa:	8f a9       	ldd	r24, Y+55	; 0x37
    1dfc:	98 ad       	ldd	r25, Y+56	; 0x38
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a e7       	ldi	r20, 0x7A	; 122
    1e04:	55 e4       	ldi	r21, 0x45	; 69
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	89 ab       	std	Y+49, r24	; 0x31
    1e10:	9a ab       	std	Y+50, r25	; 0x32
    1e12:	ab ab       	std	Y+51, r26	; 0x33
    1e14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e16:	69 a9       	ldd	r22, Y+49	; 0x31
    1e18:	7a a9       	ldd	r23, Y+50	; 0x32
    1e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <H_LCD_void_latchByte+0x240>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 ab       	std	Y+48, r25	; 0x30
    1e34:	8f a7       	std	Y+47, r24	; 0x2f
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <H_LCD_void_latchByte+0x2be>
	else if (__tmp > 65535)
    1e38:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <H_LCD_void_latchByte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6d a9       	ldd	r22, Y+53	; 0x35
    1e52:	7e a9       	ldd	r23, Y+54	; 0x36
    1e54:	8f a9       	ldd	r24, Y+55	; 0x37
    1e56:	98 ad       	ldd	r25, Y+56	; 0x38
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	98 ab       	std	Y+48, r25	; 0x30
    1e76:	8f a7       	std	Y+47, r24	; 0x2f
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <H_LCD_void_latchByte+0x2a0>
    1e7a:	80 e9       	ldi	r24, 0x90	; 144
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	9e a7       	std	Y+46, r25	; 0x2e
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
    1e82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <H_LCD_void_latchByte+0x28e>
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e90:	98 a9       	ldd	r25, Y+48	; 0x30
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	98 ab       	std	Y+48, r25	; 0x30
    1e96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <H_LCD_void_latchByte+0x282>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <H_LCD_void_latchByte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	9c a7       	std	Y+44, r25	; 0x2c
    1ebc:	8b a7       	std	Y+43, r24	; 0x2b
    1ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <H_LCD_void_latchByte+0x2ca>
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    1eca:	89 e3       	ldi	r24, 0x39	; 57
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	62 e0       	ldi	r22, 0x02	; 2
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e8       	ldi	r26, 0x80	; 128
    1edc:	bf e3       	ldi	r27, 0x3F	; 63
    1ede:	8f a3       	std	Y+39, r24	; 0x27
    1ee0:	98 a7       	std	Y+40, r25	; 0x28
    1ee2:	a9 a7       	std	Y+41, r26	; 0x29
    1ee4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ee8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eea:	89 a5       	ldd	r24, Y+41	; 0x29
    1eec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	4a e7       	ldi	r20, 0x7A	; 122
    1ef4:	55 e4       	ldi	r21, 0x45	; 69
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8b a3       	std	Y+35, r24	; 0x23
    1f00:	9c a3       	std	Y+36, r25	; 0x24
    1f02:	ad a3       	std	Y+37, r26	; 0x25
    1f04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f06:	6b a1       	ldd	r22, Y+35	; 0x23
    1f08:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <H_LCD_void_latchByte+0x330>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9a a3       	std	Y+34, r25	; 0x22
    1f24:	89 a3       	std	Y+33, r24	; 0x21
    1f26:	3f c0       	rjmp	.+126    	; 0x1fa6 <H_LCD_void_latchByte+0x3ae>
	else if (__tmp > 65535)
    1f28:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	4c f5       	brge	.+82     	; 0x1f92 <H_LCD_void_latchByte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	6f a1       	ldd	r22, Y+39	; 0x27
    1f42:	78 a5       	ldd	r23, Y+40	; 0x28
    1f44:	89 a5       	ldd	r24, Y+41	; 0x29
    1f46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	51 e4       	ldi	r21, 0x41	; 65
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	89 a3       	std	Y+33, r24	; 0x21
    1f68:	0f c0       	rjmp	.+30     	; 0x1f88 <H_LCD_void_latchByte+0x390>
    1f6a:	80 e9       	ldi	r24, 0x90	; 144
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	98 a3       	std	Y+32, r25	; 0x20
    1f70:	8f 8f       	std	Y+31, r24	; 0x1f
    1f72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f74:	98 a1       	ldd	r25, Y+32	; 0x20
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <H_LCD_void_latchByte+0x37e>
    1f7a:	98 a3       	std	Y+32, r25	; 0x20
    1f7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f80:	9a a1       	ldd	r25, Y+34	; 0x22
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	9a a3       	std	Y+34, r25	; 0x22
    1f86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	69 f7       	brne	.-38     	; 0x1f6a <H_LCD_void_latchByte+0x372>
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <H_LCD_void_latchByte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f92:	6b a1       	ldd	r22, Y+35	; 0x23
    1f94:	7c a1       	ldd	r23, Y+36	; 0x24
    1f96:	8d a1       	ldd	r24, Y+37	; 0x25
    1f98:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9a a3       	std	Y+34, r25	; 0x22
    1fa4:	89 a3       	std	Y+33, r24	; 0x21
    1fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    1faa:	9e 8f       	std	Y+30, r25	; 0x1e
    1fac:	8d 8f       	std	Y+29, r24	; 0x1d
    1fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <H_LCD_void_latchByte+0x3ba>
    1fb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN0, GET_BIT(copy_u8Byte,0));
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e9 5b       	subi	r30, 0xB9	; 185
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	21 70       	andi	r18, 0x01	; 1
    1fc6:	86 e3       	ldi	r24, 0x36	; 54
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	60 e0       	ldi	r22, 0x00	; 0
    1fcc:	42 2f       	mov	r20, r18
    1fce:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN1, GET_BIT(copy_u8Byte,1));
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 5b       	subi	r30, 0xB9	; 185
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 2f       	mov	r24, r24
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	82 70       	andi	r24, 0x02	; 2
    1fe0:	90 70       	andi	r25, 0x00	; 0
    1fe2:	95 95       	asr	r25
    1fe4:	87 95       	ror	r24
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	86 e3       	ldi	r24, 0x36	; 54
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	61 e0       	ldi	r22, 0x01	; 1
    1fee:	42 2f       	mov	r20, r18
    1ff0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN2, GET_BIT(copy_u8Byte,2));
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e9 5b       	subi	r30, 0xB9	; 185
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	84 70       	andi	r24, 0x04	; 4
    2002:	90 70       	andi	r25, 0x00	; 0
    2004:	95 95       	asr	r25
    2006:	87 95       	ror	r24
    2008:	95 95       	asr	r25
    200a:	87 95       	ror	r24
    200c:	28 2f       	mov	r18, r24
    200e:	86 e3       	ldi	r24, 0x36	; 54
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	62 e0       	ldi	r22, 0x02	; 2
    2014:	42 2f       	mov	r20, r18
    2016:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT_ID, PIN4, GET_BIT(copy_u8Byte,3));
    201a:	fe 01       	movw	r30, r28
    201c:	e9 5b       	subi	r30, 0xB9	; 185
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	88 70       	andi	r24, 0x08	; 8
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	95 95       	asr	r25
    202c:	87 95       	ror	r24
    202e:	95 95       	asr	r25
    2030:	87 95       	ror	r24
    2032:	95 95       	asr	r25
    2034:	87 95       	ror	r24
    2036:	28 2f       	mov	r18, r24
    2038:	86 e3       	ldi	r24, 0x36	; 54
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	64 e0       	ldi	r22, 0x04	; 4
    203e:	42 2f       	mov	r20, r18
    2040:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH);
    2044:	89 e3       	ldi	r24, 0x39	; 57
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	62 e0       	ldi	r22, 0x02	; 2
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a0 e8       	ldi	r26, 0x80	; 128
    2056:	bf e3       	ldi	r27, 0x3F	; 63
    2058:	89 8f       	std	Y+25, r24	; 0x19
    205a:	9a 8f       	std	Y+26, r25	; 0x1a
    205c:	ab 8f       	std	Y+27, r26	; 0x1b
    205e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	69 8d       	ldd	r22, Y+25	; 0x19
    2062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	4a e7       	ldi	r20, 0x7A	; 122
    206e:	55 e4       	ldi	r21, 0x45	; 69
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8d 8b       	std	Y+21, r24	; 0x15
    207a:	9e 8b       	std	Y+22, r25	; 0x16
    207c:	af 8b       	std	Y+23, r26	; 0x17
    207e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <H_LCD_void_latchByte+0x4aa>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <H_LCD_void_latchByte+0x528>
	else if (__tmp > 65535)
    20a2:	6d 89       	ldd	r22, Y+21	; 0x15
    20a4:	7e 89       	ldd	r23, Y+22	; 0x16
    20a6:	8f 89       	ldd	r24, Y+23	; 0x17
    20a8:	98 8d       	ldd	r25, Y+24	; 0x18
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	4c f5       	brge	.+82     	; 0x210c <H_LCD_void_latchByte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	69 8d       	ldd	r22, Y+25	; 0x19
    20bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <H_LCD_void_latchByte+0x50a>
    20e4:	80 e9       	ldi	r24, 0x90	; 144
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	89 8b       	std	Y+17, r24	; 0x11
    20ec:	89 89       	ldd	r24, Y+17	; 0x11
    20ee:	9a 89       	ldd	r25, Y+18	; 0x12
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <H_LCD_void_latchByte+0x4f8>
    20f4:	9a 8b       	std	Y+18, r25	; 0x12
    20f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9c 8b       	std	Y+20, r25	; 0x14
    2100:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <H_LCD_void_latchByte+0x4ec>
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <H_LCD_void_latchByte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9c 8b       	std	Y+20, r25	; 0x14
    211e:	8b 8b       	std	Y+19, r24	; 0x13
    2120:	8b 89       	ldd	r24, Y+19	; 0x13
    2122:	9c 89       	ldd	r25, Y+20	; 0x14
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
    2128:	8f 85       	ldd	r24, Y+15	; 0x0f
    212a:	98 89       	ldd	r25, Y+16	; 0x10
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <H_LCD_void_latchByte+0x534>
    2130:	98 8b       	std	Y+16, r25	; 0x10
    2132:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW);
    2134:	89 e3       	ldi	r24, 0x39	; 57
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	62 e0       	ldi	r22, 0x02	; 2
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 ea       	ldi	r26, 0xA0	; 160
    2146:	b0 e4       	ldi	r27, 0x40	; 64
    2148:	8b 87       	std	Y+11, r24	; 0x0b
    214a:	9c 87       	std	Y+12, r25	; 0x0c
    214c:	ad 87       	std	Y+13, r26	; 0x0d
    214e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a e7       	ldi	r20, 0x7A	; 122
    215e:	55 e4       	ldi	r21, 0x45	; 69
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8f 83       	std	Y+7, r24	; 0x07
    216a:	98 87       	std	Y+8, r25	; 0x08
    216c:	a9 87       	std	Y+9, r26	; 0x09
    216e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <H_LCD_void_latchByte+0x59a>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <H_LCD_void_latchByte+0x618>
	else if (__tmp > 65535)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <H_LCD_void_latchByte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <H_LCD_void_latchByte+0x5fa>
    21d4:	80 e9       	ldi	r24, 0x90	; 144
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <H_LCD_void_latchByte+0x5e8>
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <H_LCD_void_latchByte+0x5dc>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <H_LCD_void_latchByte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <H_LCD_void_latchByte+0x624>
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2224:	c9 5b       	subi	r28, 0xB9	; 185
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(uint8 copy_u8command)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	0f 92       	push	r0
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2248:	89 e3       	ldi	r24, 0x39	; 57
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	63 e0       	ldi	r22, 0x03	; 3
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8command);
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <H_LCD_void_latchByte>
}
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <H_LCD_void_sendData>:

void H_LCD_void_sendData(uint8 copy_u8data )
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    226e:	89 e3       	ldi	r24, 0x39	; 57
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	63 e0       	ldi	r22, 0x03	; 3
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	H_LCD_void_latchByte(copy_u8data);
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <H_LCD_void_latchByte>
}
    2280:	0f 90       	pop	r0
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const sint8 * pstr)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	00 d0       	rcall	.+0      	; 0x228e <H_LCD_void_sendString+0x6>
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	9b 83       	std	Y+3, r25	; 0x03
    2296:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2298:	19 82       	std	Y+1, r1	; 0x01
    229a:	0e c0       	rjmp	.+28     	; 0x22b8 <H_LCD_void_sendString+0x30>
	for(;pstr[i]!='\0';i++)
	{
		H_LCD_void_sendData(pstr[i]);
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	9b 81       	ldd	r25, Y+3	; 0x03
    22a6:	fc 01       	movw	r30, r24
    22a8:	e2 0f       	add	r30, r18
    22aa:	f3 1f       	adc	r31, r19
    22ac:	80 81       	ld	r24, Z
    22ae:	0e 94 31 11 	call	0x2262	; 0x2262 <H_LCD_void_sendData>
}

void H_LCD_void_sendString(const sint8 * pstr)
{
	uint8 i=0;
	for(;pstr[i]!='\0';i++)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	9b 81       	ldd	r25, Y+3	; 0x03
    22c2:	fc 01       	movw	r30, r24
    22c4:	e2 0f       	add	r30, r18
    22c6:	f3 1f       	adc	r31, r19
    22c8:	80 81       	ld	r24, Z
    22ca:	88 23       	and	r24, r24
    22cc:	39 f7       	brne	.-50     	; 0x229c <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[i]);
	}
}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <H_LCD_void_sendIntNum>:


char buff[16]; /* String to hold the ascii result */

void H_LCD_void_sendIntNum(sint32 copy_s32Num)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	64 97       	sbiw	r28, 0x14	; 20
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	69 8b       	std	Y+17, r22	; 0x11
    22f0:	7a 8b       	std	Y+18, r23	; 0x12
    22f2:	8b 8b       	std	Y+19, r24	; 0x13
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
	sint8 buff[16];
	itoa(copy_s32Num,buff,10);
    22f6:	89 89       	ldd	r24, Y+17	; 0x11
    22f8:	9a 89       	ldd	r25, Y+18	; 0x12
    22fa:	9e 01       	movw	r18, r28
    22fc:	2f 5f       	subi	r18, 0xFF	; 255
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	b9 01       	movw	r22, r18
    2302:	4a e0       	ldi	r20, 0x0A	; 10
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <itoa>
	H_LCD_void_sendString(buff);
    230a:	ce 01       	movw	r24, r28
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	0e 94 44 11 	call	0x2288	; 0x2288 <H_LCD_void_sendString>
}
    2312:	64 96       	adiw	r28, 0x14	; 20
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Keypad_adjustKeyNum>:
 */

#include "inc/keypad.h"

uint8 Keypad_adjustKeyNum(uint8 buttonNum)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <Keypad_adjustKeyNum+0x6>
    232a:	00 d0       	rcall	.+0      	; 0x232c <Keypad_adjustKeyNum+0x8>
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	8a 83       	std	Y+2, r24	; 0x02
	uint8 button=0;
    2332:	19 82       	std	Y+1, r1	; 0x01
	switch(buttonNum)
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	3c 83       	std	Y+4, r19	; 0x04
    233c:	2b 83       	std	Y+3, r18	; 0x03
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	88 30       	cpi	r24, 0x08	; 8
    2344:	91 05       	cpc	r25, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <Keypad_adjustKeyNum+0x26>
    2348:	70 c0       	rjmp	.+224    	; 0x242a <Keypad_adjustKeyNum+0x106>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	29 30       	cpi	r18, 0x09	; 9
    2350:	31 05       	cpc	r19, r1
    2352:	5c f5       	brge	.+86     	; 0x23aa <Keypad_adjustKeyNum+0x86>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <Keypad_adjustKeyNum+0x3c>
    235e:	59 c0       	rjmp	.+178    	; 0x2412 <Keypad_adjustKeyNum+0xee>
    2360:	2b 81       	ldd	r18, Y+3	; 0x03
    2362:	3c 81       	ldd	r19, Y+4	; 0x04
    2364:	25 30       	cpi	r18, 0x05	; 5
    2366:	31 05       	cpc	r19, r1
    2368:	9c f4       	brge	.+38     	; 0x2390 <Keypad_adjustKeyNum+0x6c>
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	91 05       	cpc	r25, r1
    2372:	09 f4       	brne	.+2      	; 0x2376 <Keypad_adjustKeyNum+0x52>
    2374:	48 c0       	rjmp	.+144    	; 0x2406 <Keypad_adjustKeyNum+0xe2>
    2376:	2b 81       	ldd	r18, Y+3	; 0x03
    2378:	3c 81       	ldd	r19, Y+4	; 0x04
    237a:	23 30       	cpi	r18, 0x03	; 3
    237c:	31 05       	cpc	r19, r1
    237e:	0c f0       	brlt	.+2      	; 0x2382 <Keypad_adjustKeyNum+0x5e>
    2380:	45 c0       	rjmp	.+138    	; 0x240c <Keypad_adjustKeyNum+0xe8>
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	81 30       	cpi	r24, 0x01	; 1
    2388:	91 05       	cpc	r25, r1
    238a:	09 f4       	brne	.+2      	; 0x238e <Keypad_adjustKeyNum+0x6a>
    238c:	39 c0       	rjmp	.+114    	; 0x2400 <Keypad_adjustKeyNum+0xdc>
    238e:	67 c0       	rjmp	.+206    	; 0x245e <Keypad_adjustKeyNum+0x13a>
    2390:	2b 81       	ldd	r18, Y+3	; 0x03
    2392:	3c 81       	ldd	r19, Y+4	; 0x04
    2394:	26 30       	cpi	r18, 0x06	; 6
    2396:	31 05       	cpc	r19, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <Keypad_adjustKeyNum+0x78>
    239a:	41 c0       	rjmp	.+130    	; 0x241e <Keypad_adjustKeyNum+0xfa>
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	87 30       	cpi	r24, 0x07	; 7
    23a2:	91 05       	cpc	r25, r1
    23a4:	0c f0       	brlt	.+2      	; 0x23a8 <Keypad_adjustKeyNum+0x84>
    23a6:	3e c0       	rjmp	.+124    	; 0x2424 <Keypad_adjustKeyNum+0x100>
    23a8:	37 c0       	rjmp	.+110    	; 0x2418 <Keypad_adjustKeyNum+0xf4>
    23aa:	2b 81       	ldd	r18, Y+3	; 0x03
    23ac:	3c 81       	ldd	r19, Y+4	; 0x04
    23ae:	2c 30       	cpi	r18, 0x0C	; 12
    23b0:	31 05       	cpc	r19, r1
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <Keypad_adjustKeyNum+0x92>
    23b4:	46 c0       	rjmp	.+140    	; 0x2442 <Keypad_adjustKeyNum+0x11e>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	8d 30       	cpi	r24, 0x0D	; 13
    23bc:	91 05       	cpc	r25, r1
    23be:	5c f4       	brge	.+22     	; 0x23d6 <Keypad_adjustKeyNum+0xb2>
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	2a 30       	cpi	r18, 0x0A	; 10
    23c6:	31 05       	cpc	r19, r1
    23c8:	b1 f1       	breq	.+108    	; 0x2436 <Keypad_adjustKeyNum+0x112>
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	8b 30       	cpi	r24, 0x0B	; 11
    23d0:	91 05       	cpc	r25, r1
    23d2:	a4 f5       	brge	.+104    	; 0x243c <Keypad_adjustKeyNum+0x118>
    23d4:	2d c0       	rjmp	.+90     	; 0x2430 <Keypad_adjustKeyNum+0x10c>
    23d6:	2b 81       	ldd	r18, Y+3	; 0x03
    23d8:	3c 81       	ldd	r19, Y+4	; 0x04
    23da:	2e 30       	cpi	r18, 0x0E	; 14
    23dc:	31 05       	cpc	r19, r1
    23de:	b9 f1       	breq	.+110    	; 0x244e <Keypad_adjustKeyNum+0x12a>
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	8e 30       	cpi	r24, 0x0E	; 14
    23e6:	91 05       	cpc	r25, r1
    23e8:	7c f1       	brlt	.+94     	; 0x2448 <Keypad_adjustKeyNum+0x124>
    23ea:	2b 81       	ldd	r18, Y+3	; 0x03
    23ec:	3c 81       	ldd	r19, Y+4	; 0x04
    23ee:	2f 30       	cpi	r18, 0x0F	; 15
    23f0:	31 05       	cpc	r19, r1
    23f2:	79 f1       	breq	.+94     	; 0x2452 <Keypad_adjustKeyNum+0x12e>
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	80 31       	cpi	r24, 0x10	; 16
    23fa:	91 05       	cpc	r25, r1
    23fc:	69 f1       	breq	.+90     	; 0x2458 <Keypad_adjustKeyNum+0x134>
    23fe:	2f c0       	rjmp	.+94     	; 0x245e <Keypad_adjustKeyNum+0x13a>
	{
	case 1:
		button=7;
    2400:	87 e0       	ldi	r24, 0x07	; 7
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	2e c0       	rjmp	.+92     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 2:
		button=8;
    2406:	88 e0       	ldi	r24, 0x08	; 8
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	2b c0       	rjmp	.+86     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 3:
		button=9;
    240c:	89 e0       	ldi	r24, 0x09	; 9
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	28 c0       	rjmp	.+80     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 4:
		button='%';
    2412:	85 e2       	ldi	r24, 0x25	; 37
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	25 c0       	rjmp	.+74     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 5:
		button=4;
    2418:	84 e0       	ldi	r24, 0x04	; 4
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	22 c0       	rjmp	.+68     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 6:
		button=5;
    241e:	85 e0       	ldi	r24, 0x05	; 5
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	1f c0       	rjmp	.+62     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 7:
		button=6;
    2424:	86 e0       	ldi	r24, 0x06	; 6
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	1c c0       	rjmp	.+56     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 8:
		button='*';
    242a:	8a e2       	ldi	r24, 0x2A	; 42
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	19 c0       	rjmp	.+50     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 9:
		button=1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	16 c0       	rjmp	.+44     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 10:
		button=2;
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	13 c0       	rjmp	.+38     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 11:
		button=3;
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	10 c0       	rjmp	.+32     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 12:
		button='-';
    2442:	8d e2       	ldi	r24, 0x2D	; 45
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	0d c0       	rjmp	.+26     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 13:
		button=13;
    2448:	8d e0       	ldi	r24, 0x0D	; 13
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	0a c0       	rjmp	.+20     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 14:
		button=0;
    244e:	19 82       	std	Y+1, r1	; 0x01
    2450:	08 c0       	rjmp	.+16     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 15:
		button='=';
    2452:	8d e3       	ldi	r24, 0x3D	; 61
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	case 16:
		button='+';
    2458:	8b e2       	ldi	r24, 0x2B	; 43
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <Keypad_adjustKeyNum+0x13e>
		break;
	default :
		button=buttonNum;
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return button;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <Keypad_getPressedKey>:

uint8 Keypad_getPressedKey(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <Keypad_getPressedKey+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <Keypad_getPressedKey+0x8>
    247a:	00 d0       	rcall	.+0      	; 0x247c <Keypad_getPressedKey+0xa>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 key=0;
    2480:	1a 82       	std	Y+2, r1	; 0x02
	uint8 keypad_port_value=0;
    2482:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		for(col=0;col<4;col++)
    2484:	1b 82       	std	Y+3, r1	; 0x03
    2486:	7a c0       	rjmp	.+244    	; 0x257c <Keypad_getPressedKey+0x10a>
		{
			DIO_voidSetPortDirection(PORTD_BASE,INPUT);
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DIO_voidSetPortDirection>
			switch(col)
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	3e 83       	std	Y+6, r19	; 0x06
    249a:	2d 83       	std	Y+5, r18	; 0x05
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	f1 f0       	breq	.+60     	; 0x24e2 <Keypad_getPressedKey+0x70>
    24a6:	2d 81       	ldd	r18, Y+5	; 0x05
    24a8:	3e 81       	ldd	r19, Y+6	; 0x06
    24aa:	22 30       	cpi	r18, 0x02	; 2
    24ac:	31 05       	cpc	r19, r1
    24ae:	2c f4       	brge	.+10     	; 0x24ba <Keypad_getPressedKey+0x48>
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	61 f0       	breq	.+24     	; 0x24d0 <Keypad_getPressedKey+0x5e>
    24b8:	2e c0       	rjmp	.+92     	; 0x2516 <Keypad_getPressedKey+0xa4>
    24ba:	2d 81       	ldd	r18, Y+5	; 0x05
    24bc:	3e 81       	ldd	r19, Y+6	; 0x06
    24be:	22 30       	cpi	r18, 0x02	; 2
    24c0:	31 05       	cpc	r19, r1
    24c2:	c1 f0       	breq	.+48     	; 0x24f4 <Keypad_getPressedKey+0x82>
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	91 05       	cpc	r25, r1
    24cc:	e1 f0       	breq	.+56     	; 0x2506 <Keypad_getPressedKey+0x94>
    24ce:	23 c0       	rjmp	.+70     	; 0x2516 <Keypad_getPressedKey+0xa4>
			{
			case 0:
				DIO_voidSetPinDirection(PORTD_BASE,PIN7,OUTPUT);
    24d0:	80 e3       	ldi	r24, 0x30	; 48
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	67 e0       	ldi	r22, 0x07	; 7
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN7);
    24dc:	8f e7       	ldi	r24, 0x7F	; 127
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	1a c0       	rjmp	.+52     	; 0x2516 <Keypad_getPressedKey+0xa4>
				break;
			case 1:
				DIO_voidSetPinDirection(PORTD_BASE,PIN6,OUTPUT);
    24e2:	80 e3       	ldi	r24, 0x30	; 48
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	66 e0       	ldi	r22, 0x06	; 6
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN6);
    24ee:	8f eb       	ldi	r24, 0xBF	; 191
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <Keypad_getPressedKey+0xa4>
				break;
			case 2:
				DIO_voidSetPinDirection(PORTD_BASE,PIN5,OUTPUT);
    24f4:	80 e3       	ldi	r24, 0x30	; 48
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	65 e0       	ldi	r22, 0x05	; 5
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN5);
    2500:	8f ed       	ldi	r24, 0xDF	; 223
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	08 c0       	rjmp	.+16     	; 0x2516 <Keypad_getPressedKey+0xa4>
				break;
			case 3:
				DIO_voidSetPinDirection(PORTD_BASE,PIN3,OUTPUT);
    2506:	80 e3       	ldi	r24, 0x30	; 48
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	63 e0       	ldi	r22, 0x03	; 3
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
				keypad_port_value = ~(1<<PIN3);
    2512:	87 ef       	ldi	r24, 0xF7	; 247
    2514:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);
    2516:	80 e3       	ldi	r24, 0x30	; 48
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	69 81       	ldd	r22, Y+1	; 0x01
    251c:	0e 94 8b 08 	call	0x1116	; 0x1116 <DIO_voidSetPortValue>

			for(row=0;row<4;row++)
    2520:	1c 82       	std	Y+4, r1	; 0x04
    2522:	26 c0       	rjmp	.+76     	; 0x2570 <Keypad_getPressedKey+0xfe>
			{
				if(DIO_voidGetPinValue(PORTC_BASE,PIN5-row)==LOGIC_LOW)
    2524:	95 e0       	ldi	r25, 0x05	; 5
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	29 2f       	mov	r18, r25
    252a:	28 1b       	sub	r18, r24
    252c:	83 e3       	ldi	r24, 0x33	; 51
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	62 2f       	mov	r22, r18
    2532:	0e 94 ef 07 	call	0xfde	; 0xfde <DIO_voidGetPinValue>
    2536:	88 23       	and	r24, r24
    2538:	c1 f4       	brne	.+48     	; 0x256a <Keypad_getPressedKey+0xf8>
				{
					key=Keypad_adjustKeyNum((row*4)+col+1);
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	88 2f       	mov	r24, r24
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	98 2f       	mov	r25, r24
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	89 0f       	add	r24, r25
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	0e 94 92 11 	call	0x2324	; 0x2324 <Keypad_adjustKeyNum>
    2554:	8a 83       	std	Y+2, r24	; 0x02
					return key;
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
				}
			}
		}

	}
}
    2558:	26 96       	adiw	r28, 0x06	; 6
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret
				keypad_port_value = ~(1<<PIN3);
				break;
			}
			DIO_voidSetPortValue(PORTD_BASE,keypad_port_value);

			for(row=0;row<4;row++)
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	8c 83       	std	Y+4, r24	; 0x04
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	b8 f2       	brcs	.-82     	; 0x2524 <Keypad_getPressedKey+0xb2>
	uint8 key=0;
	uint8 keypad_port_value=0;

	while(1)
	{
		for(col=0;col<4;col++)
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	8f 5f       	subi	r24, 0xFF	; 255
    257a:	8b 83       	std	Y+3, r24	; 0x03
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	84 30       	cpi	r24, 0x04	; 4
    2580:	08 f4       	brcc	.+2      	; 0x2584 <Keypad_getPressedKey+0x112>
    2582:	82 cf       	rjmp	.-252    	; 0x2488 <Keypad_getPressedKey+0x16>
    2584:	7f cf       	rjmp	.-258    	; 0x2484 <Keypad_getPressedKey+0x12>

00002586 <SevenSeg_Init>:
 */

#include "inc\segment7_driver.h"

void SevenSeg_Init()
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTB_BASE,PIN0,OUTPUT);
    258e:	86 e3       	ldi	r24, 0x36	; 54
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN1,OUTPUT);
    259a:	86 e3       	ldi	r24, 0x36	; 54
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN2,OUTPUT);
    25a6:	86 e3       	ldi	r24, 0x36	; 54
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	62 e0       	ldi	r22, 0x02	; 2
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_BASE,PIN4,OUTPUT);
    25b2:	86 e3       	ldi	r24, 0x36	; 54
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	64 e0       	ldi	r22, 0x04	; 4
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(PORTB_BASE,PIN0,INPUT);
    25be:	86 e3       	ldi	r24, 0x36	; 54
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN1,INPUT);
    25ca:	86 e3       	ldi	r24, 0x36	; 54
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN2,INPUT);
    25d6:	86 e3       	ldi	r24, 0x36	; 54
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORTB_BASE,PIN4,INPUT);
    25e2:	86 e3       	ldi	r24, 0x36	; 54
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	64 e0       	ldi	r22, 0x04	; 4
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(PORTA_BASE,PIN3,OUTPUT);
    25ee:	89 e3       	ldi	r24, 0x39	; 57
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN3,LOGIC_LOW);
    25fa:	89 e3       	ldi	r24, 0x39	; 57
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	63 e0       	ldi	r22, 0x03	; 3
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTA_BASE,PIN2,OUTPUT);
    2606:	89 e3       	ldi	r24, 0x39	; 57
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_BASE,PIN2,LOGIC_LOW);
    2612:	89 e3       	ldi	r24, 0x39	; 57
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	62 e0       	ldi	r22, 0x02	; 2
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN5,OUTPUT);
    261e:	86 e3       	ldi	r24, 0x36	; 54
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN5,LOGIC_LOW);
    262a:	86 e3       	ldi	r24, 0x36	; 54
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	65 e0       	ldi	r22, 0x05	; 5
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
	DIO_voidSetPinDirection(PORTB_BASE,PIN6,OUTPUT);
    2636:	86 e3       	ldi	r24, 0x36	; 54
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	66 e0       	ldi	r22, 0x06	; 6
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_BASE,PIN6,LOGIC_LOW);
    2642:	86 e3       	ldi	r24, 0x36	; 54
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	66 e0       	ldi	r22, 0x06	; 6
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <SevenSeg_Num>:


void SevenSeg_Num(uint8 num)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <SevenSeg_Num+0x6>
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	3b 83       	std	Y+3, r19	; 0x03
    266a:	2a 83       	std	Y+2, r18	; 0x02
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	91 05       	cpc	r25, r1
    2674:	09 f4       	brne	.+2      	; 0x2678 <SevenSeg_Num+0x24>
    2676:	ab c0       	rjmp	.+342    	; 0x27ce <SevenSeg_Num+0x17a>
    2678:	2a 81       	ldd	r18, Y+2	; 0x02
    267a:	3b 81       	ldd	r19, Y+3	; 0x03
    267c:	25 30       	cpi	r18, 0x05	; 5
    267e:	31 05       	cpc	r19, r1
    2680:	ec f4       	brge	.+58     	; 0x26bc <SevenSeg_Num+0x68>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <SevenSeg_Num+0x3a>
    268c:	55 c0       	rjmp	.+170    	; 0x2738 <SevenSeg_Num+0xe4>
    268e:	2a 81       	ldd	r18, Y+2	; 0x02
    2690:	3b 81       	ldd	r19, Y+3	; 0x03
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	2c f4       	brge	.+10     	; 0x26a2 <SevenSeg_Num+0x4e>
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	9b 81       	ldd	r25, Y+3	; 0x03
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	99 f1       	breq	.+102    	; 0x2706 <SevenSeg_Num+0xb2>
    26a0:	2b c1       	rjmp	.+598    	; 0x28f8 <SevenSeg_Num+0x2a4>
    26a2:	2a 81       	ldd	r18, Y+2	; 0x02
    26a4:	3b 81       	ldd	r19, Y+3	; 0x03
    26a6:	22 30       	cpi	r18, 0x02	; 2
    26a8:	31 05       	cpc	r19, r1
    26aa:	09 f4       	brne	.+2      	; 0x26ae <SevenSeg_Num+0x5a>
    26ac:	5e c0       	rjmp	.+188    	; 0x276a <SevenSeg_Num+0x116>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	83 30       	cpi	r24, 0x03	; 3
    26b4:	91 05       	cpc	r25, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <SevenSeg_Num+0x66>
    26b8:	71 c0       	rjmp	.+226    	; 0x279c <SevenSeg_Num+0x148>
    26ba:	1e c1       	rjmp	.+572    	; 0x28f8 <SevenSeg_Num+0x2a4>
    26bc:	2a 81       	ldd	r18, Y+2	; 0x02
    26be:	3b 81       	ldd	r19, Y+3	; 0x03
    26c0:	27 30       	cpi	r18, 0x07	; 7
    26c2:	31 05       	cpc	r19, r1
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <SevenSeg_Num+0x74>
    26c6:	ce c0       	rjmp	.+412    	; 0x2864 <SevenSeg_Num+0x210>
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	9b 81       	ldd	r25, Y+3	; 0x03
    26cc:	88 30       	cpi	r24, 0x08	; 8
    26ce:	91 05       	cpc	r25, r1
    26d0:	6c f4       	brge	.+26     	; 0x26ec <SevenSeg_Num+0x98>
    26d2:	2a 81       	ldd	r18, Y+2	; 0x02
    26d4:	3b 81       	ldd	r19, Y+3	; 0x03
    26d6:	25 30       	cpi	r18, 0x05	; 5
    26d8:	31 05       	cpc	r19, r1
    26da:	09 f4       	brne	.+2      	; 0x26de <SevenSeg_Num+0x8a>
    26dc:	91 c0       	rjmp	.+290    	; 0x2800 <SevenSeg_Num+0x1ac>
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	9b 81       	ldd	r25, Y+3	; 0x03
    26e2:	86 30       	cpi	r24, 0x06	; 6
    26e4:	91 05       	cpc	r25, r1
    26e6:	09 f4       	brne	.+2      	; 0x26ea <SevenSeg_Num+0x96>
    26e8:	a4 c0       	rjmp	.+328    	; 0x2832 <SevenSeg_Num+0x1de>
    26ea:	06 c1       	rjmp	.+524    	; 0x28f8 <SevenSeg_Num+0x2a4>
    26ec:	2a 81       	ldd	r18, Y+2	; 0x02
    26ee:	3b 81       	ldd	r19, Y+3	; 0x03
    26f0:	28 30       	cpi	r18, 0x08	; 8
    26f2:	31 05       	cpc	r19, r1
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <SevenSeg_Num+0xa4>
    26f6:	cf c0       	rjmp	.+414    	; 0x2896 <SevenSeg_Num+0x242>
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	89 30       	cpi	r24, 0x09	; 9
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <SevenSeg_Num+0xb0>
    2702:	e2 c0       	rjmp	.+452    	; 0x28c8 <SevenSeg_Num+0x274>
    2704:	f9 c0       	rjmp	.+498    	; 0x28f8 <SevenSeg_Num+0x2a4>
	{
	case 0 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2706:	86 e3       	ldi	r24, 0x36	; 54
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2712:	86 e3       	ldi	r24, 0x36	; 54
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    271e:	86 e3       	ldi	r24, 0x36	; 54
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	62 e0       	ldi	r22, 0x02	; 2
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    272a:	86 e3       	ldi	r24, 0x36	; 54
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	64 e0       	ldi	r22, 0x04	; 4
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2736:	e0 c0       	rjmp	.+448    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2738:	86 e3       	ldi	r24, 0x36	; 54
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    2744:	86 e3       	ldi	r24, 0x36	; 54
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2750:	86 e3       	ldi	r24, 0x36	; 54
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    275c:	86 e3       	ldi	r24, 0x36	; 54
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	64 e0       	ldi	r22, 0x04	; 4
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2768:	c7 c0       	rjmp	.+398    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    276a:	86 e3       	ldi	r24, 0x36	; 54
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    2776:	86 e3       	ldi	r24, 0x36	; 54
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    2782:	86 e3       	ldi	r24, 0x36	; 54
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    278e:	86 e3       	ldi	r24, 0x36	; 54
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	64 e0       	ldi	r22, 0x04	; 4
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    279a:	ae c0       	rjmp	.+348    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    279c:	86 e3       	ldi	r24, 0x36	; 54
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    27a8:	86 e3       	ldi	r24, 0x36	; 54
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	61 e0       	ldi	r22, 0x01	; 1
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    27b4:	86 e3       	ldi	r24, 0x36	; 54
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	62 e0       	ldi	r22, 0x02	; 2
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    27c0:	86 e3       	ldi	r24, 0x36	; 54
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	64 e0       	ldi	r22, 0x04	; 4
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    27cc:	95 c0       	rjmp	.+298    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    27ce:	86 e3       	ldi	r24, 0x36	; 54
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    27da:	86 e3       	ldi	r24, 0x36	; 54
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    27e6:	86 e3       	ldi	r24, 0x36	; 54
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    27f2:	86 e3       	ldi	r24, 0x36	; 54
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	64 e0       	ldi	r22, 0x04	; 4
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    27fe:	7c c0       	rjmp	.+248    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2800:	86 e3       	ldi	r24, 0x36	; 54
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    280c:	86 e3       	ldi	r24, 0x36	; 54
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    2818:	86 e3       	ldi	r24, 0x36	; 54
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	62 e0       	ldi	r22, 0x02	; 2
    281e:	41 e0       	ldi	r20, 0x01	; 1
    2820:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2824:	86 e3       	ldi	r24, 0x36	; 54
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	64 e0       	ldi	r22, 0x04	; 4
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2830:	63 c0       	rjmp	.+198    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2832:	86 e3       	ldi	r24, 0x36	; 54
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    283e:	86 e3       	ldi	r24, 0x36	; 54
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	61 e0       	ldi	r22, 0x01	; 1
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    284a:	86 e3       	ldi	r24, 0x36	; 54
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2856:	86 e3       	ldi	r24, 0x36	; 54
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	64 e0       	ldi	r22, 0x04	; 4
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2862:	4a c0       	rjmp	.+148    	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    2864:	86 e3       	ldi	r24, 0x36	; 54
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_HIGH);
    2870:	86 e3       	ldi	r24, 0x36	; 54
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	61 e0       	ldi	r22, 0x01	; 1
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_HIGH);
    287c:	86 e3       	ldi	r24, 0x36	; 54
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	62 e0       	ldi	r22, 0x02	; 2
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_LOW);
    2888:	86 e3       	ldi	r24, 0x36	; 54
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	64 e0       	ldi	r22, 0x04	; 4
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2894:	31 c0       	rjmp	.+98     	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_LOW);
    2896:	86 e3       	ldi	r24, 0x36	; 54
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	60 e0       	ldi	r22, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    28a2:	86 e3       	ldi	r24, 0x36	; 54
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    28ae:	86 e3       	ldi	r24, 0x36	; 54
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	62 e0       	ldi	r22, 0x02	; 2
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    28ba:	86 e3       	ldi	r24, 0x36	; 54
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	64 e0       	ldi	r22, 0x04	; 4
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    28c6:	18 c0       	rjmp	.+48     	; 0x28f8 <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(PORTB_BASE,PIN0,LOGIC_HIGH);
    28c8:	86 e3       	ldi	r24, 0x36	; 54
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN1,LOGIC_LOW);
    28d4:	86 e3       	ldi	r24, 0x36	; 54
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN2,LOGIC_LOW);
    28e0:	86 e3       	ldi	r24, 0x36	; 54
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	62 e0       	ldi	r22, 0x02	; 2
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTB_BASE,PIN4,LOGIC_HIGH);
    28ec:	86 e3       	ldi	r24, 0x36	; 54
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	64 e0       	ldi	r22, 0x04	; 4
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
		break;
	}

}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <Tim0_Task>:
*/

static gTick=0;

void Tim0_Task()
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	2e 97       	sbiw	r28, 0x0e	; 14
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
	gTick++;
    2918:	80 91 74 00 	lds	r24, 0x0074
    291c:	90 91 75 00 	lds	r25, 0x0075
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	90 93 75 00 	sts	0x0075, r25
    2926:	80 93 74 00 	sts	0x0074, r24
	if(gTick == 124)
    292a:	80 91 74 00 	lds	r24, 0x0074
    292e:	90 91 75 00 	lds	r25, 0x0075
    2932:	8c 37       	cpi	r24, 0x7C	; 124
    2934:	91 05       	cpc	r25, r1
    2936:	09 f0       	breq	.+2      	; 0x293a <Tim0_Task+0x36>
    2938:	7c c0       	rjmp	.+248    	; 0x2a32 <Tim0_Task+0x12e>
	{
		DIO_voidSetPinValue(PORTA_BASE,6,LOGIC_LOW);
    293a:	89 e3       	ldi	r24, 0x39	; 57
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	66 e0       	ldi	r22, 0x06	; 6
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	aa e7       	ldi	r26, 0x7A	; 122
    294c:	b4 e4       	ldi	r27, 0x44	; 68
    294e:	8b 87       	std	Y+11, r24	; 0x0b
    2950:	9c 87       	std	Y+12, r25	; 0x0c
    2952:	ad 87       	std	Y+13, r26	; 0x0d
    2954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6b 85       	ldd	r22, Y+11	; 0x0b
    2958:	7c 85       	ldd	r23, Y+12	; 0x0c
    295a:	8d 85       	ldd	r24, Y+13	; 0x0d
    295c:	9e 85       	ldd	r25, Y+14	; 0x0e
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a e7       	ldi	r20, 0x7A	; 122
    2964:	55 e4       	ldi	r21, 0x45	; 69
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	8f 83       	std	Y+7, r24	; 0x07
    2970:	98 87       	std	Y+8, r25	; 0x08
    2972:	a9 87       	std	Y+9, r26	; 0x09
    2974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2976:	6f 81       	ldd	r22, Y+7	; 0x07
    2978:	78 85       	ldd	r23, Y+8	; 0x08
    297a:	89 85       	ldd	r24, Y+9	; 0x09
    297c:	9a 85       	ldd	r25, Y+10	; 0x0a
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <Tim0_Task+0x94>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9e 83       	std	Y+6, r25	; 0x06
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	3f c0       	rjmp	.+126    	; 0x2a16 <Tim0_Task+0x112>
	else if (__tmp > 65535)
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	3f ef       	ldi	r19, 0xFF	; 255
    29a4:	4f e7       	ldi	r20, 0x7F	; 127
    29a6:	57 e4       	ldi	r21, 0x47	; 71
    29a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ac:	18 16       	cp	r1, r24
    29ae:	4c f5       	brge	.+82     	; 0x2a02 <Tim0_Task+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <Tim0_Task+0xf4>
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9c 83       	std	Y+4, r25	; 0x04
    29e0:	8b 83       	std	Y+3, r24	; 0x03
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <Tim0_Task+0xe2>
    29ea:	9c 83       	std	Y+4, r25	; 0x04
    29ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	69 f7       	brne	.-38     	; 0x29da <Tim0_Task+0xd6>
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <Tim0_Task+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	6f 81       	ldd	r22, Y+7	; 0x07
    2a04:	78 85       	ldd	r23, Y+8	; 0x08
    2a06:	89 85       	ldd	r24, Y+9	; 0x09
    2a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <Tim0_Task+0x11e>
    2a26:	9a 83       	std	Y+2, r25	; 0x02
    2a28:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		gTick =0;
    2a2a:	10 92 75 00 	sts	0x0075, r1
    2a2e:	10 92 74 00 	sts	0x0074, r1
	}

}
    2a32:	2e 96       	adiw	r28, 0x0e	; 14
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <main>:
void main()
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init(&TIM0_config);
    2a4c:	8e e6       	ldi	r24, 0x6E	; 110
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <Timer0_Init>
	Timer0_EnableInt(&TIM0_config,Tim0_Task);
    2a54:	22 e8       	ldi	r18, 0x82	; 130
    2a56:	34 e1       	ldi	r19, 0x14	; 20
    2a58:	8e e6       	ldi	r24, 0x6E	; 110
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	b9 01       	movw	r22, r18
    2a5e:	0e 94 07 0a 	call	0x140e	; 0x140e <Timer0_EnableInt>
	DIO_voidSetPinDirection(PORTA_BASE,6,OUTPUT);
    2a62:	89 e3       	ldi	r24, 0x39	; 57
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	66 e0       	ldi	r22, 0x06	; 6
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_voidSetPinDirection>

	while(1)
	{
		DIO_voidSetPinValue(PORTA_BASE,6,OUTPUT);
    2a6e:	89 e3       	ldi	r24, 0x39	; 57
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	66 e0       	ldi	r22, 0x06	; 6
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 3b 07 	call	0xe76	; 0xe76 <DIO_voidSetPinValue>
    2a7a:	f9 cf       	rjmp	.-14     	; 0x2a6e <main+0x2a>

00002a7c <__divmodhi4>:
    2a7c:	97 fb       	bst	r25, 7
    2a7e:	09 2e       	mov	r0, r25
    2a80:	07 26       	eor	r0, r23
    2a82:	0a d0       	rcall	.+20     	; 0x2a98 <__divmodhi4_neg1>
    2a84:	77 fd       	sbrc	r23, 7
    2a86:	04 d0       	rcall	.+8      	; 0x2a90 <__divmodhi4_neg2>
    2a88:	0c d0       	rcall	.+24     	; 0x2aa2 <__udivmodhi4>
    2a8a:	06 d0       	rcall	.+12     	; 0x2a98 <__divmodhi4_neg1>
    2a8c:	00 20       	and	r0, r0
    2a8e:	1a f4       	brpl	.+6      	; 0x2a96 <__divmodhi4_exit>

00002a90 <__divmodhi4_neg2>:
    2a90:	70 95       	com	r23
    2a92:	61 95       	neg	r22
    2a94:	7f 4f       	sbci	r23, 0xFF	; 255

00002a96 <__divmodhi4_exit>:
    2a96:	08 95       	ret

00002a98 <__divmodhi4_neg1>:
    2a98:	f6 f7       	brtc	.-4      	; 0x2a96 <__divmodhi4_exit>
    2a9a:	90 95       	com	r25
    2a9c:	81 95       	neg	r24
    2a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa0:	08 95       	ret

00002aa2 <__udivmodhi4>:
    2aa2:	aa 1b       	sub	r26, r26
    2aa4:	bb 1b       	sub	r27, r27
    2aa6:	51 e1       	ldi	r21, 0x11	; 17
    2aa8:	07 c0       	rjmp	.+14     	; 0x2ab8 <__udivmodhi4_ep>

00002aaa <__udivmodhi4_loop>:
    2aaa:	aa 1f       	adc	r26, r26
    2aac:	bb 1f       	adc	r27, r27
    2aae:	a6 17       	cp	r26, r22
    2ab0:	b7 07       	cpc	r27, r23
    2ab2:	10 f0       	brcs	.+4      	; 0x2ab8 <__udivmodhi4_ep>
    2ab4:	a6 1b       	sub	r26, r22
    2ab6:	b7 0b       	sbc	r27, r23

00002ab8 <__udivmodhi4_ep>:
    2ab8:	88 1f       	adc	r24, r24
    2aba:	99 1f       	adc	r25, r25
    2abc:	5a 95       	dec	r21
    2abe:	a9 f7       	brne	.-22     	; 0x2aaa <__udivmodhi4_loop>
    2ac0:	80 95       	com	r24
    2ac2:	90 95       	com	r25
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	08 95       	ret

00002aca <__prologue_saves__>:
    2aca:	2f 92       	push	r2
    2acc:	3f 92       	push	r3
    2ace:	4f 92       	push	r4
    2ad0:	5f 92       	push	r5
    2ad2:	6f 92       	push	r6
    2ad4:	7f 92       	push	r7
    2ad6:	8f 92       	push	r8
    2ad8:	9f 92       	push	r9
    2ada:	af 92       	push	r10
    2adc:	bf 92       	push	r11
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	ca 1b       	sub	r28, r26
    2af4:	db 0b       	sbc	r29, r27
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	09 94       	ijmp

00002b02 <__epilogue_restores__>:
    2b02:	2a 88       	ldd	r2, Y+18	; 0x12
    2b04:	39 88       	ldd	r3, Y+17	; 0x11
    2b06:	48 88       	ldd	r4, Y+16	; 0x10
    2b08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b14:	b9 84       	ldd	r11, Y+9	; 0x09
    2b16:	c8 84       	ldd	r12, Y+8	; 0x08
    2b18:	df 80       	ldd	r13, Y+7	; 0x07
    2b1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b20:	1b 81       	ldd	r17, Y+3	; 0x03
    2b22:	aa 81       	ldd	r26, Y+2	; 0x02
    2b24:	b9 81       	ldd	r27, Y+1	; 0x01
    2b26:	ce 0f       	add	r28, r30
    2b28:	d1 1d       	adc	r29, r1
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	ed 01       	movw	r28, r26
    2b36:	08 95       	ret

00002b38 <itoa>:
    2b38:	fb 01       	movw	r30, r22
    2b3a:	9f 01       	movw	r18, r30
    2b3c:	e8 94       	clt
    2b3e:	42 30       	cpi	r20, 0x02	; 2
    2b40:	c4 f0       	brlt	.+48     	; 0x2b72 <itoa+0x3a>
    2b42:	45 32       	cpi	r20, 0x25	; 37
    2b44:	b4 f4       	brge	.+44     	; 0x2b72 <itoa+0x3a>
    2b46:	4a 30       	cpi	r20, 0x0A	; 10
    2b48:	29 f4       	brne	.+10     	; 0x2b54 <itoa+0x1c>
    2b4a:	97 fb       	bst	r25, 7
    2b4c:	1e f4       	brtc	.+6      	; 0x2b54 <itoa+0x1c>
    2b4e:	90 95       	com	r25
    2b50:	81 95       	neg	r24
    2b52:	9f 4f       	sbci	r25, 0xFF	; 255
    2b54:	64 2f       	mov	r22, r20
    2b56:	77 27       	eor	r23, r23
    2b58:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__udivmodhi4>
    2b5c:	80 5d       	subi	r24, 0xD0	; 208
    2b5e:	8a 33       	cpi	r24, 0x3A	; 58
    2b60:	0c f0       	brlt	.+2      	; 0x2b64 <itoa+0x2c>
    2b62:	89 5d       	subi	r24, 0xD9	; 217
    2b64:	81 93       	st	Z+, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	a1 f7       	brne	.-24     	; 0x2b54 <itoa+0x1c>
    2b6c:	16 f4       	brtc	.+4      	; 0x2b72 <itoa+0x3a>
    2b6e:	5d e2       	ldi	r21, 0x2D	; 45
    2b70:	51 93       	st	Z+, r21
    2b72:	10 82       	st	Z, r1
    2b74:	c9 01       	movw	r24, r18
    2b76:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <strrev>

00002b7a <strrev>:
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	67 2f       	mov	r22, r23
    2b80:	71 91       	ld	r23, Z+
    2b82:	77 23       	and	r23, r23
    2b84:	e1 f7       	brne	.-8      	; 0x2b7e <strrev+0x4>
    2b86:	32 97       	sbiw	r30, 0x02	; 2
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <strrev+0x18>
    2b8a:	7c 91       	ld	r23, X
    2b8c:	6d 93       	st	X+, r22
    2b8e:	70 83       	st	Z, r23
    2b90:	62 91       	ld	r22, -Z
    2b92:	ae 17       	cp	r26, r30
    2b94:	bf 07       	cpc	r27, r31
    2b96:	c8 f3       	brcs	.-14     	; 0x2b8a <strrev+0x10>
    2b98:	08 95       	ret

00002b9a <_exit>:
    2b9a:	f8 94       	cli

00002b9c <__stop_program>:
    2b9c:	ff cf       	rjmp	.-2      	; 0x2b9c <__stop_program>
